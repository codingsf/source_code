// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: subscription.proto

#include "subscription.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace MEProInterface {
class ST_USER_LOGIN_INFODefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_USER_LOGIN_INFO>
      _instance;
} _ST_USER_LOGIN_INFO_default_instance_;
class ST_SIG_IP_INFODefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_SIG_IP_INFO>
      _instance;
} _ST_SIG_IP_INFO_default_instance_;
class ST_SYMBOL_INFODefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_SYMBOL_INFO>
      _instance;
} _ST_SYMBOL_INFO_default_instance_;
class ST_USER_LOGIN_RESPDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_USER_LOGIN_RESP>
      _instance;
} _ST_USER_LOGIN_RESP_default_instance_;
class ST_SUBMIT_ORDERDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_SUBMIT_ORDER>
      _instance;
} _ST_SUBMIT_ORDER_default_instance_;
class ST_SUBMIT_CAMCEL_ORDERDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_SUBMIT_CAMCEL_ORDER>
      _instance;
} _ST_SUBMIT_CAMCEL_ORDER_default_instance_;
class ST_SUBMIT_ORDER_RESPDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_SUBMIT_ORDER_RESP>
      _instance;
} _ST_SUBMIT_ORDER_RESP_default_instance_;
class ST_TRANS_ORDER_INFODefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_TRANS_ORDER_INFO>
      _instance;
} _ST_TRANS_ORDER_INFO_default_instance_;
class ST_REP_TRANS_ORDER_REQUESTDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_REP_TRANS_ORDER_REQUEST>
      _instance;
} _ST_REP_TRANS_ORDER_REQUEST_default_instance_;
class ST_QUERY_ORDER_INFODefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_QUERY_ORDER_INFO>
      _instance;
} _ST_QUERY_ORDER_INFO_default_instance_;
class ST_QUERY_ORDER_RESDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_QUERY_ORDER_RES>
      _instance;
} _ST_QUERY_ORDER_RES_default_instance_;
class ST_MART_QUOTATIONDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_MART_QUOTATION>
      _instance;
} _ST_MART_QUOTATION_default_instance_;
class ST_SIG_ORDER_INFODefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_SIG_ORDER_INFO>
      _instance;
} _ST_SIG_ORDER_INFO_default_instance_;
class ST_MARKET_ORDERBOOKDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_MARKET_ORDERBOOK>
      _instance;
} _ST_MARKET_ORDERBOOK_default_instance_;
class ST_MAINTAIN_LOGDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_MAINTAIN_LOG>
      _instance;
} _ST_MAINTAIN_LOG_default_instance_;
class IntervalMsgHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IntervalMsgHeader>
      _instance;
  const ::MEProInterface::ST_USER_LOGIN_INFO* stuserlogin_;
  const ::MEProInterface::ST_USER_LOGIN_RESP* stloginresp_;
  const ::MEProInterface::ST_SUBMIT_ORDER* stsubmitorder_;
  const ::MEProInterface::ST_SUBMIT_CAMCEL_ORDER* stcancelorder_;
  const ::MEProInterface::ST_SUBMIT_ORDER_RESP* storderresp_;
  const ::MEProInterface::ST_QUERY_ORDER_INFO* stqueryorder_;
  const ::MEProInterface::ST_QUERY_ORDER_RES* stqueryresp_;
  const ::MEProInterface::ST_TRANS_ORDER_INFO* sttransorder_;
  const ::MEProInterface::ST_MART_QUOTATION* stmarketdata_;
  const ::MEProInterface::ST_REP_TRANS_ORDER_REQUEST* streptransreq_;
  const ::MEProInterface::ST_USER_LOGIN_INFO* stsubcriuserlogin_;
  const ::MEProInterface::ST_QUERY_ORDER_INFO* stqueryhistoryorder_;
  const ::MEProInterface::ST_MARKET_ORDERBOOK* stmarketorderbook_;
  const ::MEProInterface::ST_MAINTAIN_LOG* stmaintainlog_;
} _IntervalMsgHeader_default_instance_;
}  // namespace MEProInterface
namespace protobuf_subscription_2eproto {
void InitDefaultsST_USER_LOGIN_INFOImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::MEProInterface::_ST_USER_LOGIN_INFO_default_instance_;
    new (ptr) ::MEProInterface::ST_USER_LOGIN_INFO();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MEProInterface::ST_USER_LOGIN_INFO::InitAsDefaultInstance();
}

void InitDefaultsST_USER_LOGIN_INFO() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_USER_LOGIN_INFOImpl);
}

void InitDefaultsST_SIG_IP_INFOImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::MEProInterface::_ST_SIG_IP_INFO_default_instance_;
    new (ptr) ::MEProInterface::ST_SIG_IP_INFO();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MEProInterface::ST_SIG_IP_INFO::InitAsDefaultInstance();
}

void InitDefaultsST_SIG_IP_INFO() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_SIG_IP_INFOImpl);
}

void InitDefaultsST_SYMBOL_INFOImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::MEProInterface::_ST_SYMBOL_INFO_default_instance_;
    new (ptr) ::MEProInterface::ST_SYMBOL_INFO();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MEProInterface::ST_SYMBOL_INFO::InitAsDefaultInstance();
}

void InitDefaultsST_SYMBOL_INFO() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_SYMBOL_INFOImpl);
}

void InitDefaultsST_USER_LOGIN_RESPImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_subscription_2eproto::InitDefaultsST_SIG_IP_INFO();
  protobuf_subscription_2eproto::InitDefaultsST_SYMBOL_INFO();
  {
    void* ptr = &::MEProInterface::_ST_USER_LOGIN_RESP_default_instance_;
    new (ptr) ::MEProInterface::ST_USER_LOGIN_RESP();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MEProInterface::ST_USER_LOGIN_RESP::InitAsDefaultInstance();
}

void InitDefaultsST_USER_LOGIN_RESP() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_USER_LOGIN_RESPImpl);
}

void InitDefaultsST_SUBMIT_ORDERImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::MEProInterface::_ST_SUBMIT_ORDER_default_instance_;
    new (ptr) ::MEProInterface::ST_SUBMIT_ORDER();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MEProInterface::ST_SUBMIT_ORDER::InitAsDefaultInstance();
}

void InitDefaultsST_SUBMIT_ORDER() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_SUBMIT_ORDERImpl);
}

void InitDefaultsST_SUBMIT_CAMCEL_ORDERImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::MEProInterface::_ST_SUBMIT_CAMCEL_ORDER_default_instance_;
    new (ptr) ::MEProInterface::ST_SUBMIT_CAMCEL_ORDER();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MEProInterface::ST_SUBMIT_CAMCEL_ORDER::InitAsDefaultInstance();
}

void InitDefaultsST_SUBMIT_CAMCEL_ORDER() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_SUBMIT_CAMCEL_ORDERImpl);
}

void InitDefaultsST_SUBMIT_ORDER_RESPImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::MEProInterface::_ST_SUBMIT_ORDER_RESP_default_instance_;
    new (ptr) ::MEProInterface::ST_SUBMIT_ORDER_RESP();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MEProInterface::ST_SUBMIT_ORDER_RESP::InitAsDefaultInstance();
}

void InitDefaultsST_SUBMIT_ORDER_RESP() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_SUBMIT_ORDER_RESPImpl);
}

void InitDefaultsST_TRANS_ORDER_INFOImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::MEProInterface::_ST_TRANS_ORDER_INFO_default_instance_;
    new (ptr) ::MEProInterface::ST_TRANS_ORDER_INFO();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MEProInterface::ST_TRANS_ORDER_INFO::InitAsDefaultInstance();
}

void InitDefaultsST_TRANS_ORDER_INFO() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_TRANS_ORDER_INFOImpl);
}

void InitDefaultsST_REP_TRANS_ORDER_REQUESTImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::MEProInterface::_ST_REP_TRANS_ORDER_REQUEST_default_instance_;
    new (ptr) ::MEProInterface::ST_REP_TRANS_ORDER_REQUEST();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MEProInterface::ST_REP_TRANS_ORDER_REQUEST::InitAsDefaultInstance();
}

void InitDefaultsST_REP_TRANS_ORDER_REQUEST() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_REP_TRANS_ORDER_REQUESTImpl);
}

void InitDefaultsST_QUERY_ORDER_INFOImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::MEProInterface::_ST_QUERY_ORDER_INFO_default_instance_;
    new (ptr) ::MEProInterface::ST_QUERY_ORDER_INFO();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MEProInterface::ST_QUERY_ORDER_INFO::InitAsDefaultInstance();
}

void InitDefaultsST_QUERY_ORDER_INFO() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_QUERY_ORDER_INFOImpl);
}

void InitDefaultsST_QUERY_ORDER_RESImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::MEProInterface::_ST_QUERY_ORDER_RES_default_instance_;
    new (ptr) ::MEProInterface::ST_QUERY_ORDER_RES();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MEProInterface::ST_QUERY_ORDER_RES::InitAsDefaultInstance();
}

void InitDefaultsST_QUERY_ORDER_RES() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_QUERY_ORDER_RESImpl);
}

void InitDefaultsST_MART_QUOTATIONImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::MEProInterface::_ST_MART_QUOTATION_default_instance_;
    new (ptr) ::MEProInterface::ST_MART_QUOTATION();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MEProInterface::ST_MART_QUOTATION::InitAsDefaultInstance();
}

void InitDefaultsST_MART_QUOTATION() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_MART_QUOTATIONImpl);
}

void InitDefaultsST_SIG_ORDER_INFOImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::MEProInterface::_ST_SIG_ORDER_INFO_default_instance_;
    new (ptr) ::MEProInterface::ST_SIG_ORDER_INFO();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MEProInterface::ST_SIG_ORDER_INFO::InitAsDefaultInstance();
}

void InitDefaultsST_SIG_ORDER_INFO() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_SIG_ORDER_INFOImpl);
}

void InitDefaultsST_MARKET_ORDERBOOKImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_subscription_2eproto::InitDefaultsST_SIG_ORDER_INFO();
  {
    void* ptr = &::MEProInterface::_ST_MARKET_ORDERBOOK_default_instance_;
    new (ptr) ::MEProInterface::ST_MARKET_ORDERBOOK();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MEProInterface::ST_MARKET_ORDERBOOK::InitAsDefaultInstance();
}

void InitDefaultsST_MARKET_ORDERBOOK() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_MARKET_ORDERBOOKImpl);
}

void InitDefaultsST_MAINTAIN_LOGImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::MEProInterface::_ST_MAINTAIN_LOG_default_instance_;
    new (ptr) ::MEProInterface::ST_MAINTAIN_LOG();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MEProInterface::ST_MAINTAIN_LOG::InitAsDefaultInstance();
}

void InitDefaultsST_MAINTAIN_LOG() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_MAINTAIN_LOGImpl);
}

void InitDefaultsIntervalMsgHeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_subscription_2eproto::InitDefaultsST_USER_LOGIN_INFO();
  protobuf_subscription_2eproto::InitDefaultsST_USER_LOGIN_RESP();
  protobuf_subscription_2eproto::InitDefaultsST_SUBMIT_ORDER();
  protobuf_subscription_2eproto::InitDefaultsST_SUBMIT_CAMCEL_ORDER();
  protobuf_subscription_2eproto::InitDefaultsST_SUBMIT_ORDER_RESP();
  protobuf_subscription_2eproto::InitDefaultsST_QUERY_ORDER_INFO();
  protobuf_subscription_2eproto::InitDefaultsST_QUERY_ORDER_RES();
  protobuf_subscription_2eproto::InitDefaultsST_TRANS_ORDER_INFO();
  protobuf_subscription_2eproto::InitDefaultsST_MART_QUOTATION();
  protobuf_subscription_2eproto::InitDefaultsST_REP_TRANS_ORDER_REQUEST();
  protobuf_subscription_2eproto::InitDefaultsST_MARKET_ORDERBOOK();
  protobuf_subscription_2eproto::InitDefaultsST_MAINTAIN_LOG();
  {
    void* ptr = &::MEProInterface::_IntervalMsgHeader_default_instance_;
    new (ptr) ::MEProInterface::IntervalMsgHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MEProInterface::IntervalMsgHeader::InitAsDefaultInstance();
}

void InitDefaultsIntervalMsgHeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIntervalMsgHeaderImpl);
}

::google::protobuf::Metadata file_level_metadata[16];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_USER_LOGIN_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_USER_LOGIN_INFO, chusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_USER_LOGIN_INFO, chpasswordtxt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_USER_LOGIN_INFO, chaddressip_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SIG_IP_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SIG_IP_INFO, wiptype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SIG_IP_INFO, ucipaddress_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SYMBOL_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SYMBOL_INFO, uisymbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SYMBOL_INFO, uisymbolname_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_USER_LOGIN_RESP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_USER_LOGIN_RESP, ucloginrsp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_USER_LOGIN_RESP, uiuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_USER_LOGIN_RESP, uiiplisynum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_USER_LOGIN_RESP, stipinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_USER_LOGIN_RESP, uisymbolnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_USER_LOGIN_RESP, stsymbolinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_USER_LOGIN_RESP, chusername_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_ORDER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_ORDER, strorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_ORDER, lsubmittime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_ORDER, uctranstype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_ORDER, ucordertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_ORDER, uiuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_ORDER, uiexchobjid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_ORDER, lprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_ORDER, lnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_ORDER, uiorderindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_ORDER, ucrecordid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_CAMCEL_ORDER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_CAMCEL_ORDER, strorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_CAMCEL_ORDER, lorderidfrme_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_CAMCEL_ORDER, uiorderindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_CAMCEL_ORDER, uiuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_CAMCEL_ORDER, uiexchobjid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_CAMCEL_ORDER, uctranstype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_CAMCEL_ORDER, lprice_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_ORDER_RESP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_ORDER_RESP, strorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_ORDER_RESP, uisubmitorderiype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_ORDER_RESP, lorderidfrme_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_ORDER_RESP, uiorderindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_ORDER_RESP, uiorderstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_ORDER_RESP, strtext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_ORDER_RESP, uiuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SUBMIT_ORDER_RESP, uctranstype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_TRANS_ORDER_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_TRANS_ORDER_INFO, strbidorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_TRANS_ORDER_INFO, straskorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_TRANS_ORDER_INFO, uibiduserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_TRANS_ORDER_INFO, uiaskuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_TRANS_ORDER_INFO, fprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_TRANS_ORDER_INFO, fnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_TRANS_ORDER_INFO, ucexchtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_TRANS_ORDER_INFO, ucrecordid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_TRANS_ORDER_INFO, ucorderstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_TRANS_ORDER_INFO, uiexchobjid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_TRANS_ORDER_INFO, mebidorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_TRANS_ORDER_INFO, measkorderid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_REP_TRANS_ORDER_REQUEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_REP_TRANS_ORDER_REQUEST, uiuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_REP_TRANS_ORDER_REQUEST, ucexchid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_REP_TRANS_ORDER_REQUEST, uiexchobjid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_QUERY_ORDER_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_QUERY_ORDER_INFO, uiuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_QUERY_ORDER_INFO, strorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_QUERY_ORDER_INFO, lorderidfrme_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_QUERY_ORDER_INFO, uiexchobjid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_QUERY_ORDER_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_QUERY_ORDER_RES, uiuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_QUERY_ORDER_RES, strorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_QUERY_ORDER_RES, uiexchobjid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_QUERY_ORDER_RES, wtransstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_QUERY_ORDER_RES, uctranstype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_QUERY_ORDER_RES, lorgprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_QUERY_ORDER_RES, lorgnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_QUERY_ORDER_RES, lavgtransferprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_QUERY_ORDER_RES, lavgtransfernum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_QUERY_ORDER_RES, lorderidfrme_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_MART_QUOTATION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_MART_QUOTATION, uiuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_MART_QUOTATION, uiexchobjid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_MART_QUOTATION, lcurdealproce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_MART_QUOTATION, ltotaldealproce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_MART_QUOTATION, lbeginproce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_MART_QUOTATION, lhighestproce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_MART_QUOTATION, lminimumproce_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SIG_ORDER_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SIG_ORDER_INFO, lprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_SIG_ORDER_INFO, lnumber_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_MARKET_ORDERBOOK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_MARKET_ORDERBOOK, uiuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_MARKET_ORDERBOOK, uiexchobjid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_MARKET_ORDERBOOK, uibidordernum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_MARKET_ORDERBOOK, stbidorder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_MARKET_ORDERBOOK, uiaskordernum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_MARKET_ORDERBOOK, staskorder_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_MAINTAIN_LOG, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_MAINTAIN_LOG, strhostname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_MAINTAIN_LOG, chloglevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_MAINTAIN_LOG, chmoduleindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_MAINTAIN_LOG, uireptime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::ST_MAINTAIN_LOG, strlogcontent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::IntervalMsgHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::IntervalMsgHeader, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::IntervalMsgHeader, iflownumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::IntervalMsgHeader, icmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::IntervalMsgHeader, imsgtype_),
  offsetof(::MEProInterface::IntervalMsgHeaderDefaultTypeInternal, stuserlogin_),
  offsetof(::MEProInterface::IntervalMsgHeaderDefaultTypeInternal, stloginresp_),
  offsetof(::MEProInterface::IntervalMsgHeaderDefaultTypeInternal, stsubmitorder_),
  offsetof(::MEProInterface::IntervalMsgHeaderDefaultTypeInternal, stcancelorder_),
  offsetof(::MEProInterface::IntervalMsgHeaderDefaultTypeInternal, storderresp_),
  offsetof(::MEProInterface::IntervalMsgHeaderDefaultTypeInternal, stqueryorder_),
  offsetof(::MEProInterface::IntervalMsgHeaderDefaultTypeInternal, stqueryresp_),
  offsetof(::MEProInterface::IntervalMsgHeaderDefaultTypeInternal, sttransorder_),
  offsetof(::MEProInterface::IntervalMsgHeaderDefaultTypeInternal, stmarketdata_),
  offsetof(::MEProInterface::IntervalMsgHeaderDefaultTypeInternal, streptransreq_),
  offsetof(::MEProInterface::IntervalMsgHeaderDefaultTypeInternal, stsubcriuserlogin_),
  offsetof(::MEProInterface::IntervalMsgHeaderDefaultTypeInternal, stqueryhistoryorder_),
  offsetof(::MEProInterface::IntervalMsgHeaderDefaultTypeInternal, stmarketorderbook_),
  offsetof(::MEProInterface::IntervalMsgHeaderDefaultTypeInternal, stmaintainlog_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::IntervalMsgHeader, MsgBody_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MEProInterface::ST_USER_LOGIN_INFO)},
  { 8, -1, sizeof(::MEProInterface::ST_SIG_IP_INFO)},
  { 15, -1, sizeof(::MEProInterface::ST_SYMBOL_INFO)},
  { 22, -1, sizeof(::MEProInterface::ST_USER_LOGIN_RESP)},
  { 34, -1, sizeof(::MEProInterface::ST_SUBMIT_ORDER)},
  { 49, -1, sizeof(::MEProInterface::ST_SUBMIT_CAMCEL_ORDER)},
  { 61, -1, sizeof(::MEProInterface::ST_SUBMIT_ORDER_RESP)},
  { 74, -1, sizeof(::MEProInterface::ST_TRANS_ORDER_INFO)},
  { 91, -1, sizeof(::MEProInterface::ST_REP_TRANS_ORDER_REQUEST)},
  { 99, -1, sizeof(::MEProInterface::ST_QUERY_ORDER_INFO)},
  { 108, -1, sizeof(::MEProInterface::ST_QUERY_ORDER_RES)},
  { 123, -1, sizeof(::MEProInterface::ST_MART_QUOTATION)},
  { 135, -1, sizeof(::MEProInterface::ST_SIG_ORDER_INFO)},
  { 142, -1, sizeof(::MEProInterface::ST_MARKET_ORDERBOOK)},
  { 153, -1, sizeof(::MEProInterface::ST_MAINTAIN_LOG)},
  { 163, -1, sizeof(::MEProInterface::IntervalMsgHeader)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::MEProInterface::_ST_USER_LOGIN_INFO_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MEProInterface::_ST_SIG_IP_INFO_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MEProInterface::_ST_SYMBOL_INFO_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MEProInterface::_ST_USER_LOGIN_RESP_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MEProInterface::_ST_SUBMIT_ORDER_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MEProInterface::_ST_SUBMIT_CAMCEL_ORDER_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MEProInterface::_ST_SUBMIT_ORDER_RESP_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MEProInterface::_ST_TRANS_ORDER_INFO_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MEProInterface::_ST_REP_TRANS_ORDER_REQUEST_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MEProInterface::_ST_QUERY_ORDER_INFO_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MEProInterface::_ST_QUERY_ORDER_RES_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MEProInterface::_ST_MART_QUOTATION_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MEProInterface::_ST_SIG_ORDER_INFO_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MEProInterface::_ST_MARKET_ORDERBOOK_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MEProInterface::_ST_MAINTAIN_LOG_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MEProInterface::_IntervalMsgHeader_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "subscription.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 16);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022subscription.proto\022\016MEProInterface\"T\n\022"
      "ST_USER_LOGIN_INFO\022\022\n\nchUserName\030\001 \001(\014\022\025"
      "\n\rchPasswordTxt\030\002 \001(\014\022\023\n\013chAddressIp\030\003 \001"
      "(\t\"6\n\016ST_SIG_IP_INFO\022\017\n\007wIpType\030\001 \001(\r\022\023\n"
      "\013ucIpAddress\030\002 \001(\014\":\n\016ST_SYMBOL_INFO\022\022\n\n"
      "uiSymbolID\030\001 \001(\r\022\024\n\014uiSymbolName\030\002 \001(\014\"\340"
      "\001\n\022ST_USER_LOGIN_RESP\022\022\n\nucLoginRsp\030\001 \001("
      "\r\022\020\n\010uiUserID\030\002 \001(\r\022\023\n\013uiIPLisyNum\030\003 \001(\r"
      "\0220\n\010stIPInfo\030\004 \003(\0132\036.MEProInterface.ST_S"
      "IG_IP_INFO\022\023\n\013uiSymbolNum\030\005 \001(\r\0224\n\014stSym"
      "bolInfo\030\006 \003(\0132\036.MEProInterface.ST_SYMBOL"
      "_INFO\022\022\n\nchUserName\030\007 \001(\014\"\326\001\n\017ST_SUBMIT_"
      "ORDER\022\022\n\nstrOrderID\030\001 \001(\t\022\023\n\013lSubmitTime"
      "\030\002 \001(\004\022\023\n\013ucTransType\030\003 \001(\r\022\023\n\013ucOrderTy"
      "pe\030\004 \001(\r\022\020\n\010uiUserID\030\005 \001(\r\022\023\n\013uiExchObjI"
      "D\030\006 \001(\r\022\016\n\006lPrice\030\007 \001(\003\022\017\n\007lNumber\030\010 \001(\003"
      "\022\024\n\014uiOrderIndex\030\t \001(\r\022\022\n\nucRecordID\030\n \001"
      "(\004\"\244\001\n\026ST_SUBMIT_CAMCEL_ORDER\022\022\n\nstrOrde"
      "rID\030\001 \001(\t\022\024\n\014lOrderIDFrME\030\002 \001(\004\022\024\n\014uiOrd"
      "erIndex\030\003 \001(\r\022\020\n\010uiUserID\030\004 \001(\r\022\023\n\013uiExc"
      "hObjID\030\005 \001(\r\022\023\n\013ucTransType\030\006 \001(\r\022\016\n\006lPr"
      "ice\030\007 \001(\003\"\300\001\n\024ST_SUBMIT_ORDER_RESP\022\022\n\nst"
      "rOrderID\030\001 \001(\t\022\031\n\021uiSubmitOrderIype\030\002 \001("
      "\r\022\024\n\014lOrderIDFrME\030\003 \001(\004\022\024\n\014uiOrderIndex\030"
      "\004 \001(\r\022\025\n\ruiOrderStatus\030\005 \001(\r\022\017\n\007strText\030"
      "\006 \001(\t\022\020\n\010uiUserID\030\007 \001(\r\022\023\n\013ucTransType\030\010"
      " \001(\r\"\216\002\n\023ST_TRANS_ORDER_INFO\022\025\n\rstrBidOr"
      "derID\030\001 \001(\t\022\025\n\rstrAskOrderID\030\002 \001(\t\022\023\n\013ui"
      "BidUserID\030\003 \001(\r\022\023\n\013uiAskUserID\030\004 \001(\r\022\016\n\006"
      "fPrice\030\005 \001(\003\022\017\n\007fNumber\030\006 \001(\003\022\022\n\nucExchT"
      "ype\030\007 \001(\r\022\022\n\nucRecordID\030\010 \001(\004\022\025\n\rucOrder"
      "Status\030\t \001(\r\022\023\n\013uiExchObjID\030\n \001(\r\022\024\n\014meB"
      "idOrderID\030\013 \001(\004\022\024\n\014meAskOrderID\030\014 \001(\004\"U\n"
      "\032ST_REP_TRANS_ORDER_REQUEST\022\020\n\010uiUserID\030"
      "\001 \001(\r\022\020\n\010ucExchID\030\002 \001(\004\022\023\n\013uiExchObjID\030\003"
      " \001(\r\"f\n\023ST_QUERY_ORDER_INFO\022\020\n\010uiUserID\030"
      "\001 \001(\r\022\022\n\nstrOrderID\030\002 \001(\t\022\024\n\014lOrderIDFrM"
      "E\030\003 \001(\004\022\023\n\013uiExchObjID\030\004 \001(\r\"\353\001\n\022ST_QUER"
      "Y_ORDER_RES\022\020\n\010uiUserID\030\001 \001(\r\022\022\n\nstrOrde"
      "rID\030\002 \001(\t\022\023\n\013uiExchObjID\030\003 \001(\r\022\024\n\014wTrans"
      "Status\030\004 \001(\r\022\023\n\013ucTransType\030\005 \001(\r\022\021\n\tlOr"
      "gPrice\030\006 \001(\003\022\022\n\nlOrgNumber\030\007 \001(\003\022\031\n\021lAvg"
      "TransferPrice\030\010 \001(\003\022\027\n\017lAvgTransferNum\030\t"
      " \001(\003\022\024\n\014lOrderIDFrME\030\n \001(\004\"\255\001\n\021ST_MART_Q"
      "UOTATION\022\020\n\010uiUserID\030\001 \001(\r\022\023\n\013uiExchObjI"
      "D\030\002 \001(\r\022\025\n\rlCurDealProce\030\003 \001(\003\022\027\n\017lTotal"
      "DealProce\030\004 \001(\003\022\023\n\013lBeginProce\030\005 \001(\003\022\025\n\r"
      "lHighestProce\030\006 \001(\003\022\025\n\rlMinimumProce\030\007 \001"
      "(\003\"4\n\021ST_SIG_ORDER_INFO\022\016\n\006lPrice\030\001 \001(\004\022"
      "\017\n\007lNumber\030\002 \001(\004\"\330\001\n\023ST_MARKET_ORDERBOOK"
      "\022\020\n\010uiUserID\030\001 \001(\r\022\023\n\013uiExchObjID\030\002 \001(\r\022"
      "\025\n\ruiBidOrderNum\030\003 \001(\r\0225\n\nstBidOrder\030\004 \003"
      "(\0132!.MEProInterface.ST_SIG_ORDER_INFO\022\025\n"
      "\ruiAskOrderNum\030\005 \001(\r\0225\n\nstAskOrder\030\006 \003(\013"
      "2!.MEProInterface.ST_SIG_ORDER_INFO\"{\n\017S"
      "T_MAINTAIN_LOG\022\023\n\013strHostName\030\001 \001(\t\022\022\n\nc"
      "hLogLevel\030\002 \001(\r\022\025\n\rchModuleIndex\030\003 \001(\r\022\021"
      "\n\tuiRepTime\030\004 \001(\004\022\025\n\rstrLogContent\030\005 \001(\t"
      "\"\267\007\n\021IntervalMsgHeader\022\023\n\013iFlowNumber\030\001 "
      "\001(\005\022\014\n\004iCmd\030\002 \001(\005\022\020\n\010iMsgType\030\003 \001(\005\0229\n\013s"
      "tUserLogin\030\004 \001(\0132\".MEProInterface.ST_USE"
      "R_LOGIN_INFOH\000\0229\n\013stLoginResp\030\005 \001(\0132\".ME"
      "ProInterface.ST_USER_LOGIN_RESPH\000\0228\n\rstS"
      "ubmitOrder\030\006 \001(\0132\037.MEProInterface.ST_SUB"
      "MIT_ORDERH\000\022\?\n\rstCancelOrder\030\007 \001(\0132&.MEP"
      "roInterface.ST_SUBMIT_CAMCEL_ORDERH\000\022;\n\013"
      "stOrderResp\030\010 \001(\0132$.MEProInterface.ST_SU"
      "BMIT_ORDER_RESPH\000\022;\n\014stQueryOrder\030\t \001(\0132"
      "#.MEProInterface.ST_QUERY_ORDER_INFOH\000\0229"
      "\n\013stQueryResp\030\n \001(\0132\".MEProInterface.ST_"
      "QUERY_ORDER_RESH\000\022;\n\014stTransOrder\030\013 \001(\0132"
      "#.MEProInterface.ST_TRANS_ORDER_INFOH\000\0229"
      "\n\014stMarketData\030\014 \001(\0132!.MEProInterface.ST"
      "_MART_QUOTATIONH\000\022C\n\rstReptransReq\030\r \001(\013"
      "2*.MEProInterface.ST_REP_TRANS_ORDER_REQ"
      "UESTH\000\022\?\n\021stSubcriUserLogin\030\016 \001(\0132\".MEPr"
      "oInterface.ST_USER_LOGIN_INFOH\000\022B\n\023stQue"
      "ryHistoryOrder\030\017 \001(\0132#.MEProInterface.ST"
      "_QUERY_ORDER_INFOH\000\022@\n\021stMarketOrderBook"
      "\030\020 \001(\0132#.MEProInterface.ST_MARKET_ORDERB"
      "OOKH\000\0228\n\rstMaintainLog\030\021 \001(\0132\037.MEProInte"
      "rface.ST_MAINTAIN_LOGH\000B\t\n\007MsgBodyb\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3282);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "subscription.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_subscription_2eproto
namespace MEProInterface {

// ===================================================================

void ST_USER_LOGIN_INFO::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_USER_LOGIN_INFO::kChUserNameFieldNumber;
const int ST_USER_LOGIN_INFO::kChPasswordTxtFieldNumber;
const int ST_USER_LOGIN_INFO::kChAddressIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_USER_LOGIN_INFO::ST_USER_LOGIN_INFO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_subscription_2eproto::InitDefaultsST_USER_LOGIN_INFO();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MEProInterface.ST_USER_LOGIN_INFO)
}
ST_USER_LOGIN_INFO::ST_USER_LOGIN_INFO(const ST_USER_LOGIN_INFO& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chusername().size() > 0) {
    chusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chusername_);
  }
  chpasswordtxt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chpasswordtxt().size() > 0) {
    chpasswordtxt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chpasswordtxt_);
  }
  chaddressip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chaddressip().size() > 0) {
    chaddressip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chaddressip_);
  }
  // @@protoc_insertion_point(copy_constructor:MEProInterface.ST_USER_LOGIN_INFO)
}

void ST_USER_LOGIN_INFO::SharedCtor() {
  chusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chpasswordtxt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chaddressip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ST_USER_LOGIN_INFO::~ST_USER_LOGIN_INFO() {
  // @@protoc_insertion_point(destructor:MEProInterface.ST_USER_LOGIN_INFO)
  SharedDtor();
}

void ST_USER_LOGIN_INFO::SharedDtor() {
  chusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chpasswordtxt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chaddressip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ST_USER_LOGIN_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_USER_LOGIN_INFO::descriptor() {
  ::protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_USER_LOGIN_INFO& ST_USER_LOGIN_INFO::default_instance() {
  ::protobuf_subscription_2eproto::InitDefaultsST_USER_LOGIN_INFO();
  return *internal_default_instance();
}


void ST_USER_LOGIN_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:MEProInterface.ST_USER_LOGIN_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chpasswordtxt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chaddressip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ST_USER_LOGIN_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MEProInterface.ST_USER_LOGIN_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes chUserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chusername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes chPasswordTxt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chpasswordtxt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chAddressIp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chaddressip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chaddressip().data(), static_cast<int>(this->chaddressip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MEProInterface.ST_USER_LOGIN_INFO.chAddressIp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MEProInterface.ST_USER_LOGIN_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MEProInterface.ST_USER_LOGIN_INFO)
  return false;
#undef DO_
}

void ST_USER_LOGIN_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MEProInterface.ST_USER_LOGIN_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chUserName = 1;
  if (this->chusername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->chusername(), output);
  }

  // bytes chPasswordTxt = 2;
  if (this->chpasswordtxt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->chpasswordtxt(), output);
  }

  // string chAddressIp = 3;
  if (this->chaddressip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chaddressip().data(), static_cast<int>(this->chaddressip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEProInterface.ST_USER_LOGIN_INFO.chAddressIp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->chaddressip(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MEProInterface.ST_USER_LOGIN_INFO)
}

::google::protobuf::uint8* ST_USER_LOGIN_INFO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MEProInterface.ST_USER_LOGIN_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chUserName = 1;
  if (this->chusername().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->chusername(), target);
  }

  // bytes chPasswordTxt = 2;
  if (this->chpasswordtxt().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->chpasswordtxt(), target);
  }

  // string chAddressIp = 3;
  if (this->chaddressip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chaddressip().data(), static_cast<int>(this->chaddressip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEProInterface.ST_USER_LOGIN_INFO.chAddressIp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->chaddressip(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MEProInterface.ST_USER_LOGIN_INFO)
  return target;
}

size_t ST_USER_LOGIN_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MEProInterface.ST_USER_LOGIN_INFO)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes chUserName = 1;
  if (this->chusername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chusername());
  }

  // bytes chPasswordTxt = 2;
  if (this->chpasswordtxt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chpasswordtxt());
  }

  // string chAddressIp = 3;
  if (this->chaddressip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chaddressip());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_USER_LOGIN_INFO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MEProInterface.ST_USER_LOGIN_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_USER_LOGIN_INFO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_USER_LOGIN_INFO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MEProInterface.ST_USER_LOGIN_INFO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MEProInterface.ST_USER_LOGIN_INFO)
    MergeFrom(*source);
  }
}

void ST_USER_LOGIN_INFO::MergeFrom(const ST_USER_LOGIN_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MEProInterface.ST_USER_LOGIN_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chusername().size() > 0) {

    chusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chusername_);
  }
  if (from.chpasswordtxt().size() > 0) {

    chpasswordtxt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chpasswordtxt_);
  }
  if (from.chaddressip().size() > 0) {

    chaddressip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chaddressip_);
  }
}

void ST_USER_LOGIN_INFO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MEProInterface.ST_USER_LOGIN_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_USER_LOGIN_INFO::CopyFrom(const ST_USER_LOGIN_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MEProInterface.ST_USER_LOGIN_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_USER_LOGIN_INFO::IsInitialized() const {
  return true;
}

void ST_USER_LOGIN_INFO::Swap(ST_USER_LOGIN_INFO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_USER_LOGIN_INFO::InternalSwap(ST_USER_LOGIN_INFO* other) {
  using std::swap;
  chusername_.Swap(&other->chusername_);
  chpasswordtxt_.Swap(&other->chpasswordtxt_);
  chaddressip_.Swap(&other->chaddressip_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_USER_LOGIN_INFO::GetMetadata() const {
  protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ST_SIG_IP_INFO::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_SIG_IP_INFO::kWIpTypeFieldNumber;
const int ST_SIG_IP_INFO::kUcIpAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_SIG_IP_INFO::ST_SIG_IP_INFO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_subscription_2eproto::InitDefaultsST_SIG_IP_INFO();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MEProInterface.ST_SIG_IP_INFO)
}
ST_SIG_IP_INFO::ST_SIG_IP_INFO(const ST_SIG_IP_INFO& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ucipaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ucipaddress().size() > 0) {
    ucipaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ucipaddress_);
  }
  wiptype_ = from.wiptype_;
  // @@protoc_insertion_point(copy_constructor:MEProInterface.ST_SIG_IP_INFO)
}

void ST_SIG_IP_INFO::SharedCtor() {
  ucipaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wiptype_ = 0u;
  _cached_size_ = 0;
}

ST_SIG_IP_INFO::~ST_SIG_IP_INFO() {
  // @@protoc_insertion_point(destructor:MEProInterface.ST_SIG_IP_INFO)
  SharedDtor();
}

void ST_SIG_IP_INFO::SharedDtor() {
  ucipaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ST_SIG_IP_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_SIG_IP_INFO::descriptor() {
  ::protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_SIG_IP_INFO& ST_SIG_IP_INFO::default_instance() {
  ::protobuf_subscription_2eproto::InitDefaultsST_SIG_IP_INFO();
  return *internal_default_instance();
}


void ST_SIG_IP_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:MEProInterface.ST_SIG_IP_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ucipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wiptype_ = 0u;
  _internal_metadata_.Clear();
}

bool ST_SIG_IP_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MEProInterface.ST_SIG_IP_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 wIpType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wiptype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes ucIpAddress = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ucipaddress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MEProInterface.ST_SIG_IP_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MEProInterface.ST_SIG_IP_INFO)
  return false;
#undef DO_
}

void ST_SIG_IP_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MEProInterface.ST_SIG_IP_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 wIpType = 1;
  if (this->wiptype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wiptype(), output);
  }

  // bytes ucIpAddress = 2;
  if (this->ucipaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->ucipaddress(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MEProInterface.ST_SIG_IP_INFO)
}

::google::protobuf::uint8* ST_SIG_IP_INFO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MEProInterface.ST_SIG_IP_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 wIpType = 1;
  if (this->wiptype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wiptype(), target);
  }

  // bytes ucIpAddress = 2;
  if (this->ucipaddress().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ucipaddress(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MEProInterface.ST_SIG_IP_INFO)
  return target;
}

size_t ST_SIG_IP_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MEProInterface.ST_SIG_IP_INFO)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes ucIpAddress = 2;
  if (this->ucipaddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ucipaddress());
  }

  // uint32 wIpType = 1;
  if (this->wiptype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wiptype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_SIG_IP_INFO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MEProInterface.ST_SIG_IP_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_SIG_IP_INFO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_SIG_IP_INFO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MEProInterface.ST_SIG_IP_INFO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MEProInterface.ST_SIG_IP_INFO)
    MergeFrom(*source);
  }
}

void ST_SIG_IP_INFO::MergeFrom(const ST_SIG_IP_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MEProInterface.ST_SIG_IP_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ucipaddress().size() > 0) {

    ucipaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ucipaddress_);
  }
  if (from.wiptype() != 0) {
    set_wiptype(from.wiptype());
  }
}

void ST_SIG_IP_INFO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MEProInterface.ST_SIG_IP_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_SIG_IP_INFO::CopyFrom(const ST_SIG_IP_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MEProInterface.ST_SIG_IP_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_SIG_IP_INFO::IsInitialized() const {
  return true;
}

void ST_SIG_IP_INFO::Swap(ST_SIG_IP_INFO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_SIG_IP_INFO::InternalSwap(ST_SIG_IP_INFO* other) {
  using std::swap;
  ucipaddress_.Swap(&other->ucipaddress_);
  swap(wiptype_, other->wiptype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_SIG_IP_INFO::GetMetadata() const {
  protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ST_SYMBOL_INFO::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_SYMBOL_INFO::kUiSymbolIDFieldNumber;
const int ST_SYMBOL_INFO::kUiSymbolNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_SYMBOL_INFO::ST_SYMBOL_INFO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_subscription_2eproto::InitDefaultsST_SYMBOL_INFO();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MEProInterface.ST_SYMBOL_INFO)
}
ST_SYMBOL_INFO::ST_SYMBOL_INFO(const ST_SYMBOL_INFO& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uisymbolname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uisymbolname().size() > 0) {
    uisymbolname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uisymbolname_);
  }
  uisymbolid_ = from.uisymbolid_;
  // @@protoc_insertion_point(copy_constructor:MEProInterface.ST_SYMBOL_INFO)
}

void ST_SYMBOL_INFO::SharedCtor() {
  uisymbolname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uisymbolid_ = 0u;
  _cached_size_ = 0;
}

ST_SYMBOL_INFO::~ST_SYMBOL_INFO() {
  // @@protoc_insertion_point(destructor:MEProInterface.ST_SYMBOL_INFO)
  SharedDtor();
}

void ST_SYMBOL_INFO::SharedDtor() {
  uisymbolname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ST_SYMBOL_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_SYMBOL_INFO::descriptor() {
  ::protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_SYMBOL_INFO& ST_SYMBOL_INFO::default_instance() {
  ::protobuf_subscription_2eproto::InitDefaultsST_SYMBOL_INFO();
  return *internal_default_instance();
}


void ST_SYMBOL_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:MEProInterface.ST_SYMBOL_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uisymbolname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uisymbolid_ = 0u;
  _internal_metadata_.Clear();
}

bool ST_SYMBOL_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MEProInterface.ST_SYMBOL_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uiSymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uisymbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes uiSymbolName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uisymbolname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MEProInterface.ST_SYMBOL_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MEProInterface.ST_SYMBOL_INFO)
  return false;
#undef DO_
}

void ST_SYMBOL_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MEProInterface.ST_SYMBOL_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiSymbolID = 1;
  if (this->uisymbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uisymbolid(), output);
  }

  // bytes uiSymbolName = 2;
  if (this->uisymbolname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->uisymbolname(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MEProInterface.ST_SYMBOL_INFO)
}

::google::protobuf::uint8* ST_SYMBOL_INFO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MEProInterface.ST_SYMBOL_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiSymbolID = 1;
  if (this->uisymbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uisymbolid(), target);
  }

  // bytes uiSymbolName = 2;
  if (this->uisymbolname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uisymbolname(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MEProInterface.ST_SYMBOL_INFO)
  return target;
}

size_t ST_SYMBOL_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MEProInterface.ST_SYMBOL_INFO)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes uiSymbolName = 2;
  if (this->uisymbolname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uisymbolname());
  }

  // uint32 uiSymbolID = 1;
  if (this->uisymbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uisymbolid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_SYMBOL_INFO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MEProInterface.ST_SYMBOL_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_SYMBOL_INFO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_SYMBOL_INFO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MEProInterface.ST_SYMBOL_INFO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MEProInterface.ST_SYMBOL_INFO)
    MergeFrom(*source);
  }
}

void ST_SYMBOL_INFO::MergeFrom(const ST_SYMBOL_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MEProInterface.ST_SYMBOL_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uisymbolname().size() > 0) {

    uisymbolname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uisymbolname_);
  }
  if (from.uisymbolid() != 0) {
    set_uisymbolid(from.uisymbolid());
  }
}

void ST_SYMBOL_INFO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MEProInterface.ST_SYMBOL_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_SYMBOL_INFO::CopyFrom(const ST_SYMBOL_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MEProInterface.ST_SYMBOL_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_SYMBOL_INFO::IsInitialized() const {
  return true;
}

void ST_SYMBOL_INFO::Swap(ST_SYMBOL_INFO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_SYMBOL_INFO::InternalSwap(ST_SYMBOL_INFO* other) {
  using std::swap;
  uisymbolname_.Swap(&other->uisymbolname_);
  swap(uisymbolid_, other->uisymbolid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_SYMBOL_INFO::GetMetadata() const {
  protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ST_USER_LOGIN_RESP::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_USER_LOGIN_RESP::kUcLoginRspFieldNumber;
const int ST_USER_LOGIN_RESP::kUiUserIDFieldNumber;
const int ST_USER_LOGIN_RESP::kUiIPLisyNumFieldNumber;
const int ST_USER_LOGIN_RESP::kStIPInfoFieldNumber;
const int ST_USER_LOGIN_RESP::kUiSymbolNumFieldNumber;
const int ST_USER_LOGIN_RESP::kStSymbolInfoFieldNumber;
const int ST_USER_LOGIN_RESP::kChUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_USER_LOGIN_RESP::ST_USER_LOGIN_RESP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_subscription_2eproto::InitDefaultsST_USER_LOGIN_RESP();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MEProInterface.ST_USER_LOGIN_RESP)
}
ST_USER_LOGIN_RESP::ST_USER_LOGIN_RESP(const ST_USER_LOGIN_RESP& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stipinfo_(from.stipinfo_),
      stsymbolinfo_(from.stsymbolinfo_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chusername().size() > 0) {
    chusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chusername_);
  }
  ::memcpy(&ucloginrsp_, &from.ucloginrsp_,
    static_cast<size_t>(reinterpret_cast<char*>(&uisymbolnum_) -
    reinterpret_cast<char*>(&ucloginrsp_)) + sizeof(uisymbolnum_));
  // @@protoc_insertion_point(copy_constructor:MEProInterface.ST_USER_LOGIN_RESP)
}

void ST_USER_LOGIN_RESP::SharedCtor() {
  chusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ucloginrsp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uisymbolnum_) -
      reinterpret_cast<char*>(&ucloginrsp_)) + sizeof(uisymbolnum_));
  _cached_size_ = 0;
}

ST_USER_LOGIN_RESP::~ST_USER_LOGIN_RESP() {
  // @@protoc_insertion_point(destructor:MEProInterface.ST_USER_LOGIN_RESP)
  SharedDtor();
}

void ST_USER_LOGIN_RESP::SharedDtor() {
  chusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ST_USER_LOGIN_RESP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_USER_LOGIN_RESP::descriptor() {
  ::protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_USER_LOGIN_RESP& ST_USER_LOGIN_RESP::default_instance() {
  ::protobuf_subscription_2eproto::InitDefaultsST_USER_LOGIN_RESP();
  return *internal_default_instance();
}


void ST_USER_LOGIN_RESP::Clear() {
// @@protoc_insertion_point(message_clear_start:MEProInterface.ST_USER_LOGIN_RESP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stipinfo_.Clear();
  stsymbolinfo_.Clear();
  chusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ucloginrsp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uisymbolnum_) -
      reinterpret_cast<char*>(&ucloginrsp_)) + sizeof(uisymbolnum_));
  _internal_metadata_.Clear();
}

bool ST_USER_LOGIN_RESP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MEProInterface.ST_USER_LOGIN_RESP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 ucLoginRsp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ucloginrsp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiUserID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiIPLisyNum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiiplisynum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MEProInterface.ST_SIG_IP_INFO stIPInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stipinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiSymbolNum = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uisymbolnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MEProInterface.ST_SYMBOL_INFO stSymbolInfo = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stsymbolinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes chUserName = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chusername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MEProInterface.ST_USER_LOGIN_RESP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MEProInterface.ST_USER_LOGIN_RESP)
  return false;
#undef DO_
}

void ST_USER_LOGIN_RESP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MEProInterface.ST_USER_LOGIN_RESP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ucLoginRsp = 1;
  if (this->ucloginrsp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ucloginrsp(), output);
  }

  // uint32 uiUserID = 2;
  if (this->uiuserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiuserid(), output);
  }

  // uint32 uiIPLisyNum = 3;
  if (this->uiiplisynum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uiiplisynum(), output);
  }

  // repeated .MEProInterface.ST_SIG_IP_INFO stIPInfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stipinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->stipinfo(static_cast<int>(i)),
      output);
  }

  // uint32 uiSymbolNum = 5;
  if (this->uisymbolnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uisymbolnum(), output);
  }

  // repeated .MEProInterface.ST_SYMBOL_INFO stSymbolInfo = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stsymbolinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->stsymbolinfo(static_cast<int>(i)),
      output);
  }

  // bytes chUserName = 7;
  if (this->chusername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->chusername(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MEProInterface.ST_USER_LOGIN_RESP)
}

::google::protobuf::uint8* ST_USER_LOGIN_RESP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MEProInterface.ST_USER_LOGIN_RESP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ucLoginRsp = 1;
  if (this->ucloginrsp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ucloginrsp(), target);
  }

  // uint32 uiUserID = 2;
  if (this->uiuserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiuserid(), target);
  }

  // uint32 uiIPLisyNum = 3;
  if (this->uiiplisynum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uiiplisynum(), target);
  }

  // repeated .MEProInterface.ST_SIG_IP_INFO stIPInfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stipinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->stipinfo(static_cast<int>(i)), deterministic, target);
  }

  // uint32 uiSymbolNum = 5;
  if (this->uisymbolnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uisymbolnum(), target);
  }

  // repeated .MEProInterface.ST_SYMBOL_INFO stSymbolInfo = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stsymbolinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->stsymbolinfo(static_cast<int>(i)), deterministic, target);
  }

  // bytes chUserName = 7;
  if (this->chusername().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->chusername(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MEProInterface.ST_USER_LOGIN_RESP)
  return target;
}

size_t ST_USER_LOGIN_RESP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MEProInterface.ST_USER_LOGIN_RESP)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .MEProInterface.ST_SIG_IP_INFO stIPInfo = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->stipinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stipinfo(static_cast<int>(i)));
    }
  }

  // repeated .MEProInterface.ST_SYMBOL_INFO stSymbolInfo = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->stsymbolinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stsymbolinfo(static_cast<int>(i)));
    }
  }

  // bytes chUserName = 7;
  if (this->chusername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chusername());
  }

  // uint32 ucLoginRsp = 1;
  if (this->ucloginrsp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ucloginrsp());
  }

  // uint32 uiUserID = 2;
  if (this->uiuserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiuserid());
  }

  // uint32 uiIPLisyNum = 3;
  if (this->uiiplisynum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiiplisynum());
  }

  // uint32 uiSymbolNum = 5;
  if (this->uisymbolnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uisymbolnum());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_USER_LOGIN_RESP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MEProInterface.ST_USER_LOGIN_RESP)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_USER_LOGIN_RESP* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_USER_LOGIN_RESP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MEProInterface.ST_USER_LOGIN_RESP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MEProInterface.ST_USER_LOGIN_RESP)
    MergeFrom(*source);
  }
}

void ST_USER_LOGIN_RESP::MergeFrom(const ST_USER_LOGIN_RESP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MEProInterface.ST_USER_LOGIN_RESP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stipinfo_.MergeFrom(from.stipinfo_);
  stsymbolinfo_.MergeFrom(from.stsymbolinfo_);
  if (from.chusername().size() > 0) {

    chusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chusername_);
  }
  if (from.ucloginrsp() != 0) {
    set_ucloginrsp(from.ucloginrsp());
  }
  if (from.uiuserid() != 0) {
    set_uiuserid(from.uiuserid());
  }
  if (from.uiiplisynum() != 0) {
    set_uiiplisynum(from.uiiplisynum());
  }
  if (from.uisymbolnum() != 0) {
    set_uisymbolnum(from.uisymbolnum());
  }
}

void ST_USER_LOGIN_RESP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MEProInterface.ST_USER_LOGIN_RESP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_USER_LOGIN_RESP::CopyFrom(const ST_USER_LOGIN_RESP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MEProInterface.ST_USER_LOGIN_RESP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_USER_LOGIN_RESP::IsInitialized() const {
  return true;
}

void ST_USER_LOGIN_RESP::Swap(ST_USER_LOGIN_RESP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_USER_LOGIN_RESP::InternalSwap(ST_USER_LOGIN_RESP* other) {
  using std::swap;
  CastToBase(&stipinfo_)->InternalSwap(CastToBase(&other->stipinfo_));
  CastToBase(&stsymbolinfo_)->InternalSwap(CastToBase(&other->stsymbolinfo_));
  chusername_.Swap(&other->chusername_);
  swap(ucloginrsp_, other->ucloginrsp_);
  swap(uiuserid_, other->uiuserid_);
  swap(uiiplisynum_, other->uiiplisynum_);
  swap(uisymbolnum_, other->uisymbolnum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_USER_LOGIN_RESP::GetMetadata() const {
  protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ST_SUBMIT_ORDER::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_SUBMIT_ORDER::kStrOrderIDFieldNumber;
const int ST_SUBMIT_ORDER::kLSubmitTimeFieldNumber;
const int ST_SUBMIT_ORDER::kUcTransTypeFieldNumber;
const int ST_SUBMIT_ORDER::kUcOrderTypeFieldNumber;
const int ST_SUBMIT_ORDER::kUiUserIDFieldNumber;
const int ST_SUBMIT_ORDER::kUiExchObjIDFieldNumber;
const int ST_SUBMIT_ORDER::kLPriceFieldNumber;
const int ST_SUBMIT_ORDER::kLNumberFieldNumber;
const int ST_SUBMIT_ORDER::kUiOrderIndexFieldNumber;
const int ST_SUBMIT_ORDER::kUcRecordIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_SUBMIT_ORDER::ST_SUBMIT_ORDER()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_subscription_2eproto::InitDefaultsST_SUBMIT_ORDER();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MEProInterface.ST_SUBMIT_ORDER)
}
ST_SUBMIT_ORDER::ST_SUBMIT_ORDER(const ST_SUBMIT_ORDER& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strorderid().size() > 0) {
    strorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strorderid_);
  }
  ::memcpy(&lsubmittime_, &from.lsubmittime_,
    static_cast<size_t>(reinterpret_cast<char*>(&uiorderindex_) -
    reinterpret_cast<char*>(&lsubmittime_)) + sizeof(uiorderindex_));
  // @@protoc_insertion_point(copy_constructor:MEProInterface.ST_SUBMIT_ORDER)
}

void ST_SUBMIT_ORDER::SharedCtor() {
  strorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lsubmittime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uiorderindex_) -
      reinterpret_cast<char*>(&lsubmittime_)) + sizeof(uiorderindex_));
  _cached_size_ = 0;
}

ST_SUBMIT_ORDER::~ST_SUBMIT_ORDER() {
  // @@protoc_insertion_point(destructor:MEProInterface.ST_SUBMIT_ORDER)
  SharedDtor();
}

void ST_SUBMIT_ORDER::SharedDtor() {
  strorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ST_SUBMIT_ORDER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_SUBMIT_ORDER::descriptor() {
  ::protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_SUBMIT_ORDER& ST_SUBMIT_ORDER::default_instance() {
  ::protobuf_subscription_2eproto::InitDefaultsST_SUBMIT_ORDER();
  return *internal_default_instance();
}


void ST_SUBMIT_ORDER::Clear() {
// @@protoc_insertion_point(message_clear_start:MEProInterface.ST_SUBMIT_ORDER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lsubmittime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uiorderindex_) -
      reinterpret_cast<char*>(&lsubmittime_)) + sizeof(uiorderindex_));
  _internal_metadata_.Clear();
}

bool ST_SUBMIT_ORDER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MEProInterface.ST_SUBMIT_ORDER)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strOrderID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strorderid().data(), static_cast<int>(this->strorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MEProInterface.ST_SUBMIT_ORDER.strOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lSubmitTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lsubmittime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ucTransType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uctranstype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ucOrderType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ucordertype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiUserID = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiExchObjID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiexchobjid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lPrice = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lNumber = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiOrderIndex = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiorderindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ucRecordID = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ucrecordid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MEProInterface.ST_SUBMIT_ORDER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MEProInterface.ST_SUBMIT_ORDER)
  return false;
#undef DO_
}

void ST_SUBMIT_ORDER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MEProInterface.ST_SUBMIT_ORDER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string strOrderID = 1;
  if (this->strorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strorderid().data(), static_cast<int>(this->strorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEProInterface.ST_SUBMIT_ORDER.strOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strorderid(), output);
  }

  // uint64 lSubmitTime = 2;
  if (this->lsubmittime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lsubmittime(), output);
  }

  // uint32 ucTransType = 3;
  if (this->uctranstype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uctranstype(), output);
  }

  // uint32 ucOrderType = 4;
  if (this->ucordertype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ucordertype(), output);
  }

  // uint32 uiUserID = 5;
  if (this->uiuserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uiuserid(), output);
  }

  // uint32 uiExchObjID = 6;
  if (this->uiexchobjid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uiexchobjid(), output);
  }

  // int64 lPrice = 7;
  if (this->lprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->lprice(), output);
  }

  // int64 lNumber = 8;
  if (this->lnumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->lnumber(), output);
  }

  // uint32 uiOrderIndex = 9;
  if (this->uiorderindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->uiorderindex(), output);
  }

  // uint64 ucRecordID = 10;
  if (this->ucrecordid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->ucrecordid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MEProInterface.ST_SUBMIT_ORDER)
}

::google::protobuf::uint8* ST_SUBMIT_ORDER::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MEProInterface.ST_SUBMIT_ORDER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string strOrderID = 1;
  if (this->strorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strorderid().data(), static_cast<int>(this->strorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEProInterface.ST_SUBMIT_ORDER.strOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strorderid(), target);
  }

  // uint64 lSubmitTime = 2;
  if (this->lsubmittime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lsubmittime(), target);
  }

  // uint32 ucTransType = 3;
  if (this->uctranstype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uctranstype(), target);
  }

  // uint32 ucOrderType = 4;
  if (this->ucordertype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ucordertype(), target);
  }

  // uint32 uiUserID = 5;
  if (this->uiuserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uiuserid(), target);
  }

  // uint32 uiExchObjID = 6;
  if (this->uiexchobjid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uiexchobjid(), target);
  }

  // int64 lPrice = 7;
  if (this->lprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->lprice(), target);
  }

  // int64 lNumber = 8;
  if (this->lnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->lnumber(), target);
  }

  // uint32 uiOrderIndex = 9;
  if (this->uiorderindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->uiorderindex(), target);
  }

  // uint64 ucRecordID = 10;
  if (this->ucrecordid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->ucrecordid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MEProInterface.ST_SUBMIT_ORDER)
  return target;
}

size_t ST_SUBMIT_ORDER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MEProInterface.ST_SUBMIT_ORDER)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string strOrderID = 1;
  if (this->strorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strorderid());
  }

  // uint64 lSubmitTime = 2;
  if (this->lsubmittime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lsubmittime());
  }

  // uint32 ucTransType = 3;
  if (this->uctranstype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uctranstype());
  }

  // uint32 ucOrderType = 4;
  if (this->ucordertype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ucordertype());
  }

  // uint32 uiUserID = 5;
  if (this->uiuserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiuserid());
  }

  // uint32 uiExchObjID = 6;
  if (this->uiexchobjid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiexchobjid());
  }

  // int64 lPrice = 7;
  if (this->lprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lprice());
  }

  // int64 lNumber = 8;
  if (this->lnumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lnumber());
  }

  // uint64 ucRecordID = 10;
  if (this->ucrecordid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ucrecordid());
  }

  // uint32 uiOrderIndex = 9;
  if (this->uiorderindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiorderindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_SUBMIT_ORDER::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MEProInterface.ST_SUBMIT_ORDER)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_SUBMIT_ORDER* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_SUBMIT_ORDER>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MEProInterface.ST_SUBMIT_ORDER)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MEProInterface.ST_SUBMIT_ORDER)
    MergeFrom(*source);
  }
}

void ST_SUBMIT_ORDER::MergeFrom(const ST_SUBMIT_ORDER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MEProInterface.ST_SUBMIT_ORDER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strorderid().size() > 0) {

    strorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strorderid_);
  }
  if (from.lsubmittime() != 0) {
    set_lsubmittime(from.lsubmittime());
  }
  if (from.uctranstype() != 0) {
    set_uctranstype(from.uctranstype());
  }
  if (from.ucordertype() != 0) {
    set_ucordertype(from.ucordertype());
  }
  if (from.uiuserid() != 0) {
    set_uiuserid(from.uiuserid());
  }
  if (from.uiexchobjid() != 0) {
    set_uiexchobjid(from.uiexchobjid());
  }
  if (from.lprice() != 0) {
    set_lprice(from.lprice());
  }
  if (from.lnumber() != 0) {
    set_lnumber(from.lnumber());
  }
  if (from.ucrecordid() != 0) {
    set_ucrecordid(from.ucrecordid());
  }
  if (from.uiorderindex() != 0) {
    set_uiorderindex(from.uiorderindex());
  }
}

void ST_SUBMIT_ORDER::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MEProInterface.ST_SUBMIT_ORDER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_SUBMIT_ORDER::CopyFrom(const ST_SUBMIT_ORDER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MEProInterface.ST_SUBMIT_ORDER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_SUBMIT_ORDER::IsInitialized() const {
  return true;
}

void ST_SUBMIT_ORDER::Swap(ST_SUBMIT_ORDER* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_SUBMIT_ORDER::InternalSwap(ST_SUBMIT_ORDER* other) {
  using std::swap;
  strorderid_.Swap(&other->strorderid_);
  swap(lsubmittime_, other->lsubmittime_);
  swap(uctranstype_, other->uctranstype_);
  swap(ucordertype_, other->ucordertype_);
  swap(uiuserid_, other->uiuserid_);
  swap(uiexchobjid_, other->uiexchobjid_);
  swap(lprice_, other->lprice_);
  swap(lnumber_, other->lnumber_);
  swap(ucrecordid_, other->ucrecordid_);
  swap(uiorderindex_, other->uiorderindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_SUBMIT_ORDER::GetMetadata() const {
  protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ST_SUBMIT_CAMCEL_ORDER::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_SUBMIT_CAMCEL_ORDER::kStrOrderIDFieldNumber;
const int ST_SUBMIT_CAMCEL_ORDER::kLOrderIDFrMEFieldNumber;
const int ST_SUBMIT_CAMCEL_ORDER::kUiOrderIndexFieldNumber;
const int ST_SUBMIT_CAMCEL_ORDER::kUiUserIDFieldNumber;
const int ST_SUBMIT_CAMCEL_ORDER::kUiExchObjIDFieldNumber;
const int ST_SUBMIT_CAMCEL_ORDER::kUcTransTypeFieldNumber;
const int ST_SUBMIT_CAMCEL_ORDER::kLPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_SUBMIT_CAMCEL_ORDER::ST_SUBMIT_CAMCEL_ORDER()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_subscription_2eproto::InitDefaultsST_SUBMIT_CAMCEL_ORDER();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MEProInterface.ST_SUBMIT_CAMCEL_ORDER)
}
ST_SUBMIT_CAMCEL_ORDER::ST_SUBMIT_CAMCEL_ORDER(const ST_SUBMIT_CAMCEL_ORDER& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strorderid().size() > 0) {
    strorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strorderid_);
  }
  ::memcpy(&lorderidfrme_, &from.lorderidfrme_,
    static_cast<size_t>(reinterpret_cast<char*>(&lprice_) -
    reinterpret_cast<char*>(&lorderidfrme_)) + sizeof(lprice_));
  // @@protoc_insertion_point(copy_constructor:MEProInterface.ST_SUBMIT_CAMCEL_ORDER)
}

void ST_SUBMIT_CAMCEL_ORDER::SharedCtor() {
  strorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lorderidfrme_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lprice_) -
      reinterpret_cast<char*>(&lorderidfrme_)) + sizeof(lprice_));
  _cached_size_ = 0;
}

ST_SUBMIT_CAMCEL_ORDER::~ST_SUBMIT_CAMCEL_ORDER() {
  // @@protoc_insertion_point(destructor:MEProInterface.ST_SUBMIT_CAMCEL_ORDER)
  SharedDtor();
}

void ST_SUBMIT_CAMCEL_ORDER::SharedDtor() {
  strorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ST_SUBMIT_CAMCEL_ORDER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_SUBMIT_CAMCEL_ORDER::descriptor() {
  ::protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_SUBMIT_CAMCEL_ORDER& ST_SUBMIT_CAMCEL_ORDER::default_instance() {
  ::protobuf_subscription_2eproto::InitDefaultsST_SUBMIT_CAMCEL_ORDER();
  return *internal_default_instance();
}


void ST_SUBMIT_CAMCEL_ORDER::Clear() {
// @@protoc_insertion_point(message_clear_start:MEProInterface.ST_SUBMIT_CAMCEL_ORDER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lorderidfrme_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lprice_) -
      reinterpret_cast<char*>(&lorderidfrme_)) + sizeof(lprice_));
  _internal_metadata_.Clear();
}

bool ST_SUBMIT_CAMCEL_ORDER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MEProInterface.ST_SUBMIT_CAMCEL_ORDER)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strOrderID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strorderid().data(), static_cast<int>(this->strorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MEProInterface.ST_SUBMIT_CAMCEL_ORDER.strOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lOrderIDFrME = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lorderidfrme_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiOrderIndex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiorderindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiUserID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiExchObjID = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiexchobjid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ucTransType = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uctranstype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lPrice = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MEProInterface.ST_SUBMIT_CAMCEL_ORDER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MEProInterface.ST_SUBMIT_CAMCEL_ORDER)
  return false;
#undef DO_
}

void ST_SUBMIT_CAMCEL_ORDER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MEProInterface.ST_SUBMIT_CAMCEL_ORDER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string strOrderID = 1;
  if (this->strorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strorderid().data(), static_cast<int>(this->strorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEProInterface.ST_SUBMIT_CAMCEL_ORDER.strOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strorderid(), output);
  }

  // uint64 lOrderIDFrME = 2;
  if (this->lorderidfrme() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lorderidfrme(), output);
  }

  // uint32 uiOrderIndex = 3;
  if (this->uiorderindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uiorderindex(), output);
  }

  // uint32 uiUserID = 4;
  if (this->uiuserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uiuserid(), output);
  }

  // uint32 uiExchObjID = 5;
  if (this->uiexchobjid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uiexchobjid(), output);
  }

  // uint32 ucTransType = 6;
  if (this->uctranstype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uctranstype(), output);
  }

  // int64 lPrice = 7;
  if (this->lprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->lprice(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MEProInterface.ST_SUBMIT_CAMCEL_ORDER)
}

::google::protobuf::uint8* ST_SUBMIT_CAMCEL_ORDER::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MEProInterface.ST_SUBMIT_CAMCEL_ORDER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string strOrderID = 1;
  if (this->strorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strorderid().data(), static_cast<int>(this->strorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEProInterface.ST_SUBMIT_CAMCEL_ORDER.strOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strorderid(), target);
  }

  // uint64 lOrderIDFrME = 2;
  if (this->lorderidfrme() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lorderidfrme(), target);
  }

  // uint32 uiOrderIndex = 3;
  if (this->uiorderindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uiorderindex(), target);
  }

  // uint32 uiUserID = 4;
  if (this->uiuserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uiuserid(), target);
  }

  // uint32 uiExchObjID = 5;
  if (this->uiexchobjid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uiexchobjid(), target);
  }

  // uint32 ucTransType = 6;
  if (this->uctranstype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uctranstype(), target);
  }

  // int64 lPrice = 7;
  if (this->lprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->lprice(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MEProInterface.ST_SUBMIT_CAMCEL_ORDER)
  return target;
}

size_t ST_SUBMIT_CAMCEL_ORDER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MEProInterface.ST_SUBMIT_CAMCEL_ORDER)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string strOrderID = 1;
  if (this->strorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strorderid());
  }

  // uint64 lOrderIDFrME = 2;
  if (this->lorderidfrme() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lorderidfrme());
  }

  // uint32 uiOrderIndex = 3;
  if (this->uiorderindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiorderindex());
  }

  // uint32 uiUserID = 4;
  if (this->uiuserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiuserid());
  }

  // uint32 uiExchObjID = 5;
  if (this->uiexchobjid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiexchobjid());
  }

  // uint32 ucTransType = 6;
  if (this->uctranstype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uctranstype());
  }

  // int64 lPrice = 7;
  if (this->lprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lprice());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_SUBMIT_CAMCEL_ORDER::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MEProInterface.ST_SUBMIT_CAMCEL_ORDER)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_SUBMIT_CAMCEL_ORDER* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_SUBMIT_CAMCEL_ORDER>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MEProInterface.ST_SUBMIT_CAMCEL_ORDER)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MEProInterface.ST_SUBMIT_CAMCEL_ORDER)
    MergeFrom(*source);
  }
}

void ST_SUBMIT_CAMCEL_ORDER::MergeFrom(const ST_SUBMIT_CAMCEL_ORDER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MEProInterface.ST_SUBMIT_CAMCEL_ORDER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strorderid().size() > 0) {

    strorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strorderid_);
  }
  if (from.lorderidfrme() != 0) {
    set_lorderidfrme(from.lorderidfrme());
  }
  if (from.uiorderindex() != 0) {
    set_uiorderindex(from.uiorderindex());
  }
  if (from.uiuserid() != 0) {
    set_uiuserid(from.uiuserid());
  }
  if (from.uiexchobjid() != 0) {
    set_uiexchobjid(from.uiexchobjid());
  }
  if (from.uctranstype() != 0) {
    set_uctranstype(from.uctranstype());
  }
  if (from.lprice() != 0) {
    set_lprice(from.lprice());
  }
}

void ST_SUBMIT_CAMCEL_ORDER::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MEProInterface.ST_SUBMIT_CAMCEL_ORDER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_SUBMIT_CAMCEL_ORDER::CopyFrom(const ST_SUBMIT_CAMCEL_ORDER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MEProInterface.ST_SUBMIT_CAMCEL_ORDER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_SUBMIT_CAMCEL_ORDER::IsInitialized() const {
  return true;
}

void ST_SUBMIT_CAMCEL_ORDER::Swap(ST_SUBMIT_CAMCEL_ORDER* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_SUBMIT_CAMCEL_ORDER::InternalSwap(ST_SUBMIT_CAMCEL_ORDER* other) {
  using std::swap;
  strorderid_.Swap(&other->strorderid_);
  swap(lorderidfrme_, other->lorderidfrme_);
  swap(uiorderindex_, other->uiorderindex_);
  swap(uiuserid_, other->uiuserid_);
  swap(uiexchobjid_, other->uiexchobjid_);
  swap(uctranstype_, other->uctranstype_);
  swap(lprice_, other->lprice_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_SUBMIT_CAMCEL_ORDER::GetMetadata() const {
  protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ST_SUBMIT_ORDER_RESP::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_SUBMIT_ORDER_RESP::kStrOrderIDFieldNumber;
const int ST_SUBMIT_ORDER_RESP::kUiSubmitOrderIypeFieldNumber;
const int ST_SUBMIT_ORDER_RESP::kLOrderIDFrMEFieldNumber;
const int ST_SUBMIT_ORDER_RESP::kUiOrderIndexFieldNumber;
const int ST_SUBMIT_ORDER_RESP::kUiOrderStatusFieldNumber;
const int ST_SUBMIT_ORDER_RESP::kStrTextFieldNumber;
const int ST_SUBMIT_ORDER_RESP::kUiUserIDFieldNumber;
const int ST_SUBMIT_ORDER_RESP::kUcTransTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_SUBMIT_ORDER_RESP::ST_SUBMIT_ORDER_RESP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_subscription_2eproto::InitDefaultsST_SUBMIT_ORDER_RESP();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MEProInterface.ST_SUBMIT_ORDER_RESP)
}
ST_SUBMIT_ORDER_RESP::ST_SUBMIT_ORDER_RESP(const ST_SUBMIT_ORDER_RESP& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strorderid().size() > 0) {
    strorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strorderid_);
  }
  strtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strtext().size() > 0) {
    strtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strtext_);
  }
  ::memcpy(&lorderidfrme_, &from.lorderidfrme_,
    static_cast<size_t>(reinterpret_cast<char*>(&uctranstype_) -
    reinterpret_cast<char*>(&lorderidfrme_)) + sizeof(uctranstype_));
  // @@protoc_insertion_point(copy_constructor:MEProInterface.ST_SUBMIT_ORDER_RESP)
}

void ST_SUBMIT_ORDER_RESP::SharedCtor() {
  strorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lorderidfrme_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uctranstype_) -
      reinterpret_cast<char*>(&lorderidfrme_)) + sizeof(uctranstype_));
  _cached_size_ = 0;
}

ST_SUBMIT_ORDER_RESP::~ST_SUBMIT_ORDER_RESP() {
  // @@protoc_insertion_point(destructor:MEProInterface.ST_SUBMIT_ORDER_RESP)
  SharedDtor();
}

void ST_SUBMIT_ORDER_RESP::SharedDtor() {
  strorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strtext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ST_SUBMIT_ORDER_RESP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_SUBMIT_ORDER_RESP::descriptor() {
  ::protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_SUBMIT_ORDER_RESP& ST_SUBMIT_ORDER_RESP::default_instance() {
  ::protobuf_subscription_2eproto::InitDefaultsST_SUBMIT_ORDER_RESP();
  return *internal_default_instance();
}


void ST_SUBMIT_ORDER_RESP::Clear() {
// @@protoc_insertion_point(message_clear_start:MEProInterface.ST_SUBMIT_ORDER_RESP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strtext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lorderidfrme_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uctranstype_) -
      reinterpret_cast<char*>(&lorderidfrme_)) + sizeof(uctranstype_));
  _internal_metadata_.Clear();
}

bool ST_SUBMIT_ORDER_RESP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MEProInterface.ST_SUBMIT_ORDER_RESP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strOrderID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strorderid().data(), static_cast<int>(this->strorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MEProInterface.ST_SUBMIT_ORDER_RESP.strOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiSubmitOrderIype = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uisubmitorderiype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lOrderIDFrME = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lorderidfrme_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiOrderIndex = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiorderindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiOrderStatus = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiorderstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strText = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strtext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strtext().data(), static_cast<int>(this->strtext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MEProInterface.ST_SUBMIT_ORDER_RESP.strText"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiUserID = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ucTransType = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uctranstype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MEProInterface.ST_SUBMIT_ORDER_RESP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MEProInterface.ST_SUBMIT_ORDER_RESP)
  return false;
#undef DO_
}

void ST_SUBMIT_ORDER_RESP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MEProInterface.ST_SUBMIT_ORDER_RESP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string strOrderID = 1;
  if (this->strorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strorderid().data(), static_cast<int>(this->strorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEProInterface.ST_SUBMIT_ORDER_RESP.strOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strorderid(), output);
  }

  // uint32 uiSubmitOrderIype = 2;
  if (this->uisubmitorderiype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uisubmitorderiype(), output);
  }

  // uint64 lOrderIDFrME = 3;
  if (this->lorderidfrme() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lorderidfrme(), output);
  }

  // uint32 uiOrderIndex = 4;
  if (this->uiorderindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uiorderindex(), output);
  }

  // uint32 uiOrderStatus = 5;
  if (this->uiorderstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uiorderstatus(), output);
  }

  // string strText = 6;
  if (this->strtext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strtext().data(), static_cast<int>(this->strtext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEProInterface.ST_SUBMIT_ORDER_RESP.strText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->strtext(), output);
  }

  // uint32 uiUserID = 7;
  if (this->uiuserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->uiuserid(), output);
  }

  // uint32 ucTransType = 8;
  if (this->uctranstype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->uctranstype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MEProInterface.ST_SUBMIT_ORDER_RESP)
}

::google::protobuf::uint8* ST_SUBMIT_ORDER_RESP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MEProInterface.ST_SUBMIT_ORDER_RESP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string strOrderID = 1;
  if (this->strorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strorderid().data(), static_cast<int>(this->strorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEProInterface.ST_SUBMIT_ORDER_RESP.strOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strorderid(), target);
  }

  // uint32 uiSubmitOrderIype = 2;
  if (this->uisubmitorderiype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uisubmitorderiype(), target);
  }

  // uint64 lOrderIDFrME = 3;
  if (this->lorderidfrme() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lorderidfrme(), target);
  }

  // uint32 uiOrderIndex = 4;
  if (this->uiorderindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uiorderindex(), target);
  }

  // uint32 uiOrderStatus = 5;
  if (this->uiorderstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uiorderstatus(), target);
  }

  // string strText = 6;
  if (this->strtext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strtext().data(), static_cast<int>(this->strtext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEProInterface.ST_SUBMIT_ORDER_RESP.strText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->strtext(), target);
  }

  // uint32 uiUserID = 7;
  if (this->uiuserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->uiuserid(), target);
  }

  // uint32 ucTransType = 8;
  if (this->uctranstype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->uctranstype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MEProInterface.ST_SUBMIT_ORDER_RESP)
  return target;
}

size_t ST_SUBMIT_ORDER_RESP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MEProInterface.ST_SUBMIT_ORDER_RESP)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string strOrderID = 1;
  if (this->strorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strorderid());
  }

  // string strText = 6;
  if (this->strtext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strtext());
  }

  // uint64 lOrderIDFrME = 3;
  if (this->lorderidfrme() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lorderidfrme());
  }

  // uint32 uiSubmitOrderIype = 2;
  if (this->uisubmitorderiype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uisubmitorderiype());
  }

  // uint32 uiOrderIndex = 4;
  if (this->uiorderindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiorderindex());
  }

  // uint32 uiOrderStatus = 5;
  if (this->uiorderstatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiorderstatus());
  }

  // uint32 uiUserID = 7;
  if (this->uiuserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiuserid());
  }

  // uint32 ucTransType = 8;
  if (this->uctranstype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uctranstype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_SUBMIT_ORDER_RESP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MEProInterface.ST_SUBMIT_ORDER_RESP)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_SUBMIT_ORDER_RESP* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_SUBMIT_ORDER_RESP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MEProInterface.ST_SUBMIT_ORDER_RESP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MEProInterface.ST_SUBMIT_ORDER_RESP)
    MergeFrom(*source);
  }
}

void ST_SUBMIT_ORDER_RESP::MergeFrom(const ST_SUBMIT_ORDER_RESP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MEProInterface.ST_SUBMIT_ORDER_RESP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strorderid().size() > 0) {

    strorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strorderid_);
  }
  if (from.strtext().size() > 0) {

    strtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strtext_);
  }
  if (from.lorderidfrme() != 0) {
    set_lorderidfrme(from.lorderidfrme());
  }
  if (from.uisubmitorderiype() != 0) {
    set_uisubmitorderiype(from.uisubmitorderiype());
  }
  if (from.uiorderindex() != 0) {
    set_uiorderindex(from.uiorderindex());
  }
  if (from.uiorderstatus() != 0) {
    set_uiorderstatus(from.uiorderstatus());
  }
  if (from.uiuserid() != 0) {
    set_uiuserid(from.uiuserid());
  }
  if (from.uctranstype() != 0) {
    set_uctranstype(from.uctranstype());
  }
}

void ST_SUBMIT_ORDER_RESP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MEProInterface.ST_SUBMIT_ORDER_RESP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_SUBMIT_ORDER_RESP::CopyFrom(const ST_SUBMIT_ORDER_RESP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MEProInterface.ST_SUBMIT_ORDER_RESP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_SUBMIT_ORDER_RESP::IsInitialized() const {
  return true;
}

void ST_SUBMIT_ORDER_RESP::Swap(ST_SUBMIT_ORDER_RESP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_SUBMIT_ORDER_RESP::InternalSwap(ST_SUBMIT_ORDER_RESP* other) {
  using std::swap;
  strorderid_.Swap(&other->strorderid_);
  strtext_.Swap(&other->strtext_);
  swap(lorderidfrme_, other->lorderidfrme_);
  swap(uisubmitorderiype_, other->uisubmitorderiype_);
  swap(uiorderindex_, other->uiorderindex_);
  swap(uiorderstatus_, other->uiorderstatus_);
  swap(uiuserid_, other->uiuserid_);
  swap(uctranstype_, other->uctranstype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_SUBMIT_ORDER_RESP::GetMetadata() const {
  protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ST_TRANS_ORDER_INFO::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_TRANS_ORDER_INFO::kStrBidOrderIDFieldNumber;
const int ST_TRANS_ORDER_INFO::kStrAskOrderIDFieldNumber;
const int ST_TRANS_ORDER_INFO::kUiBidUserIDFieldNumber;
const int ST_TRANS_ORDER_INFO::kUiAskUserIDFieldNumber;
const int ST_TRANS_ORDER_INFO::kFPriceFieldNumber;
const int ST_TRANS_ORDER_INFO::kFNumberFieldNumber;
const int ST_TRANS_ORDER_INFO::kUcExchTypeFieldNumber;
const int ST_TRANS_ORDER_INFO::kUcRecordIDFieldNumber;
const int ST_TRANS_ORDER_INFO::kUcOrderStatusFieldNumber;
const int ST_TRANS_ORDER_INFO::kUiExchObjIDFieldNumber;
const int ST_TRANS_ORDER_INFO::kMeBidOrderIDFieldNumber;
const int ST_TRANS_ORDER_INFO::kMeAskOrderIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_TRANS_ORDER_INFO::ST_TRANS_ORDER_INFO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_subscription_2eproto::InitDefaultsST_TRANS_ORDER_INFO();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MEProInterface.ST_TRANS_ORDER_INFO)
}
ST_TRANS_ORDER_INFO::ST_TRANS_ORDER_INFO(const ST_TRANS_ORDER_INFO& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strbidorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strbidorderid().size() > 0) {
    strbidorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strbidorderid_);
  }
  straskorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.straskorderid().size() > 0) {
    straskorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.straskorderid_);
  }
  ::memcpy(&uibiduserid_, &from.uibiduserid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uiexchobjid_) -
    reinterpret_cast<char*>(&uibiduserid_)) + sizeof(uiexchobjid_));
  // @@protoc_insertion_point(copy_constructor:MEProInterface.ST_TRANS_ORDER_INFO)
}

void ST_TRANS_ORDER_INFO::SharedCtor() {
  strbidorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  straskorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uibiduserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uiexchobjid_) -
      reinterpret_cast<char*>(&uibiduserid_)) + sizeof(uiexchobjid_));
  _cached_size_ = 0;
}

ST_TRANS_ORDER_INFO::~ST_TRANS_ORDER_INFO() {
  // @@protoc_insertion_point(destructor:MEProInterface.ST_TRANS_ORDER_INFO)
  SharedDtor();
}

void ST_TRANS_ORDER_INFO::SharedDtor() {
  strbidorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  straskorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ST_TRANS_ORDER_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_TRANS_ORDER_INFO::descriptor() {
  ::protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_TRANS_ORDER_INFO& ST_TRANS_ORDER_INFO::default_instance() {
  ::protobuf_subscription_2eproto::InitDefaultsST_TRANS_ORDER_INFO();
  return *internal_default_instance();
}


void ST_TRANS_ORDER_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:MEProInterface.ST_TRANS_ORDER_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strbidorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  straskorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uibiduserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uiexchobjid_) -
      reinterpret_cast<char*>(&uibiduserid_)) + sizeof(uiexchobjid_));
  _internal_metadata_.Clear();
}

bool ST_TRANS_ORDER_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MEProInterface.ST_TRANS_ORDER_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strBidOrderID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strbidorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strbidorderid().data(), static_cast<int>(this->strbidorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MEProInterface.ST_TRANS_ORDER_INFO.strBidOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strAskOrderID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straskorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->straskorderid().data(), static_cast<int>(this->straskorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MEProInterface.ST_TRANS_ORDER_INFO.strAskOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiBidUserID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibiduserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiAskUserID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiaskuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 fPrice = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 fNumber = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ucExchType = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ucexchtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ucRecordID = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ucrecordid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ucOrderStatus = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ucorderstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiExchObjID = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiexchobjid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 meBidOrderID = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mebidorderid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 meAskOrderID = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &measkorderid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MEProInterface.ST_TRANS_ORDER_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MEProInterface.ST_TRANS_ORDER_INFO)
  return false;
#undef DO_
}

void ST_TRANS_ORDER_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MEProInterface.ST_TRANS_ORDER_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string strBidOrderID = 1;
  if (this->strbidorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strbidorderid().data(), static_cast<int>(this->strbidorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEProInterface.ST_TRANS_ORDER_INFO.strBidOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strbidorderid(), output);
  }

  // string strAskOrderID = 2;
  if (this->straskorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->straskorderid().data(), static_cast<int>(this->straskorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEProInterface.ST_TRANS_ORDER_INFO.strAskOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->straskorderid(), output);
  }

  // uint32 uiBidUserID = 3;
  if (this->uibiduserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uibiduserid(), output);
  }

  // uint32 uiAskUserID = 4;
  if (this->uiaskuserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uiaskuserid(), output);
  }

  // int64 fPrice = 5;
  if (this->fprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->fprice(), output);
  }

  // int64 fNumber = 6;
  if (this->fnumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->fnumber(), output);
  }

  // uint32 ucExchType = 7;
  if (this->ucexchtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ucexchtype(), output);
  }

  // uint64 ucRecordID = 8;
  if (this->ucrecordid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->ucrecordid(), output);
  }

  // uint32 ucOrderStatus = 9;
  if (this->ucorderstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ucorderstatus(), output);
  }

  // uint32 uiExchObjID = 10;
  if (this->uiexchobjid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->uiexchobjid(), output);
  }

  // uint64 meBidOrderID = 11;
  if (this->mebidorderid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->mebidorderid(), output);
  }

  // uint64 meAskOrderID = 12;
  if (this->measkorderid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->measkorderid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MEProInterface.ST_TRANS_ORDER_INFO)
}

::google::protobuf::uint8* ST_TRANS_ORDER_INFO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MEProInterface.ST_TRANS_ORDER_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string strBidOrderID = 1;
  if (this->strbidorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strbidorderid().data(), static_cast<int>(this->strbidorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEProInterface.ST_TRANS_ORDER_INFO.strBidOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strbidorderid(), target);
  }

  // string strAskOrderID = 2;
  if (this->straskorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->straskorderid().data(), static_cast<int>(this->straskorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEProInterface.ST_TRANS_ORDER_INFO.strAskOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->straskorderid(), target);
  }

  // uint32 uiBidUserID = 3;
  if (this->uibiduserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uibiduserid(), target);
  }

  // uint32 uiAskUserID = 4;
  if (this->uiaskuserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uiaskuserid(), target);
  }

  // int64 fPrice = 5;
  if (this->fprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->fprice(), target);
  }

  // int64 fNumber = 6;
  if (this->fnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->fnumber(), target);
  }

  // uint32 ucExchType = 7;
  if (this->ucexchtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ucexchtype(), target);
  }

  // uint64 ucRecordID = 8;
  if (this->ucrecordid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->ucrecordid(), target);
  }

  // uint32 ucOrderStatus = 9;
  if (this->ucorderstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ucorderstatus(), target);
  }

  // uint32 uiExchObjID = 10;
  if (this->uiexchobjid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->uiexchobjid(), target);
  }

  // uint64 meBidOrderID = 11;
  if (this->mebidorderid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->mebidorderid(), target);
  }

  // uint64 meAskOrderID = 12;
  if (this->measkorderid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->measkorderid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MEProInterface.ST_TRANS_ORDER_INFO)
  return target;
}

size_t ST_TRANS_ORDER_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MEProInterface.ST_TRANS_ORDER_INFO)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string strBidOrderID = 1;
  if (this->strbidorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strbidorderid());
  }

  // string strAskOrderID = 2;
  if (this->straskorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->straskorderid());
  }

  // uint32 uiBidUserID = 3;
  if (this->uibiduserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uibiduserid());
  }

  // uint32 uiAskUserID = 4;
  if (this->uiaskuserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiaskuserid());
  }

  // int64 fPrice = 5;
  if (this->fprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->fprice());
  }

  // int64 fNumber = 6;
  if (this->fnumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->fnumber());
  }

  // uint64 ucRecordID = 8;
  if (this->ucrecordid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ucrecordid());
  }

  // uint32 ucExchType = 7;
  if (this->ucexchtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ucexchtype());
  }

  // uint32 ucOrderStatus = 9;
  if (this->ucorderstatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ucorderstatus());
  }

  // uint64 meBidOrderID = 11;
  if (this->mebidorderid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mebidorderid());
  }

  // uint64 meAskOrderID = 12;
  if (this->measkorderid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->measkorderid());
  }

  // uint32 uiExchObjID = 10;
  if (this->uiexchobjid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiexchobjid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_TRANS_ORDER_INFO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MEProInterface.ST_TRANS_ORDER_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_TRANS_ORDER_INFO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_TRANS_ORDER_INFO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MEProInterface.ST_TRANS_ORDER_INFO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MEProInterface.ST_TRANS_ORDER_INFO)
    MergeFrom(*source);
  }
}

void ST_TRANS_ORDER_INFO::MergeFrom(const ST_TRANS_ORDER_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MEProInterface.ST_TRANS_ORDER_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strbidorderid().size() > 0) {

    strbidorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strbidorderid_);
  }
  if (from.straskorderid().size() > 0) {

    straskorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.straskorderid_);
  }
  if (from.uibiduserid() != 0) {
    set_uibiduserid(from.uibiduserid());
  }
  if (from.uiaskuserid() != 0) {
    set_uiaskuserid(from.uiaskuserid());
  }
  if (from.fprice() != 0) {
    set_fprice(from.fprice());
  }
  if (from.fnumber() != 0) {
    set_fnumber(from.fnumber());
  }
  if (from.ucrecordid() != 0) {
    set_ucrecordid(from.ucrecordid());
  }
  if (from.ucexchtype() != 0) {
    set_ucexchtype(from.ucexchtype());
  }
  if (from.ucorderstatus() != 0) {
    set_ucorderstatus(from.ucorderstatus());
  }
  if (from.mebidorderid() != 0) {
    set_mebidorderid(from.mebidorderid());
  }
  if (from.measkorderid() != 0) {
    set_measkorderid(from.measkorderid());
  }
  if (from.uiexchobjid() != 0) {
    set_uiexchobjid(from.uiexchobjid());
  }
}

void ST_TRANS_ORDER_INFO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MEProInterface.ST_TRANS_ORDER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_TRANS_ORDER_INFO::CopyFrom(const ST_TRANS_ORDER_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MEProInterface.ST_TRANS_ORDER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_TRANS_ORDER_INFO::IsInitialized() const {
  return true;
}

void ST_TRANS_ORDER_INFO::Swap(ST_TRANS_ORDER_INFO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_TRANS_ORDER_INFO::InternalSwap(ST_TRANS_ORDER_INFO* other) {
  using std::swap;
  strbidorderid_.Swap(&other->strbidorderid_);
  straskorderid_.Swap(&other->straskorderid_);
  swap(uibiduserid_, other->uibiduserid_);
  swap(uiaskuserid_, other->uiaskuserid_);
  swap(fprice_, other->fprice_);
  swap(fnumber_, other->fnumber_);
  swap(ucrecordid_, other->ucrecordid_);
  swap(ucexchtype_, other->ucexchtype_);
  swap(ucorderstatus_, other->ucorderstatus_);
  swap(mebidorderid_, other->mebidorderid_);
  swap(measkorderid_, other->measkorderid_);
  swap(uiexchobjid_, other->uiexchobjid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_TRANS_ORDER_INFO::GetMetadata() const {
  protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ST_REP_TRANS_ORDER_REQUEST::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_REP_TRANS_ORDER_REQUEST::kUiUserIDFieldNumber;
const int ST_REP_TRANS_ORDER_REQUEST::kUcExchIDFieldNumber;
const int ST_REP_TRANS_ORDER_REQUEST::kUiExchObjIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_REP_TRANS_ORDER_REQUEST::ST_REP_TRANS_ORDER_REQUEST()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_subscription_2eproto::InitDefaultsST_REP_TRANS_ORDER_REQUEST();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MEProInterface.ST_REP_TRANS_ORDER_REQUEST)
}
ST_REP_TRANS_ORDER_REQUEST::ST_REP_TRANS_ORDER_REQUEST(const ST_REP_TRANS_ORDER_REQUEST& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ucexchid_, &from.ucexchid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uiexchobjid_) -
    reinterpret_cast<char*>(&ucexchid_)) + sizeof(uiexchobjid_));
  // @@protoc_insertion_point(copy_constructor:MEProInterface.ST_REP_TRANS_ORDER_REQUEST)
}

void ST_REP_TRANS_ORDER_REQUEST::SharedCtor() {
  ::memset(&ucexchid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uiexchobjid_) -
      reinterpret_cast<char*>(&ucexchid_)) + sizeof(uiexchobjid_));
  _cached_size_ = 0;
}

ST_REP_TRANS_ORDER_REQUEST::~ST_REP_TRANS_ORDER_REQUEST() {
  // @@protoc_insertion_point(destructor:MEProInterface.ST_REP_TRANS_ORDER_REQUEST)
  SharedDtor();
}

void ST_REP_TRANS_ORDER_REQUEST::SharedDtor() {
}

void ST_REP_TRANS_ORDER_REQUEST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_REP_TRANS_ORDER_REQUEST::descriptor() {
  ::protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_REP_TRANS_ORDER_REQUEST& ST_REP_TRANS_ORDER_REQUEST::default_instance() {
  ::protobuf_subscription_2eproto::InitDefaultsST_REP_TRANS_ORDER_REQUEST();
  return *internal_default_instance();
}


void ST_REP_TRANS_ORDER_REQUEST::Clear() {
// @@protoc_insertion_point(message_clear_start:MEProInterface.ST_REP_TRANS_ORDER_REQUEST)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ucexchid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uiexchobjid_) -
      reinterpret_cast<char*>(&ucexchid_)) + sizeof(uiexchobjid_));
  _internal_metadata_.Clear();
}

bool ST_REP_TRANS_ORDER_REQUEST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MEProInterface.ST_REP_TRANS_ORDER_REQUEST)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uiUserID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ucExchID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ucexchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiExchObjID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiexchobjid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MEProInterface.ST_REP_TRANS_ORDER_REQUEST)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MEProInterface.ST_REP_TRANS_ORDER_REQUEST)
  return false;
#undef DO_
}

void ST_REP_TRANS_ORDER_REQUEST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MEProInterface.ST_REP_TRANS_ORDER_REQUEST)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiuserid(), output);
  }

  // uint64 ucExchID = 2;
  if (this->ucexchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ucexchid(), output);
  }

  // uint32 uiExchObjID = 3;
  if (this->uiexchobjid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uiexchobjid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MEProInterface.ST_REP_TRANS_ORDER_REQUEST)
}

::google::protobuf::uint8* ST_REP_TRANS_ORDER_REQUEST::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MEProInterface.ST_REP_TRANS_ORDER_REQUEST)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiuserid(), target);
  }

  // uint64 ucExchID = 2;
  if (this->ucexchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ucexchid(), target);
  }

  // uint32 uiExchObjID = 3;
  if (this->uiexchobjid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uiexchobjid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MEProInterface.ST_REP_TRANS_ORDER_REQUEST)
  return target;
}

size_t ST_REP_TRANS_ORDER_REQUEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MEProInterface.ST_REP_TRANS_ORDER_REQUEST)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 ucExchID = 2;
  if (this->ucexchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ucexchid());
  }

  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiuserid());
  }

  // uint32 uiExchObjID = 3;
  if (this->uiexchobjid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiexchobjid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_REP_TRANS_ORDER_REQUEST::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MEProInterface.ST_REP_TRANS_ORDER_REQUEST)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_REP_TRANS_ORDER_REQUEST* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_REP_TRANS_ORDER_REQUEST>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MEProInterface.ST_REP_TRANS_ORDER_REQUEST)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MEProInterface.ST_REP_TRANS_ORDER_REQUEST)
    MergeFrom(*source);
  }
}

void ST_REP_TRANS_ORDER_REQUEST::MergeFrom(const ST_REP_TRANS_ORDER_REQUEST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MEProInterface.ST_REP_TRANS_ORDER_REQUEST)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ucexchid() != 0) {
    set_ucexchid(from.ucexchid());
  }
  if (from.uiuserid() != 0) {
    set_uiuserid(from.uiuserid());
  }
  if (from.uiexchobjid() != 0) {
    set_uiexchobjid(from.uiexchobjid());
  }
}

void ST_REP_TRANS_ORDER_REQUEST::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MEProInterface.ST_REP_TRANS_ORDER_REQUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_REP_TRANS_ORDER_REQUEST::CopyFrom(const ST_REP_TRANS_ORDER_REQUEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MEProInterface.ST_REP_TRANS_ORDER_REQUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_REP_TRANS_ORDER_REQUEST::IsInitialized() const {
  return true;
}

void ST_REP_TRANS_ORDER_REQUEST::Swap(ST_REP_TRANS_ORDER_REQUEST* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_REP_TRANS_ORDER_REQUEST::InternalSwap(ST_REP_TRANS_ORDER_REQUEST* other) {
  using std::swap;
  swap(ucexchid_, other->ucexchid_);
  swap(uiuserid_, other->uiuserid_);
  swap(uiexchobjid_, other->uiexchobjid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_REP_TRANS_ORDER_REQUEST::GetMetadata() const {
  protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ST_QUERY_ORDER_INFO::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_QUERY_ORDER_INFO::kUiUserIDFieldNumber;
const int ST_QUERY_ORDER_INFO::kStrOrderIDFieldNumber;
const int ST_QUERY_ORDER_INFO::kLOrderIDFrMEFieldNumber;
const int ST_QUERY_ORDER_INFO::kUiExchObjIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_QUERY_ORDER_INFO::ST_QUERY_ORDER_INFO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_subscription_2eproto::InitDefaultsST_QUERY_ORDER_INFO();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MEProInterface.ST_QUERY_ORDER_INFO)
}
ST_QUERY_ORDER_INFO::ST_QUERY_ORDER_INFO(const ST_QUERY_ORDER_INFO& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strorderid().size() > 0) {
    strorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strorderid_);
  }
  ::memcpy(&uiuserid_, &from.uiuserid_,
    static_cast<size_t>(reinterpret_cast<char*>(&lorderidfrme_) -
    reinterpret_cast<char*>(&uiuserid_)) + sizeof(lorderidfrme_));
  // @@protoc_insertion_point(copy_constructor:MEProInterface.ST_QUERY_ORDER_INFO)
}

void ST_QUERY_ORDER_INFO::SharedCtor() {
  strorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uiuserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lorderidfrme_) -
      reinterpret_cast<char*>(&uiuserid_)) + sizeof(lorderidfrme_));
  _cached_size_ = 0;
}

ST_QUERY_ORDER_INFO::~ST_QUERY_ORDER_INFO() {
  // @@protoc_insertion_point(destructor:MEProInterface.ST_QUERY_ORDER_INFO)
  SharedDtor();
}

void ST_QUERY_ORDER_INFO::SharedDtor() {
  strorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ST_QUERY_ORDER_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_QUERY_ORDER_INFO::descriptor() {
  ::protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_QUERY_ORDER_INFO& ST_QUERY_ORDER_INFO::default_instance() {
  ::protobuf_subscription_2eproto::InitDefaultsST_QUERY_ORDER_INFO();
  return *internal_default_instance();
}


void ST_QUERY_ORDER_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:MEProInterface.ST_QUERY_ORDER_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uiuserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lorderidfrme_) -
      reinterpret_cast<char*>(&uiuserid_)) + sizeof(lorderidfrme_));
  _internal_metadata_.Clear();
}

bool ST_QUERY_ORDER_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MEProInterface.ST_QUERY_ORDER_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uiUserID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strOrderID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strorderid().data(), static_cast<int>(this->strorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MEProInterface.ST_QUERY_ORDER_INFO.strOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lOrderIDFrME = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lorderidfrme_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiExchObjID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiexchobjid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MEProInterface.ST_QUERY_ORDER_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MEProInterface.ST_QUERY_ORDER_INFO)
  return false;
#undef DO_
}

void ST_QUERY_ORDER_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MEProInterface.ST_QUERY_ORDER_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiuserid(), output);
  }

  // string strOrderID = 2;
  if (this->strorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strorderid().data(), static_cast<int>(this->strorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEProInterface.ST_QUERY_ORDER_INFO.strOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->strorderid(), output);
  }

  // uint64 lOrderIDFrME = 3;
  if (this->lorderidfrme() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lorderidfrme(), output);
  }

  // uint32 uiExchObjID = 4;
  if (this->uiexchobjid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uiexchobjid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MEProInterface.ST_QUERY_ORDER_INFO)
}

::google::protobuf::uint8* ST_QUERY_ORDER_INFO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MEProInterface.ST_QUERY_ORDER_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiuserid(), target);
  }

  // string strOrderID = 2;
  if (this->strorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strorderid().data(), static_cast<int>(this->strorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEProInterface.ST_QUERY_ORDER_INFO.strOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strorderid(), target);
  }

  // uint64 lOrderIDFrME = 3;
  if (this->lorderidfrme() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lorderidfrme(), target);
  }

  // uint32 uiExchObjID = 4;
  if (this->uiexchobjid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uiexchobjid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MEProInterface.ST_QUERY_ORDER_INFO)
  return target;
}

size_t ST_QUERY_ORDER_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MEProInterface.ST_QUERY_ORDER_INFO)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string strOrderID = 2;
  if (this->strorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strorderid());
  }

  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiuserid());
  }

  // uint32 uiExchObjID = 4;
  if (this->uiexchobjid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiexchobjid());
  }

  // uint64 lOrderIDFrME = 3;
  if (this->lorderidfrme() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lorderidfrme());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_QUERY_ORDER_INFO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MEProInterface.ST_QUERY_ORDER_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_QUERY_ORDER_INFO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_QUERY_ORDER_INFO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MEProInterface.ST_QUERY_ORDER_INFO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MEProInterface.ST_QUERY_ORDER_INFO)
    MergeFrom(*source);
  }
}

void ST_QUERY_ORDER_INFO::MergeFrom(const ST_QUERY_ORDER_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MEProInterface.ST_QUERY_ORDER_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strorderid().size() > 0) {

    strorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strorderid_);
  }
  if (from.uiuserid() != 0) {
    set_uiuserid(from.uiuserid());
  }
  if (from.uiexchobjid() != 0) {
    set_uiexchobjid(from.uiexchobjid());
  }
  if (from.lorderidfrme() != 0) {
    set_lorderidfrme(from.lorderidfrme());
  }
}

void ST_QUERY_ORDER_INFO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MEProInterface.ST_QUERY_ORDER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_QUERY_ORDER_INFO::CopyFrom(const ST_QUERY_ORDER_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MEProInterface.ST_QUERY_ORDER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_QUERY_ORDER_INFO::IsInitialized() const {
  return true;
}

void ST_QUERY_ORDER_INFO::Swap(ST_QUERY_ORDER_INFO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_QUERY_ORDER_INFO::InternalSwap(ST_QUERY_ORDER_INFO* other) {
  using std::swap;
  strorderid_.Swap(&other->strorderid_);
  swap(uiuserid_, other->uiuserid_);
  swap(uiexchobjid_, other->uiexchobjid_);
  swap(lorderidfrme_, other->lorderidfrme_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_QUERY_ORDER_INFO::GetMetadata() const {
  protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ST_QUERY_ORDER_RES::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_QUERY_ORDER_RES::kUiUserIDFieldNumber;
const int ST_QUERY_ORDER_RES::kStrOrderIDFieldNumber;
const int ST_QUERY_ORDER_RES::kUiExchObjIDFieldNumber;
const int ST_QUERY_ORDER_RES::kWTransStatusFieldNumber;
const int ST_QUERY_ORDER_RES::kUcTransTypeFieldNumber;
const int ST_QUERY_ORDER_RES::kLOrgPriceFieldNumber;
const int ST_QUERY_ORDER_RES::kLOrgNumberFieldNumber;
const int ST_QUERY_ORDER_RES::kLAvgTransferPriceFieldNumber;
const int ST_QUERY_ORDER_RES::kLAvgTransferNumFieldNumber;
const int ST_QUERY_ORDER_RES::kLOrderIDFrMEFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_QUERY_ORDER_RES::ST_QUERY_ORDER_RES()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_subscription_2eproto::InitDefaultsST_QUERY_ORDER_RES();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MEProInterface.ST_QUERY_ORDER_RES)
}
ST_QUERY_ORDER_RES::ST_QUERY_ORDER_RES(const ST_QUERY_ORDER_RES& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strorderid().size() > 0) {
    strorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strorderid_);
  }
  ::memcpy(&uiuserid_, &from.uiuserid_,
    static_cast<size_t>(reinterpret_cast<char*>(&lorderidfrme_) -
    reinterpret_cast<char*>(&uiuserid_)) + sizeof(lorderidfrme_));
  // @@protoc_insertion_point(copy_constructor:MEProInterface.ST_QUERY_ORDER_RES)
}

void ST_QUERY_ORDER_RES::SharedCtor() {
  strorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uiuserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lorderidfrme_) -
      reinterpret_cast<char*>(&uiuserid_)) + sizeof(lorderidfrme_));
  _cached_size_ = 0;
}

ST_QUERY_ORDER_RES::~ST_QUERY_ORDER_RES() {
  // @@protoc_insertion_point(destructor:MEProInterface.ST_QUERY_ORDER_RES)
  SharedDtor();
}

void ST_QUERY_ORDER_RES::SharedDtor() {
  strorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ST_QUERY_ORDER_RES::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_QUERY_ORDER_RES::descriptor() {
  ::protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_QUERY_ORDER_RES& ST_QUERY_ORDER_RES::default_instance() {
  ::protobuf_subscription_2eproto::InitDefaultsST_QUERY_ORDER_RES();
  return *internal_default_instance();
}


void ST_QUERY_ORDER_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:MEProInterface.ST_QUERY_ORDER_RES)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uiuserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lorderidfrme_) -
      reinterpret_cast<char*>(&uiuserid_)) + sizeof(lorderidfrme_));
  _internal_metadata_.Clear();
}

bool ST_QUERY_ORDER_RES::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MEProInterface.ST_QUERY_ORDER_RES)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uiUserID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strOrderID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strorderid().data(), static_cast<int>(this->strorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MEProInterface.ST_QUERY_ORDER_RES.strOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiExchObjID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiexchobjid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 wTransStatus = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wtransstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ucTransType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uctranstype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lOrgPrice = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lorgprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lOrgNumber = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lorgnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lAvgTransferPrice = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lavgtransferprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lAvgTransferNum = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lavgtransfernum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lOrderIDFrME = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lorderidfrme_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MEProInterface.ST_QUERY_ORDER_RES)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MEProInterface.ST_QUERY_ORDER_RES)
  return false;
#undef DO_
}

void ST_QUERY_ORDER_RES::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MEProInterface.ST_QUERY_ORDER_RES)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiuserid(), output);
  }

  // string strOrderID = 2;
  if (this->strorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strorderid().data(), static_cast<int>(this->strorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEProInterface.ST_QUERY_ORDER_RES.strOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->strorderid(), output);
  }

  // uint32 uiExchObjID = 3;
  if (this->uiexchobjid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uiexchobjid(), output);
  }

  // uint32 wTransStatus = 4;
  if (this->wtransstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wtransstatus(), output);
  }

  // uint32 ucTransType = 5;
  if (this->uctranstype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uctranstype(), output);
  }

  // int64 lOrgPrice = 6;
  if (this->lorgprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->lorgprice(), output);
  }

  // int64 lOrgNumber = 7;
  if (this->lorgnumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->lorgnumber(), output);
  }

  // int64 lAvgTransferPrice = 8;
  if (this->lavgtransferprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->lavgtransferprice(), output);
  }

  // int64 lAvgTransferNum = 9;
  if (this->lavgtransfernum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->lavgtransfernum(), output);
  }

  // uint64 lOrderIDFrME = 10;
  if (this->lorderidfrme() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->lorderidfrme(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MEProInterface.ST_QUERY_ORDER_RES)
}

::google::protobuf::uint8* ST_QUERY_ORDER_RES::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MEProInterface.ST_QUERY_ORDER_RES)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiuserid(), target);
  }

  // string strOrderID = 2;
  if (this->strorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strorderid().data(), static_cast<int>(this->strorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEProInterface.ST_QUERY_ORDER_RES.strOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strorderid(), target);
  }

  // uint32 uiExchObjID = 3;
  if (this->uiexchobjid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uiexchobjid(), target);
  }

  // uint32 wTransStatus = 4;
  if (this->wtransstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wtransstatus(), target);
  }

  // uint32 ucTransType = 5;
  if (this->uctranstype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uctranstype(), target);
  }

  // int64 lOrgPrice = 6;
  if (this->lorgprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->lorgprice(), target);
  }

  // int64 lOrgNumber = 7;
  if (this->lorgnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->lorgnumber(), target);
  }

  // int64 lAvgTransferPrice = 8;
  if (this->lavgtransferprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->lavgtransferprice(), target);
  }

  // int64 lAvgTransferNum = 9;
  if (this->lavgtransfernum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->lavgtransfernum(), target);
  }

  // uint64 lOrderIDFrME = 10;
  if (this->lorderidfrme() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->lorderidfrme(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MEProInterface.ST_QUERY_ORDER_RES)
  return target;
}

size_t ST_QUERY_ORDER_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MEProInterface.ST_QUERY_ORDER_RES)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string strOrderID = 2;
  if (this->strorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strorderid());
  }

  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiuserid());
  }

  // uint32 uiExchObjID = 3;
  if (this->uiexchobjid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiexchobjid());
  }

  // uint32 wTransStatus = 4;
  if (this->wtransstatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wtransstatus());
  }

  // uint32 ucTransType = 5;
  if (this->uctranstype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uctranstype());
  }

  // int64 lOrgPrice = 6;
  if (this->lorgprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lorgprice());
  }

  // int64 lOrgNumber = 7;
  if (this->lorgnumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lorgnumber());
  }

  // int64 lAvgTransferPrice = 8;
  if (this->lavgtransferprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lavgtransferprice());
  }

  // int64 lAvgTransferNum = 9;
  if (this->lavgtransfernum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lavgtransfernum());
  }

  // uint64 lOrderIDFrME = 10;
  if (this->lorderidfrme() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lorderidfrme());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_QUERY_ORDER_RES::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MEProInterface.ST_QUERY_ORDER_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_QUERY_ORDER_RES* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_QUERY_ORDER_RES>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MEProInterface.ST_QUERY_ORDER_RES)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MEProInterface.ST_QUERY_ORDER_RES)
    MergeFrom(*source);
  }
}

void ST_QUERY_ORDER_RES::MergeFrom(const ST_QUERY_ORDER_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MEProInterface.ST_QUERY_ORDER_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strorderid().size() > 0) {

    strorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strorderid_);
  }
  if (from.uiuserid() != 0) {
    set_uiuserid(from.uiuserid());
  }
  if (from.uiexchobjid() != 0) {
    set_uiexchobjid(from.uiexchobjid());
  }
  if (from.wtransstatus() != 0) {
    set_wtransstatus(from.wtransstatus());
  }
  if (from.uctranstype() != 0) {
    set_uctranstype(from.uctranstype());
  }
  if (from.lorgprice() != 0) {
    set_lorgprice(from.lorgprice());
  }
  if (from.lorgnumber() != 0) {
    set_lorgnumber(from.lorgnumber());
  }
  if (from.lavgtransferprice() != 0) {
    set_lavgtransferprice(from.lavgtransferprice());
  }
  if (from.lavgtransfernum() != 0) {
    set_lavgtransfernum(from.lavgtransfernum());
  }
  if (from.lorderidfrme() != 0) {
    set_lorderidfrme(from.lorderidfrme());
  }
}

void ST_QUERY_ORDER_RES::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MEProInterface.ST_QUERY_ORDER_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_QUERY_ORDER_RES::CopyFrom(const ST_QUERY_ORDER_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MEProInterface.ST_QUERY_ORDER_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_QUERY_ORDER_RES::IsInitialized() const {
  return true;
}

void ST_QUERY_ORDER_RES::Swap(ST_QUERY_ORDER_RES* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_QUERY_ORDER_RES::InternalSwap(ST_QUERY_ORDER_RES* other) {
  using std::swap;
  strorderid_.Swap(&other->strorderid_);
  swap(uiuserid_, other->uiuserid_);
  swap(uiexchobjid_, other->uiexchobjid_);
  swap(wtransstatus_, other->wtransstatus_);
  swap(uctranstype_, other->uctranstype_);
  swap(lorgprice_, other->lorgprice_);
  swap(lorgnumber_, other->lorgnumber_);
  swap(lavgtransferprice_, other->lavgtransferprice_);
  swap(lavgtransfernum_, other->lavgtransfernum_);
  swap(lorderidfrme_, other->lorderidfrme_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_QUERY_ORDER_RES::GetMetadata() const {
  protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ST_MART_QUOTATION::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_MART_QUOTATION::kUiUserIDFieldNumber;
const int ST_MART_QUOTATION::kUiExchObjIDFieldNumber;
const int ST_MART_QUOTATION::kLCurDealProceFieldNumber;
const int ST_MART_QUOTATION::kLTotalDealProceFieldNumber;
const int ST_MART_QUOTATION::kLBeginProceFieldNumber;
const int ST_MART_QUOTATION::kLHighestProceFieldNumber;
const int ST_MART_QUOTATION::kLMinimumProceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_MART_QUOTATION::ST_MART_QUOTATION()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_subscription_2eproto::InitDefaultsST_MART_QUOTATION();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MEProInterface.ST_MART_QUOTATION)
}
ST_MART_QUOTATION::ST_MART_QUOTATION(const ST_MART_QUOTATION& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uiuserid_, &from.uiuserid_,
    static_cast<size_t>(reinterpret_cast<char*>(&lminimumproce_) -
    reinterpret_cast<char*>(&uiuserid_)) + sizeof(lminimumproce_));
  // @@protoc_insertion_point(copy_constructor:MEProInterface.ST_MART_QUOTATION)
}

void ST_MART_QUOTATION::SharedCtor() {
  ::memset(&uiuserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lminimumproce_) -
      reinterpret_cast<char*>(&uiuserid_)) + sizeof(lminimumproce_));
  _cached_size_ = 0;
}

ST_MART_QUOTATION::~ST_MART_QUOTATION() {
  // @@protoc_insertion_point(destructor:MEProInterface.ST_MART_QUOTATION)
  SharedDtor();
}

void ST_MART_QUOTATION::SharedDtor() {
}

void ST_MART_QUOTATION::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_MART_QUOTATION::descriptor() {
  ::protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_MART_QUOTATION& ST_MART_QUOTATION::default_instance() {
  ::protobuf_subscription_2eproto::InitDefaultsST_MART_QUOTATION();
  return *internal_default_instance();
}


void ST_MART_QUOTATION::Clear() {
// @@protoc_insertion_point(message_clear_start:MEProInterface.ST_MART_QUOTATION)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uiuserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lminimumproce_) -
      reinterpret_cast<char*>(&uiuserid_)) + sizeof(lminimumproce_));
  _internal_metadata_.Clear();
}

bool ST_MART_QUOTATION::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MEProInterface.ST_MART_QUOTATION)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uiUserID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiExchObjID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiexchobjid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lCurDealProce = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lcurdealproce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lTotalDealProce = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ltotaldealproce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lBeginProce = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lbeginproce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lHighestProce = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lhighestproce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lMinimumProce = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lminimumproce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MEProInterface.ST_MART_QUOTATION)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MEProInterface.ST_MART_QUOTATION)
  return false;
#undef DO_
}

void ST_MART_QUOTATION::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MEProInterface.ST_MART_QUOTATION)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiuserid(), output);
  }

  // uint32 uiExchObjID = 2;
  if (this->uiexchobjid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiexchobjid(), output);
  }

  // int64 lCurDealProce = 3;
  if (this->lcurdealproce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->lcurdealproce(), output);
  }

  // int64 lTotalDealProce = 4;
  if (this->ltotaldealproce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ltotaldealproce(), output);
  }

  // int64 lBeginProce = 5;
  if (this->lbeginproce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->lbeginproce(), output);
  }

  // int64 lHighestProce = 6;
  if (this->lhighestproce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->lhighestproce(), output);
  }

  // int64 lMinimumProce = 7;
  if (this->lminimumproce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->lminimumproce(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MEProInterface.ST_MART_QUOTATION)
}

::google::protobuf::uint8* ST_MART_QUOTATION::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MEProInterface.ST_MART_QUOTATION)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiuserid(), target);
  }

  // uint32 uiExchObjID = 2;
  if (this->uiexchobjid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiexchobjid(), target);
  }

  // int64 lCurDealProce = 3;
  if (this->lcurdealproce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->lcurdealproce(), target);
  }

  // int64 lTotalDealProce = 4;
  if (this->ltotaldealproce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ltotaldealproce(), target);
  }

  // int64 lBeginProce = 5;
  if (this->lbeginproce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->lbeginproce(), target);
  }

  // int64 lHighestProce = 6;
  if (this->lhighestproce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->lhighestproce(), target);
  }

  // int64 lMinimumProce = 7;
  if (this->lminimumproce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->lminimumproce(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MEProInterface.ST_MART_QUOTATION)
  return target;
}

size_t ST_MART_QUOTATION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MEProInterface.ST_MART_QUOTATION)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiuserid());
  }

  // uint32 uiExchObjID = 2;
  if (this->uiexchobjid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiexchobjid());
  }

  // int64 lCurDealProce = 3;
  if (this->lcurdealproce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lcurdealproce());
  }

  // int64 lTotalDealProce = 4;
  if (this->ltotaldealproce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ltotaldealproce());
  }

  // int64 lBeginProce = 5;
  if (this->lbeginproce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lbeginproce());
  }

  // int64 lHighestProce = 6;
  if (this->lhighestproce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lhighestproce());
  }

  // int64 lMinimumProce = 7;
  if (this->lminimumproce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lminimumproce());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_MART_QUOTATION::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MEProInterface.ST_MART_QUOTATION)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_MART_QUOTATION* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_MART_QUOTATION>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MEProInterface.ST_MART_QUOTATION)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MEProInterface.ST_MART_QUOTATION)
    MergeFrom(*source);
  }
}

void ST_MART_QUOTATION::MergeFrom(const ST_MART_QUOTATION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MEProInterface.ST_MART_QUOTATION)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uiuserid() != 0) {
    set_uiuserid(from.uiuserid());
  }
  if (from.uiexchobjid() != 0) {
    set_uiexchobjid(from.uiexchobjid());
  }
  if (from.lcurdealproce() != 0) {
    set_lcurdealproce(from.lcurdealproce());
  }
  if (from.ltotaldealproce() != 0) {
    set_ltotaldealproce(from.ltotaldealproce());
  }
  if (from.lbeginproce() != 0) {
    set_lbeginproce(from.lbeginproce());
  }
  if (from.lhighestproce() != 0) {
    set_lhighestproce(from.lhighestproce());
  }
  if (from.lminimumproce() != 0) {
    set_lminimumproce(from.lminimumproce());
  }
}

void ST_MART_QUOTATION::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MEProInterface.ST_MART_QUOTATION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_MART_QUOTATION::CopyFrom(const ST_MART_QUOTATION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MEProInterface.ST_MART_QUOTATION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_MART_QUOTATION::IsInitialized() const {
  return true;
}

void ST_MART_QUOTATION::Swap(ST_MART_QUOTATION* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_MART_QUOTATION::InternalSwap(ST_MART_QUOTATION* other) {
  using std::swap;
  swap(uiuserid_, other->uiuserid_);
  swap(uiexchobjid_, other->uiexchobjid_);
  swap(lcurdealproce_, other->lcurdealproce_);
  swap(ltotaldealproce_, other->ltotaldealproce_);
  swap(lbeginproce_, other->lbeginproce_);
  swap(lhighestproce_, other->lhighestproce_);
  swap(lminimumproce_, other->lminimumproce_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_MART_QUOTATION::GetMetadata() const {
  protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ST_SIG_ORDER_INFO::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_SIG_ORDER_INFO::kLPriceFieldNumber;
const int ST_SIG_ORDER_INFO::kLNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_SIG_ORDER_INFO::ST_SIG_ORDER_INFO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_subscription_2eproto::InitDefaultsST_SIG_ORDER_INFO();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MEProInterface.ST_SIG_ORDER_INFO)
}
ST_SIG_ORDER_INFO::ST_SIG_ORDER_INFO(const ST_SIG_ORDER_INFO& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lprice_, &from.lprice_,
    static_cast<size_t>(reinterpret_cast<char*>(&lnumber_) -
    reinterpret_cast<char*>(&lprice_)) + sizeof(lnumber_));
  // @@protoc_insertion_point(copy_constructor:MEProInterface.ST_SIG_ORDER_INFO)
}

void ST_SIG_ORDER_INFO::SharedCtor() {
  ::memset(&lprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lnumber_) -
      reinterpret_cast<char*>(&lprice_)) + sizeof(lnumber_));
  _cached_size_ = 0;
}

ST_SIG_ORDER_INFO::~ST_SIG_ORDER_INFO() {
  // @@protoc_insertion_point(destructor:MEProInterface.ST_SIG_ORDER_INFO)
  SharedDtor();
}

void ST_SIG_ORDER_INFO::SharedDtor() {
}

void ST_SIG_ORDER_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_SIG_ORDER_INFO::descriptor() {
  ::protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_SIG_ORDER_INFO& ST_SIG_ORDER_INFO::default_instance() {
  ::protobuf_subscription_2eproto::InitDefaultsST_SIG_ORDER_INFO();
  return *internal_default_instance();
}


void ST_SIG_ORDER_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:MEProInterface.ST_SIG_ORDER_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lnumber_) -
      reinterpret_cast<char*>(&lprice_)) + sizeof(lnumber_));
  _internal_metadata_.Clear();
}

bool ST_SIG_ORDER_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MEProInterface.ST_SIG_ORDER_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 lPrice = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lNumber = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MEProInterface.ST_SIG_ORDER_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MEProInterface.ST_SIG_ORDER_INFO)
  return false;
#undef DO_
}

void ST_SIG_ORDER_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MEProInterface.ST_SIG_ORDER_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 lPrice = 1;
  if (this->lprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lprice(), output);
  }

  // uint64 lNumber = 2;
  if (this->lnumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lnumber(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MEProInterface.ST_SIG_ORDER_INFO)
}

::google::protobuf::uint8* ST_SIG_ORDER_INFO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MEProInterface.ST_SIG_ORDER_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 lPrice = 1;
  if (this->lprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lprice(), target);
  }

  // uint64 lNumber = 2;
  if (this->lnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lnumber(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MEProInterface.ST_SIG_ORDER_INFO)
  return target;
}

size_t ST_SIG_ORDER_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MEProInterface.ST_SIG_ORDER_INFO)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 lPrice = 1;
  if (this->lprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lprice());
  }

  // uint64 lNumber = 2;
  if (this->lnumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lnumber());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_SIG_ORDER_INFO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MEProInterface.ST_SIG_ORDER_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_SIG_ORDER_INFO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_SIG_ORDER_INFO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MEProInterface.ST_SIG_ORDER_INFO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MEProInterface.ST_SIG_ORDER_INFO)
    MergeFrom(*source);
  }
}

void ST_SIG_ORDER_INFO::MergeFrom(const ST_SIG_ORDER_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MEProInterface.ST_SIG_ORDER_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lprice() != 0) {
    set_lprice(from.lprice());
  }
  if (from.lnumber() != 0) {
    set_lnumber(from.lnumber());
  }
}

void ST_SIG_ORDER_INFO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MEProInterface.ST_SIG_ORDER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_SIG_ORDER_INFO::CopyFrom(const ST_SIG_ORDER_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MEProInterface.ST_SIG_ORDER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_SIG_ORDER_INFO::IsInitialized() const {
  return true;
}

void ST_SIG_ORDER_INFO::Swap(ST_SIG_ORDER_INFO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_SIG_ORDER_INFO::InternalSwap(ST_SIG_ORDER_INFO* other) {
  using std::swap;
  swap(lprice_, other->lprice_);
  swap(lnumber_, other->lnumber_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_SIG_ORDER_INFO::GetMetadata() const {
  protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ST_MARKET_ORDERBOOK::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_MARKET_ORDERBOOK::kUiUserIDFieldNumber;
const int ST_MARKET_ORDERBOOK::kUiExchObjIDFieldNumber;
const int ST_MARKET_ORDERBOOK::kUiBidOrderNumFieldNumber;
const int ST_MARKET_ORDERBOOK::kStBidOrderFieldNumber;
const int ST_MARKET_ORDERBOOK::kUiAskOrderNumFieldNumber;
const int ST_MARKET_ORDERBOOK::kStAskOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_MARKET_ORDERBOOK::ST_MARKET_ORDERBOOK()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_subscription_2eproto::InitDefaultsST_MARKET_ORDERBOOK();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MEProInterface.ST_MARKET_ORDERBOOK)
}
ST_MARKET_ORDERBOOK::ST_MARKET_ORDERBOOK(const ST_MARKET_ORDERBOOK& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stbidorder_(from.stbidorder_),
      staskorder_(from.staskorder_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uiuserid_, &from.uiuserid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uiaskordernum_) -
    reinterpret_cast<char*>(&uiuserid_)) + sizeof(uiaskordernum_));
  // @@protoc_insertion_point(copy_constructor:MEProInterface.ST_MARKET_ORDERBOOK)
}

void ST_MARKET_ORDERBOOK::SharedCtor() {
  ::memset(&uiuserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uiaskordernum_) -
      reinterpret_cast<char*>(&uiuserid_)) + sizeof(uiaskordernum_));
  _cached_size_ = 0;
}

ST_MARKET_ORDERBOOK::~ST_MARKET_ORDERBOOK() {
  // @@protoc_insertion_point(destructor:MEProInterface.ST_MARKET_ORDERBOOK)
  SharedDtor();
}

void ST_MARKET_ORDERBOOK::SharedDtor() {
}

void ST_MARKET_ORDERBOOK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_MARKET_ORDERBOOK::descriptor() {
  ::protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_MARKET_ORDERBOOK& ST_MARKET_ORDERBOOK::default_instance() {
  ::protobuf_subscription_2eproto::InitDefaultsST_MARKET_ORDERBOOK();
  return *internal_default_instance();
}


void ST_MARKET_ORDERBOOK::Clear() {
// @@protoc_insertion_point(message_clear_start:MEProInterface.ST_MARKET_ORDERBOOK)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stbidorder_.Clear();
  staskorder_.Clear();
  ::memset(&uiuserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uiaskordernum_) -
      reinterpret_cast<char*>(&uiuserid_)) + sizeof(uiaskordernum_));
  _internal_metadata_.Clear();
}

bool ST_MARKET_ORDERBOOK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MEProInterface.ST_MARKET_ORDERBOOK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uiUserID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiExchObjID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiexchobjid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiBidOrderNum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibidordernum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MEProInterface.ST_SIG_ORDER_INFO stBidOrder = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stbidorder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiAskOrderNum = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiaskordernum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MEProInterface.ST_SIG_ORDER_INFO stAskOrder = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_staskorder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MEProInterface.ST_MARKET_ORDERBOOK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MEProInterface.ST_MARKET_ORDERBOOK)
  return false;
#undef DO_
}

void ST_MARKET_ORDERBOOK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MEProInterface.ST_MARKET_ORDERBOOK)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiuserid(), output);
  }

  // uint32 uiExchObjID = 2;
  if (this->uiexchobjid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiexchobjid(), output);
  }

  // uint32 uiBidOrderNum = 3;
  if (this->uibidordernum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uibidordernum(), output);
  }

  // repeated .MEProInterface.ST_SIG_ORDER_INFO stBidOrder = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stbidorder_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->stbidorder(static_cast<int>(i)),
      output);
  }

  // uint32 uiAskOrderNum = 5;
  if (this->uiaskordernum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uiaskordernum(), output);
  }

  // repeated .MEProInterface.ST_SIG_ORDER_INFO stAskOrder = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->staskorder_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->staskorder(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MEProInterface.ST_MARKET_ORDERBOOK)
}

::google::protobuf::uint8* ST_MARKET_ORDERBOOK::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MEProInterface.ST_MARKET_ORDERBOOK)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiuserid(), target);
  }

  // uint32 uiExchObjID = 2;
  if (this->uiexchobjid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiexchobjid(), target);
  }

  // uint32 uiBidOrderNum = 3;
  if (this->uibidordernum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uibidordernum(), target);
  }

  // repeated .MEProInterface.ST_SIG_ORDER_INFO stBidOrder = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stbidorder_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->stbidorder(static_cast<int>(i)), deterministic, target);
  }

  // uint32 uiAskOrderNum = 5;
  if (this->uiaskordernum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uiaskordernum(), target);
  }

  // repeated .MEProInterface.ST_SIG_ORDER_INFO stAskOrder = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->staskorder_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->staskorder(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MEProInterface.ST_MARKET_ORDERBOOK)
  return target;
}

size_t ST_MARKET_ORDERBOOK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MEProInterface.ST_MARKET_ORDERBOOK)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .MEProInterface.ST_SIG_ORDER_INFO stBidOrder = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->stbidorder_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stbidorder(static_cast<int>(i)));
    }
  }

  // repeated .MEProInterface.ST_SIG_ORDER_INFO stAskOrder = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->staskorder_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->staskorder(static_cast<int>(i)));
    }
  }

  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiuserid());
  }

  // uint32 uiExchObjID = 2;
  if (this->uiexchobjid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiexchobjid());
  }

  // uint32 uiBidOrderNum = 3;
  if (this->uibidordernum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uibidordernum());
  }

  // uint32 uiAskOrderNum = 5;
  if (this->uiaskordernum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiaskordernum());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_MARKET_ORDERBOOK::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MEProInterface.ST_MARKET_ORDERBOOK)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_MARKET_ORDERBOOK* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_MARKET_ORDERBOOK>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MEProInterface.ST_MARKET_ORDERBOOK)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MEProInterface.ST_MARKET_ORDERBOOK)
    MergeFrom(*source);
  }
}

void ST_MARKET_ORDERBOOK::MergeFrom(const ST_MARKET_ORDERBOOK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MEProInterface.ST_MARKET_ORDERBOOK)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stbidorder_.MergeFrom(from.stbidorder_);
  staskorder_.MergeFrom(from.staskorder_);
  if (from.uiuserid() != 0) {
    set_uiuserid(from.uiuserid());
  }
  if (from.uiexchobjid() != 0) {
    set_uiexchobjid(from.uiexchobjid());
  }
  if (from.uibidordernum() != 0) {
    set_uibidordernum(from.uibidordernum());
  }
  if (from.uiaskordernum() != 0) {
    set_uiaskordernum(from.uiaskordernum());
  }
}

void ST_MARKET_ORDERBOOK::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MEProInterface.ST_MARKET_ORDERBOOK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_MARKET_ORDERBOOK::CopyFrom(const ST_MARKET_ORDERBOOK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MEProInterface.ST_MARKET_ORDERBOOK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_MARKET_ORDERBOOK::IsInitialized() const {
  return true;
}

void ST_MARKET_ORDERBOOK::Swap(ST_MARKET_ORDERBOOK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_MARKET_ORDERBOOK::InternalSwap(ST_MARKET_ORDERBOOK* other) {
  using std::swap;
  CastToBase(&stbidorder_)->InternalSwap(CastToBase(&other->stbidorder_));
  CastToBase(&staskorder_)->InternalSwap(CastToBase(&other->staskorder_));
  swap(uiuserid_, other->uiuserid_);
  swap(uiexchobjid_, other->uiexchobjid_);
  swap(uibidordernum_, other->uibidordernum_);
  swap(uiaskordernum_, other->uiaskordernum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_MARKET_ORDERBOOK::GetMetadata() const {
  protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ST_MAINTAIN_LOG::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_MAINTAIN_LOG::kStrHostNameFieldNumber;
const int ST_MAINTAIN_LOG::kChLogLevelFieldNumber;
const int ST_MAINTAIN_LOG::kChModuleIndexFieldNumber;
const int ST_MAINTAIN_LOG::kUiRepTimeFieldNumber;
const int ST_MAINTAIN_LOG::kStrLogContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_MAINTAIN_LOG::ST_MAINTAIN_LOG()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_subscription_2eproto::InitDefaultsST_MAINTAIN_LOG();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MEProInterface.ST_MAINTAIN_LOG)
}
ST_MAINTAIN_LOG::ST_MAINTAIN_LOG(const ST_MAINTAIN_LOG& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strhostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strhostname().size() > 0) {
    strhostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strhostname_);
  }
  strlogcontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strlogcontent().size() > 0) {
    strlogcontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strlogcontent_);
  }
  ::memcpy(&chloglevel_, &from.chloglevel_,
    static_cast<size_t>(reinterpret_cast<char*>(&uireptime_) -
    reinterpret_cast<char*>(&chloglevel_)) + sizeof(uireptime_));
  // @@protoc_insertion_point(copy_constructor:MEProInterface.ST_MAINTAIN_LOG)
}

void ST_MAINTAIN_LOG::SharedCtor() {
  strhostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strlogcontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chloglevel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uireptime_) -
      reinterpret_cast<char*>(&chloglevel_)) + sizeof(uireptime_));
  _cached_size_ = 0;
}

ST_MAINTAIN_LOG::~ST_MAINTAIN_LOG() {
  // @@protoc_insertion_point(destructor:MEProInterface.ST_MAINTAIN_LOG)
  SharedDtor();
}

void ST_MAINTAIN_LOG::SharedDtor() {
  strhostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strlogcontent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ST_MAINTAIN_LOG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_MAINTAIN_LOG::descriptor() {
  ::protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_MAINTAIN_LOG& ST_MAINTAIN_LOG::default_instance() {
  ::protobuf_subscription_2eproto::InitDefaultsST_MAINTAIN_LOG();
  return *internal_default_instance();
}


void ST_MAINTAIN_LOG::Clear() {
// @@protoc_insertion_point(message_clear_start:MEProInterface.ST_MAINTAIN_LOG)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strhostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strlogcontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chloglevel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uireptime_) -
      reinterpret_cast<char*>(&chloglevel_)) + sizeof(uireptime_));
  _internal_metadata_.Clear();
}

bool ST_MAINTAIN_LOG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MEProInterface.ST_MAINTAIN_LOG)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strHostName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strhostname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strhostname().data(), static_cast<int>(this->strhostname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MEProInterface.ST_MAINTAIN_LOG.strHostName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 chLogLevel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chloglevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 chModuleIndex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chmoduleindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 uiRepTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uireptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strLogContent = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strlogcontent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strlogcontent().data(), static_cast<int>(this->strlogcontent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MEProInterface.ST_MAINTAIN_LOG.strLogContent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MEProInterface.ST_MAINTAIN_LOG)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MEProInterface.ST_MAINTAIN_LOG)
  return false;
#undef DO_
}

void ST_MAINTAIN_LOG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MEProInterface.ST_MAINTAIN_LOG)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string strHostName = 1;
  if (this->strhostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strhostname().data(), static_cast<int>(this->strhostname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEProInterface.ST_MAINTAIN_LOG.strHostName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strhostname(), output);
  }

  // uint32 chLogLevel = 2;
  if (this->chloglevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->chloglevel(), output);
  }

  // uint32 chModuleIndex = 3;
  if (this->chmoduleindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->chmoduleindex(), output);
  }

  // uint64 uiRepTime = 4;
  if (this->uireptime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->uireptime(), output);
  }

  // string strLogContent = 5;
  if (this->strlogcontent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strlogcontent().data(), static_cast<int>(this->strlogcontent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEProInterface.ST_MAINTAIN_LOG.strLogContent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->strlogcontent(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MEProInterface.ST_MAINTAIN_LOG)
}

::google::protobuf::uint8* ST_MAINTAIN_LOG::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MEProInterface.ST_MAINTAIN_LOG)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string strHostName = 1;
  if (this->strhostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strhostname().data(), static_cast<int>(this->strhostname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEProInterface.ST_MAINTAIN_LOG.strHostName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strhostname(), target);
  }

  // uint32 chLogLevel = 2;
  if (this->chloglevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->chloglevel(), target);
  }

  // uint32 chModuleIndex = 3;
  if (this->chmoduleindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->chmoduleindex(), target);
  }

  // uint64 uiRepTime = 4;
  if (this->uireptime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->uireptime(), target);
  }

  // string strLogContent = 5;
  if (this->strlogcontent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strlogcontent().data(), static_cast<int>(this->strlogcontent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEProInterface.ST_MAINTAIN_LOG.strLogContent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->strlogcontent(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MEProInterface.ST_MAINTAIN_LOG)
  return target;
}

size_t ST_MAINTAIN_LOG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MEProInterface.ST_MAINTAIN_LOG)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string strHostName = 1;
  if (this->strhostname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strhostname());
  }

  // string strLogContent = 5;
  if (this->strlogcontent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strlogcontent());
  }

  // uint32 chLogLevel = 2;
  if (this->chloglevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chloglevel());
  }

  // uint32 chModuleIndex = 3;
  if (this->chmoduleindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chmoduleindex());
  }

  // uint64 uiRepTime = 4;
  if (this->uireptime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uireptime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_MAINTAIN_LOG::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MEProInterface.ST_MAINTAIN_LOG)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_MAINTAIN_LOG* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_MAINTAIN_LOG>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MEProInterface.ST_MAINTAIN_LOG)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MEProInterface.ST_MAINTAIN_LOG)
    MergeFrom(*source);
  }
}

void ST_MAINTAIN_LOG::MergeFrom(const ST_MAINTAIN_LOG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MEProInterface.ST_MAINTAIN_LOG)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strhostname().size() > 0) {

    strhostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strhostname_);
  }
  if (from.strlogcontent().size() > 0) {

    strlogcontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strlogcontent_);
  }
  if (from.chloglevel() != 0) {
    set_chloglevel(from.chloglevel());
  }
  if (from.chmoduleindex() != 0) {
    set_chmoduleindex(from.chmoduleindex());
  }
  if (from.uireptime() != 0) {
    set_uireptime(from.uireptime());
  }
}

void ST_MAINTAIN_LOG::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MEProInterface.ST_MAINTAIN_LOG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_MAINTAIN_LOG::CopyFrom(const ST_MAINTAIN_LOG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MEProInterface.ST_MAINTAIN_LOG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_MAINTAIN_LOG::IsInitialized() const {
  return true;
}

void ST_MAINTAIN_LOG::Swap(ST_MAINTAIN_LOG* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_MAINTAIN_LOG::InternalSwap(ST_MAINTAIN_LOG* other) {
  using std::swap;
  strhostname_.Swap(&other->strhostname_);
  strlogcontent_.Swap(&other->strlogcontent_);
  swap(chloglevel_, other->chloglevel_);
  swap(chmoduleindex_, other->chmoduleindex_);
  swap(uireptime_, other->uireptime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_MAINTAIN_LOG::GetMetadata() const {
  protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IntervalMsgHeader::InitAsDefaultInstance() {
  ::MEProInterface::_IntervalMsgHeader_default_instance_.stuserlogin_ = const_cast< ::MEProInterface::ST_USER_LOGIN_INFO*>(
      ::MEProInterface::ST_USER_LOGIN_INFO::internal_default_instance());
  ::MEProInterface::_IntervalMsgHeader_default_instance_.stloginresp_ = const_cast< ::MEProInterface::ST_USER_LOGIN_RESP*>(
      ::MEProInterface::ST_USER_LOGIN_RESP::internal_default_instance());
  ::MEProInterface::_IntervalMsgHeader_default_instance_.stsubmitorder_ = const_cast< ::MEProInterface::ST_SUBMIT_ORDER*>(
      ::MEProInterface::ST_SUBMIT_ORDER::internal_default_instance());
  ::MEProInterface::_IntervalMsgHeader_default_instance_.stcancelorder_ = const_cast< ::MEProInterface::ST_SUBMIT_CAMCEL_ORDER*>(
      ::MEProInterface::ST_SUBMIT_CAMCEL_ORDER::internal_default_instance());
  ::MEProInterface::_IntervalMsgHeader_default_instance_.storderresp_ = const_cast< ::MEProInterface::ST_SUBMIT_ORDER_RESP*>(
      ::MEProInterface::ST_SUBMIT_ORDER_RESP::internal_default_instance());
  ::MEProInterface::_IntervalMsgHeader_default_instance_.stqueryorder_ = const_cast< ::MEProInterface::ST_QUERY_ORDER_INFO*>(
      ::MEProInterface::ST_QUERY_ORDER_INFO::internal_default_instance());
  ::MEProInterface::_IntervalMsgHeader_default_instance_.stqueryresp_ = const_cast< ::MEProInterface::ST_QUERY_ORDER_RES*>(
      ::MEProInterface::ST_QUERY_ORDER_RES::internal_default_instance());
  ::MEProInterface::_IntervalMsgHeader_default_instance_.sttransorder_ = const_cast< ::MEProInterface::ST_TRANS_ORDER_INFO*>(
      ::MEProInterface::ST_TRANS_ORDER_INFO::internal_default_instance());
  ::MEProInterface::_IntervalMsgHeader_default_instance_.stmarketdata_ = const_cast< ::MEProInterface::ST_MART_QUOTATION*>(
      ::MEProInterface::ST_MART_QUOTATION::internal_default_instance());
  ::MEProInterface::_IntervalMsgHeader_default_instance_.streptransreq_ = const_cast< ::MEProInterface::ST_REP_TRANS_ORDER_REQUEST*>(
      ::MEProInterface::ST_REP_TRANS_ORDER_REQUEST::internal_default_instance());
  ::MEProInterface::_IntervalMsgHeader_default_instance_.stsubcriuserlogin_ = const_cast< ::MEProInterface::ST_USER_LOGIN_INFO*>(
      ::MEProInterface::ST_USER_LOGIN_INFO::internal_default_instance());
  ::MEProInterface::_IntervalMsgHeader_default_instance_.stqueryhistoryorder_ = const_cast< ::MEProInterface::ST_QUERY_ORDER_INFO*>(
      ::MEProInterface::ST_QUERY_ORDER_INFO::internal_default_instance());
  ::MEProInterface::_IntervalMsgHeader_default_instance_.stmarketorderbook_ = const_cast< ::MEProInterface::ST_MARKET_ORDERBOOK*>(
      ::MEProInterface::ST_MARKET_ORDERBOOK::internal_default_instance());
  ::MEProInterface::_IntervalMsgHeader_default_instance_.stmaintainlog_ = const_cast< ::MEProInterface::ST_MAINTAIN_LOG*>(
      ::MEProInterface::ST_MAINTAIN_LOG::internal_default_instance());
}
void IntervalMsgHeader::set_allocated_stuserlogin(::MEProInterface::ST_USER_LOGIN_INFO* stuserlogin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MsgBody();
  if (stuserlogin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stuserlogin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stuserlogin, submessage_arena);
    }
    set_has_stuserlogin();
    MsgBody_.stuserlogin_ = stuserlogin;
  }
  // @@protoc_insertion_point(field_set_allocated:MEProInterface.IntervalMsgHeader.stUserLogin)
}
void IntervalMsgHeader::set_allocated_stloginresp(::MEProInterface::ST_USER_LOGIN_RESP* stloginresp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MsgBody();
  if (stloginresp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stloginresp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stloginresp, submessage_arena);
    }
    set_has_stloginresp();
    MsgBody_.stloginresp_ = stloginresp;
  }
  // @@protoc_insertion_point(field_set_allocated:MEProInterface.IntervalMsgHeader.stLoginResp)
}
void IntervalMsgHeader::set_allocated_stsubmitorder(::MEProInterface::ST_SUBMIT_ORDER* stsubmitorder) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MsgBody();
  if (stsubmitorder) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stsubmitorder = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stsubmitorder, submessage_arena);
    }
    set_has_stsubmitorder();
    MsgBody_.stsubmitorder_ = stsubmitorder;
  }
  // @@protoc_insertion_point(field_set_allocated:MEProInterface.IntervalMsgHeader.stSubmitOrder)
}
void IntervalMsgHeader::set_allocated_stcancelorder(::MEProInterface::ST_SUBMIT_CAMCEL_ORDER* stcancelorder) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MsgBody();
  if (stcancelorder) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stcancelorder = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stcancelorder, submessage_arena);
    }
    set_has_stcancelorder();
    MsgBody_.stcancelorder_ = stcancelorder;
  }
  // @@protoc_insertion_point(field_set_allocated:MEProInterface.IntervalMsgHeader.stCancelOrder)
}
void IntervalMsgHeader::set_allocated_storderresp(::MEProInterface::ST_SUBMIT_ORDER_RESP* storderresp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MsgBody();
  if (storderresp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      storderresp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, storderresp, submessage_arena);
    }
    set_has_storderresp();
    MsgBody_.storderresp_ = storderresp;
  }
  // @@protoc_insertion_point(field_set_allocated:MEProInterface.IntervalMsgHeader.stOrderResp)
}
void IntervalMsgHeader::set_allocated_stqueryorder(::MEProInterface::ST_QUERY_ORDER_INFO* stqueryorder) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MsgBody();
  if (stqueryorder) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stqueryorder = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stqueryorder, submessage_arena);
    }
    set_has_stqueryorder();
    MsgBody_.stqueryorder_ = stqueryorder;
  }
  // @@protoc_insertion_point(field_set_allocated:MEProInterface.IntervalMsgHeader.stQueryOrder)
}
void IntervalMsgHeader::set_allocated_stqueryresp(::MEProInterface::ST_QUERY_ORDER_RES* stqueryresp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MsgBody();
  if (stqueryresp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stqueryresp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stqueryresp, submessage_arena);
    }
    set_has_stqueryresp();
    MsgBody_.stqueryresp_ = stqueryresp;
  }
  // @@protoc_insertion_point(field_set_allocated:MEProInterface.IntervalMsgHeader.stQueryResp)
}
void IntervalMsgHeader::set_allocated_sttransorder(::MEProInterface::ST_TRANS_ORDER_INFO* sttransorder) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MsgBody();
  if (sttransorder) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sttransorder = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sttransorder, submessage_arena);
    }
    set_has_sttransorder();
    MsgBody_.sttransorder_ = sttransorder;
  }
  // @@protoc_insertion_point(field_set_allocated:MEProInterface.IntervalMsgHeader.stTransOrder)
}
void IntervalMsgHeader::set_allocated_stmarketdata(::MEProInterface::ST_MART_QUOTATION* stmarketdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MsgBody();
  if (stmarketdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stmarketdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stmarketdata, submessage_arena);
    }
    set_has_stmarketdata();
    MsgBody_.stmarketdata_ = stmarketdata;
  }
  // @@protoc_insertion_point(field_set_allocated:MEProInterface.IntervalMsgHeader.stMarketData)
}
void IntervalMsgHeader::set_allocated_streptransreq(::MEProInterface::ST_REP_TRANS_ORDER_REQUEST* streptransreq) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MsgBody();
  if (streptransreq) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      streptransreq = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, streptransreq, submessage_arena);
    }
    set_has_streptransreq();
    MsgBody_.streptransreq_ = streptransreq;
  }
  // @@protoc_insertion_point(field_set_allocated:MEProInterface.IntervalMsgHeader.stReptransReq)
}
void IntervalMsgHeader::set_allocated_stsubcriuserlogin(::MEProInterface::ST_USER_LOGIN_INFO* stsubcriuserlogin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MsgBody();
  if (stsubcriuserlogin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stsubcriuserlogin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stsubcriuserlogin, submessage_arena);
    }
    set_has_stsubcriuserlogin();
    MsgBody_.stsubcriuserlogin_ = stsubcriuserlogin;
  }
  // @@protoc_insertion_point(field_set_allocated:MEProInterface.IntervalMsgHeader.stSubcriUserLogin)
}
void IntervalMsgHeader::set_allocated_stqueryhistoryorder(::MEProInterface::ST_QUERY_ORDER_INFO* stqueryhistoryorder) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MsgBody();
  if (stqueryhistoryorder) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stqueryhistoryorder = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stqueryhistoryorder, submessage_arena);
    }
    set_has_stqueryhistoryorder();
    MsgBody_.stqueryhistoryorder_ = stqueryhistoryorder;
  }
  // @@protoc_insertion_point(field_set_allocated:MEProInterface.IntervalMsgHeader.stQueryHistoryOrder)
}
void IntervalMsgHeader::set_allocated_stmarketorderbook(::MEProInterface::ST_MARKET_ORDERBOOK* stmarketorderbook) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MsgBody();
  if (stmarketorderbook) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stmarketorderbook = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stmarketorderbook, submessage_arena);
    }
    set_has_stmarketorderbook();
    MsgBody_.stmarketorderbook_ = stmarketorderbook;
  }
  // @@protoc_insertion_point(field_set_allocated:MEProInterface.IntervalMsgHeader.stMarketOrderBook)
}
void IntervalMsgHeader::set_allocated_stmaintainlog(::MEProInterface::ST_MAINTAIN_LOG* stmaintainlog) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MsgBody();
  if (stmaintainlog) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stmaintainlog = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stmaintainlog, submessage_arena);
    }
    set_has_stmaintainlog();
    MsgBody_.stmaintainlog_ = stmaintainlog;
  }
  // @@protoc_insertion_point(field_set_allocated:MEProInterface.IntervalMsgHeader.stMaintainLog)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntervalMsgHeader::kIFlowNumberFieldNumber;
const int IntervalMsgHeader::kICmdFieldNumber;
const int IntervalMsgHeader::kIMsgTypeFieldNumber;
const int IntervalMsgHeader::kStUserLoginFieldNumber;
const int IntervalMsgHeader::kStLoginRespFieldNumber;
const int IntervalMsgHeader::kStSubmitOrderFieldNumber;
const int IntervalMsgHeader::kStCancelOrderFieldNumber;
const int IntervalMsgHeader::kStOrderRespFieldNumber;
const int IntervalMsgHeader::kStQueryOrderFieldNumber;
const int IntervalMsgHeader::kStQueryRespFieldNumber;
const int IntervalMsgHeader::kStTransOrderFieldNumber;
const int IntervalMsgHeader::kStMarketDataFieldNumber;
const int IntervalMsgHeader::kStReptransReqFieldNumber;
const int IntervalMsgHeader::kStSubcriUserLoginFieldNumber;
const int IntervalMsgHeader::kStQueryHistoryOrderFieldNumber;
const int IntervalMsgHeader::kStMarketOrderBookFieldNumber;
const int IntervalMsgHeader::kStMaintainLogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntervalMsgHeader::IntervalMsgHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_subscription_2eproto::InitDefaultsIntervalMsgHeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MEProInterface.IntervalMsgHeader)
}
IntervalMsgHeader::IntervalMsgHeader(const IntervalMsgHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&iflownumber_, &from.iflownumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&imsgtype_) -
    reinterpret_cast<char*>(&iflownumber_)) + sizeof(imsgtype_));
  clear_has_MsgBody();
  switch (from.MsgBody_case()) {
    case kStUserLogin: {
      mutable_stuserlogin()->::MEProInterface::ST_USER_LOGIN_INFO::MergeFrom(from.stuserlogin());
      break;
    }
    case kStLoginResp: {
      mutable_stloginresp()->::MEProInterface::ST_USER_LOGIN_RESP::MergeFrom(from.stloginresp());
      break;
    }
    case kStSubmitOrder: {
      mutable_stsubmitorder()->::MEProInterface::ST_SUBMIT_ORDER::MergeFrom(from.stsubmitorder());
      break;
    }
    case kStCancelOrder: {
      mutable_stcancelorder()->::MEProInterface::ST_SUBMIT_CAMCEL_ORDER::MergeFrom(from.stcancelorder());
      break;
    }
    case kStOrderResp: {
      mutable_storderresp()->::MEProInterface::ST_SUBMIT_ORDER_RESP::MergeFrom(from.storderresp());
      break;
    }
    case kStQueryOrder: {
      mutable_stqueryorder()->::MEProInterface::ST_QUERY_ORDER_INFO::MergeFrom(from.stqueryorder());
      break;
    }
    case kStQueryResp: {
      mutable_stqueryresp()->::MEProInterface::ST_QUERY_ORDER_RES::MergeFrom(from.stqueryresp());
      break;
    }
    case kStTransOrder: {
      mutable_sttransorder()->::MEProInterface::ST_TRANS_ORDER_INFO::MergeFrom(from.sttransorder());
      break;
    }
    case kStMarketData: {
      mutable_stmarketdata()->::MEProInterface::ST_MART_QUOTATION::MergeFrom(from.stmarketdata());
      break;
    }
    case kStReptransReq: {
      mutable_streptransreq()->::MEProInterface::ST_REP_TRANS_ORDER_REQUEST::MergeFrom(from.streptransreq());
      break;
    }
    case kStSubcriUserLogin: {
      mutable_stsubcriuserlogin()->::MEProInterface::ST_USER_LOGIN_INFO::MergeFrom(from.stsubcriuserlogin());
      break;
    }
    case kStQueryHistoryOrder: {
      mutable_stqueryhistoryorder()->::MEProInterface::ST_QUERY_ORDER_INFO::MergeFrom(from.stqueryhistoryorder());
      break;
    }
    case kStMarketOrderBook: {
      mutable_stmarketorderbook()->::MEProInterface::ST_MARKET_ORDERBOOK::MergeFrom(from.stmarketorderbook());
      break;
    }
    case kStMaintainLog: {
      mutable_stmaintainlog()->::MEProInterface::ST_MAINTAIN_LOG::MergeFrom(from.stmaintainlog());
      break;
    }
    case MSGBODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:MEProInterface.IntervalMsgHeader)
}

void IntervalMsgHeader::SharedCtor() {
  ::memset(&iflownumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imsgtype_) -
      reinterpret_cast<char*>(&iflownumber_)) + sizeof(imsgtype_));
  clear_has_MsgBody();
  _cached_size_ = 0;
}

IntervalMsgHeader::~IntervalMsgHeader() {
  // @@protoc_insertion_point(destructor:MEProInterface.IntervalMsgHeader)
  SharedDtor();
}

void IntervalMsgHeader::SharedDtor() {
  if (has_MsgBody()) {
    clear_MsgBody();
  }
}

void IntervalMsgHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntervalMsgHeader::descriptor() {
  ::protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IntervalMsgHeader& IntervalMsgHeader::default_instance() {
  ::protobuf_subscription_2eproto::InitDefaultsIntervalMsgHeader();
  return *internal_default_instance();
}


void IntervalMsgHeader::clear_MsgBody() {
// @@protoc_insertion_point(one_of_clear_start:MEProInterface.IntervalMsgHeader)
  switch (MsgBody_case()) {
    case kStUserLogin: {
      delete MsgBody_.stuserlogin_;
      break;
    }
    case kStLoginResp: {
      delete MsgBody_.stloginresp_;
      break;
    }
    case kStSubmitOrder: {
      delete MsgBody_.stsubmitorder_;
      break;
    }
    case kStCancelOrder: {
      delete MsgBody_.stcancelorder_;
      break;
    }
    case kStOrderResp: {
      delete MsgBody_.storderresp_;
      break;
    }
    case kStQueryOrder: {
      delete MsgBody_.stqueryorder_;
      break;
    }
    case kStQueryResp: {
      delete MsgBody_.stqueryresp_;
      break;
    }
    case kStTransOrder: {
      delete MsgBody_.sttransorder_;
      break;
    }
    case kStMarketData: {
      delete MsgBody_.stmarketdata_;
      break;
    }
    case kStReptransReq: {
      delete MsgBody_.streptransreq_;
      break;
    }
    case kStSubcriUserLogin: {
      delete MsgBody_.stsubcriuserlogin_;
      break;
    }
    case kStQueryHistoryOrder: {
      delete MsgBody_.stqueryhistoryorder_;
      break;
    }
    case kStMarketOrderBook: {
      delete MsgBody_.stmarketorderbook_;
      break;
    }
    case kStMaintainLog: {
      delete MsgBody_.stmaintainlog_;
      break;
    }
    case MSGBODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSGBODY_NOT_SET;
}


void IntervalMsgHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:MEProInterface.IntervalMsgHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&iflownumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imsgtype_) -
      reinterpret_cast<char*>(&iflownumber_)) + sizeof(imsgtype_));
  clear_MsgBody();
  _internal_metadata_.Clear();
}

bool IntervalMsgHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MEProInterface.IntervalMsgHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 iFlowNumber = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iflownumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 iCmd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 iMsgType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imsgtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MEProInterface.ST_USER_LOGIN_INFO stUserLogin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stuserlogin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MEProInterface.ST_USER_LOGIN_RESP stLoginResp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stloginresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MEProInterface.ST_SUBMIT_ORDER stSubmitOrder = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stsubmitorder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MEProInterface.ST_SUBMIT_CAMCEL_ORDER stCancelOrder = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stcancelorder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MEProInterface.ST_SUBMIT_ORDER_RESP stOrderResp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_storderresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MEProInterface.ST_QUERY_ORDER_INFO stQueryOrder = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stqueryorder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MEProInterface.ST_QUERY_ORDER_RES stQueryResp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stqueryresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MEProInterface.ST_TRANS_ORDER_INFO stTransOrder = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sttransorder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MEProInterface.ST_MART_QUOTATION stMarketData = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stmarketdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MEProInterface.ST_REP_TRANS_ORDER_REQUEST stReptransReq = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_streptransreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MEProInterface.ST_USER_LOGIN_INFO stSubcriUserLogin = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stsubcriuserlogin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MEProInterface.ST_QUERY_ORDER_INFO stQueryHistoryOrder = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stqueryhistoryorder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MEProInterface.ST_MARKET_ORDERBOOK stMarketOrderBook = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stmarketorderbook()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MEProInterface.ST_MAINTAIN_LOG stMaintainLog = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stmaintainlog()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MEProInterface.IntervalMsgHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MEProInterface.IntervalMsgHeader)
  return false;
#undef DO_
}

void IntervalMsgHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MEProInterface.IntervalMsgHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iFlowNumber = 1;
  if (this->iflownumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iflownumber(), output);
  }

  // int32 iCmd = 2;
  if (this->icmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->icmd(), output);
  }

  // int32 iMsgType = 3;
  if (this->imsgtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->imsgtype(), output);
  }

  // .MEProInterface.ST_USER_LOGIN_INFO stUserLogin = 4;
  if (has_stuserlogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *MsgBody_.stuserlogin_, output);
  }

  // .MEProInterface.ST_USER_LOGIN_RESP stLoginResp = 5;
  if (has_stloginresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *MsgBody_.stloginresp_, output);
  }

  // .MEProInterface.ST_SUBMIT_ORDER stSubmitOrder = 6;
  if (has_stsubmitorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *MsgBody_.stsubmitorder_, output);
  }

  // .MEProInterface.ST_SUBMIT_CAMCEL_ORDER stCancelOrder = 7;
  if (has_stcancelorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *MsgBody_.stcancelorder_, output);
  }

  // .MEProInterface.ST_SUBMIT_ORDER_RESP stOrderResp = 8;
  if (has_storderresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *MsgBody_.storderresp_, output);
  }

  // .MEProInterface.ST_QUERY_ORDER_INFO stQueryOrder = 9;
  if (has_stqueryorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *MsgBody_.stqueryorder_, output);
  }

  // .MEProInterface.ST_QUERY_ORDER_RES stQueryResp = 10;
  if (has_stqueryresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *MsgBody_.stqueryresp_, output);
  }

  // .MEProInterface.ST_TRANS_ORDER_INFO stTransOrder = 11;
  if (has_sttransorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *MsgBody_.sttransorder_, output);
  }

  // .MEProInterface.ST_MART_QUOTATION stMarketData = 12;
  if (has_stmarketdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *MsgBody_.stmarketdata_, output);
  }

  // .MEProInterface.ST_REP_TRANS_ORDER_REQUEST stReptransReq = 13;
  if (has_streptransreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *MsgBody_.streptransreq_, output);
  }

  // .MEProInterface.ST_USER_LOGIN_INFO stSubcriUserLogin = 14;
  if (has_stsubcriuserlogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *MsgBody_.stsubcriuserlogin_, output);
  }

  // .MEProInterface.ST_QUERY_ORDER_INFO stQueryHistoryOrder = 15;
  if (has_stqueryhistoryorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *MsgBody_.stqueryhistoryorder_, output);
  }

  // .MEProInterface.ST_MARKET_ORDERBOOK stMarketOrderBook = 16;
  if (has_stmarketorderbook()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *MsgBody_.stmarketorderbook_, output);
  }

  // .MEProInterface.ST_MAINTAIN_LOG stMaintainLog = 17;
  if (has_stmaintainlog()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *MsgBody_.stmaintainlog_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MEProInterface.IntervalMsgHeader)
}

::google::protobuf::uint8* IntervalMsgHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MEProInterface.IntervalMsgHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iFlowNumber = 1;
  if (this->iflownumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iflownumber(), target);
  }

  // int32 iCmd = 2;
  if (this->icmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->icmd(), target);
  }

  // int32 iMsgType = 3;
  if (this->imsgtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->imsgtype(), target);
  }

  // .MEProInterface.ST_USER_LOGIN_INFO stUserLogin = 4;
  if (has_stuserlogin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *MsgBody_.stuserlogin_, deterministic, target);
  }

  // .MEProInterface.ST_USER_LOGIN_RESP stLoginResp = 5;
  if (has_stloginresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *MsgBody_.stloginresp_, deterministic, target);
  }

  // .MEProInterface.ST_SUBMIT_ORDER stSubmitOrder = 6;
  if (has_stsubmitorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *MsgBody_.stsubmitorder_, deterministic, target);
  }

  // .MEProInterface.ST_SUBMIT_CAMCEL_ORDER stCancelOrder = 7;
  if (has_stcancelorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *MsgBody_.stcancelorder_, deterministic, target);
  }

  // .MEProInterface.ST_SUBMIT_ORDER_RESP stOrderResp = 8;
  if (has_storderresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *MsgBody_.storderresp_, deterministic, target);
  }

  // .MEProInterface.ST_QUERY_ORDER_INFO stQueryOrder = 9;
  if (has_stqueryorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *MsgBody_.stqueryorder_, deterministic, target);
  }

  // .MEProInterface.ST_QUERY_ORDER_RES stQueryResp = 10;
  if (has_stqueryresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *MsgBody_.stqueryresp_, deterministic, target);
  }

  // .MEProInterface.ST_TRANS_ORDER_INFO stTransOrder = 11;
  if (has_sttransorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *MsgBody_.sttransorder_, deterministic, target);
  }

  // .MEProInterface.ST_MART_QUOTATION stMarketData = 12;
  if (has_stmarketdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *MsgBody_.stmarketdata_, deterministic, target);
  }

  // .MEProInterface.ST_REP_TRANS_ORDER_REQUEST stReptransReq = 13;
  if (has_streptransreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, *MsgBody_.streptransreq_, deterministic, target);
  }

  // .MEProInterface.ST_USER_LOGIN_INFO stSubcriUserLogin = 14;
  if (has_stsubcriuserlogin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, *MsgBody_.stsubcriuserlogin_, deterministic, target);
  }

  // .MEProInterface.ST_QUERY_ORDER_INFO stQueryHistoryOrder = 15;
  if (has_stqueryhistoryorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, *MsgBody_.stqueryhistoryorder_, deterministic, target);
  }

  // .MEProInterface.ST_MARKET_ORDERBOOK stMarketOrderBook = 16;
  if (has_stmarketorderbook()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, *MsgBody_.stmarketorderbook_, deterministic, target);
  }

  // .MEProInterface.ST_MAINTAIN_LOG stMaintainLog = 17;
  if (has_stmaintainlog()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, *MsgBody_.stmaintainlog_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MEProInterface.IntervalMsgHeader)
  return target;
}

size_t IntervalMsgHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MEProInterface.IntervalMsgHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 iFlowNumber = 1;
  if (this->iflownumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->iflownumber());
  }

  // int32 iCmd = 2;
  if (this->icmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->icmd());
  }

  // int32 iMsgType = 3;
  if (this->imsgtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->imsgtype());
  }

  switch (MsgBody_case()) {
    // .MEProInterface.ST_USER_LOGIN_INFO stUserLogin = 4;
    case kStUserLogin: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MsgBody_.stuserlogin_);
      break;
    }
    // .MEProInterface.ST_USER_LOGIN_RESP stLoginResp = 5;
    case kStLoginResp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MsgBody_.stloginresp_);
      break;
    }
    // .MEProInterface.ST_SUBMIT_ORDER stSubmitOrder = 6;
    case kStSubmitOrder: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MsgBody_.stsubmitorder_);
      break;
    }
    // .MEProInterface.ST_SUBMIT_CAMCEL_ORDER stCancelOrder = 7;
    case kStCancelOrder: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MsgBody_.stcancelorder_);
      break;
    }
    // .MEProInterface.ST_SUBMIT_ORDER_RESP stOrderResp = 8;
    case kStOrderResp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MsgBody_.storderresp_);
      break;
    }
    // .MEProInterface.ST_QUERY_ORDER_INFO stQueryOrder = 9;
    case kStQueryOrder: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MsgBody_.stqueryorder_);
      break;
    }
    // .MEProInterface.ST_QUERY_ORDER_RES stQueryResp = 10;
    case kStQueryResp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MsgBody_.stqueryresp_);
      break;
    }
    // .MEProInterface.ST_TRANS_ORDER_INFO stTransOrder = 11;
    case kStTransOrder: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MsgBody_.sttransorder_);
      break;
    }
    // .MEProInterface.ST_MART_QUOTATION stMarketData = 12;
    case kStMarketData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MsgBody_.stmarketdata_);
      break;
    }
    // .MEProInterface.ST_REP_TRANS_ORDER_REQUEST stReptransReq = 13;
    case kStReptransReq: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MsgBody_.streptransreq_);
      break;
    }
    // .MEProInterface.ST_USER_LOGIN_INFO stSubcriUserLogin = 14;
    case kStSubcriUserLogin: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MsgBody_.stsubcriuserlogin_);
      break;
    }
    // .MEProInterface.ST_QUERY_ORDER_INFO stQueryHistoryOrder = 15;
    case kStQueryHistoryOrder: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MsgBody_.stqueryhistoryorder_);
      break;
    }
    // .MEProInterface.ST_MARKET_ORDERBOOK stMarketOrderBook = 16;
    case kStMarketOrderBook: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MsgBody_.stmarketorderbook_);
      break;
    }
    // .MEProInterface.ST_MAINTAIN_LOG stMaintainLog = 17;
    case kStMaintainLog: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MsgBody_.stmaintainlog_);
      break;
    }
    case MSGBODY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntervalMsgHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MEProInterface.IntervalMsgHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const IntervalMsgHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IntervalMsgHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MEProInterface.IntervalMsgHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MEProInterface.IntervalMsgHeader)
    MergeFrom(*source);
  }
}

void IntervalMsgHeader::MergeFrom(const IntervalMsgHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MEProInterface.IntervalMsgHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iflownumber() != 0) {
    set_iflownumber(from.iflownumber());
  }
  if (from.icmd() != 0) {
    set_icmd(from.icmd());
  }
  if (from.imsgtype() != 0) {
    set_imsgtype(from.imsgtype());
  }
  switch (from.MsgBody_case()) {
    case kStUserLogin: {
      mutable_stuserlogin()->::MEProInterface::ST_USER_LOGIN_INFO::MergeFrom(from.stuserlogin());
      break;
    }
    case kStLoginResp: {
      mutable_stloginresp()->::MEProInterface::ST_USER_LOGIN_RESP::MergeFrom(from.stloginresp());
      break;
    }
    case kStSubmitOrder: {
      mutable_stsubmitorder()->::MEProInterface::ST_SUBMIT_ORDER::MergeFrom(from.stsubmitorder());
      break;
    }
    case kStCancelOrder: {
      mutable_stcancelorder()->::MEProInterface::ST_SUBMIT_CAMCEL_ORDER::MergeFrom(from.stcancelorder());
      break;
    }
    case kStOrderResp: {
      mutable_storderresp()->::MEProInterface::ST_SUBMIT_ORDER_RESP::MergeFrom(from.storderresp());
      break;
    }
    case kStQueryOrder: {
      mutable_stqueryorder()->::MEProInterface::ST_QUERY_ORDER_INFO::MergeFrom(from.stqueryorder());
      break;
    }
    case kStQueryResp: {
      mutable_stqueryresp()->::MEProInterface::ST_QUERY_ORDER_RES::MergeFrom(from.stqueryresp());
      break;
    }
    case kStTransOrder: {
      mutable_sttransorder()->::MEProInterface::ST_TRANS_ORDER_INFO::MergeFrom(from.sttransorder());
      break;
    }
    case kStMarketData: {
      mutable_stmarketdata()->::MEProInterface::ST_MART_QUOTATION::MergeFrom(from.stmarketdata());
      break;
    }
    case kStReptransReq: {
      mutable_streptransreq()->::MEProInterface::ST_REP_TRANS_ORDER_REQUEST::MergeFrom(from.streptransreq());
      break;
    }
    case kStSubcriUserLogin: {
      mutable_stsubcriuserlogin()->::MEProInterface::ST_USER_LOGIN_INFO::MergeFrom(from.stsubcriuserlogin());
      break;
    }
    case kStQueryHistoryOrder: {
      mutable_stqueryhistoryorder()->::MEProInterface::ST_QUERY_ORDER_INFO::MergeFrom(from.stqueryhistoryorder());
      break;
    }
    case kStMarketOrderBook: {
      mutable_stmarketorderbook()->::MEProInterface::ST_MARKET_ORDERBOOK::MergeFrom(from.stmarketorderbook());
      break;
    }
    case kStMaintainLog: {
      mutable_stmaintainlog()->::MEProInterface::ST_MAINTAIN_LOG::MergeFrom(from.stmaintainlog());
      break;
    }
    case MSGBODY_NOT_SET: {
      break;
    }
  }
}

void IntervalMsgHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MEProInterface.IntervalMsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntervalMsgHeader::CopyFrom(const IntervalMsgHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MEProInterface.IntervalMsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntervalMsgHeader::IsInitialized() const {
  return true;
}

void IntervalMsgHeader::Swap(IntervalMsgHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntervalMsgHeader::InternalSwap(IntervalMsgHeader* other) {
  using std::swap;
  swap(iflownumber_, other->iflownumber_);
  swap(icmd_, other->icmd_);
  swap(imsgtype_, other->imsgtype_);
  swap(MsgBody_, other->MsgBody_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IntervalMsgHeader::GetMetadata() const {
  protobuf_subscription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MEProInterface
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MEProInterface::ST_USER_LOGIN_INFO* Arena::Create< ::MEProInterface::ST_USER_LOGIN_INFO >(Arena* arena) {
  return Arena::CreateInternal< ::MEProInterface::ST_USER_LOGIN_INFO >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MEProInterface::ST_SIG_IP_INFO* Arena::Create< ::MEProInterface::ST_SIG_IP_INFO >(Arena* arena) {
  return Arena::CreateInternal< ::MEProInterface::ST_SIG_IP_INFO >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MEProInterface::ST_SYMBOL_INFO* Arena::Create< ::MEProInterface::ST_SYMBOL_INFO >(Arena* arena) {
  return Arena::CreateInternal< ::MEProInterface::ST_SYMBOL_INFO >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MEProInterface::ST_USER_LOGIN_RESP* Arena::Create< ::MEProInterface::ST_USER_LOGIN_RESP >(Arena* arena) {
  return Arena::CreateInternal< ::MEProInterface::ST_USER_LOGIN_RESP >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MEProInterface::ST_SUBMIT_ORDER* Arena::Create< ::MEProInterface::ST_SUBMIT_ORDER >(Arena* arena) {
  return Arena::CreateInternal< ::MEProInterface::ST_SUBMIT_ORDER >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MEProInterface::ST_SUBMIT_CAMCEL_ORDER* Arena::Create< ::MEProInterface::ST_SUBMIT_CAMCEL_ORDER >(Arena* arena) {
  return Arena::CreateInternal< ::MEProInterface::ST_SUBMIT_CAMCEL_ORDER >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MEProInterface::ST_SUBMIT_ORDER_RESP* Arena::Create< ::MEProInterface::ST_SUBMIT_ORDER_RESP >(Arena* arena) {
  return Arena::CreateInternal< ::MEProInterface::ST_SUBMIT_ORDER_RESP >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MEProInterface::ST_TRANS_ORDER_INFO* Arena::Create< ::MEProInterface::ST_TRANS_ORDER_INFO >(Arena* arena) {
  return Arena::CreateInternal< ::MEProInterface::ST_TRANS_ORDER_INFO >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MEProInterface::ST_REP_TRANS_ORDER_REQUEST* Arena::Create< ::MEProInterface::ST_REP_TRANS_ORDER_REQUEST >(Arena* arena) {
  return Arena::CreateInternal< ::MEProInterface::ST_REP_TRANS_ORDER_REQUEST >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MEProInterface::ST_QUERY_ORDER_INFO* Arena::Create< ::MEProInterface::ST_QUERY_ORDER_INFO >(Arena* arena) {
  return Arena::CreateInternal< ::MEProInterface::ST_QUERY_ORDER_INFO >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MEProInterface::ST_QUERY_ORDER_RES* Arena::Create< ::MEProInterface::ST_QUERY_ORDER_RES >(Arena* arena) {
  return Arena::CreateInternal< ::MEProInterface::ST_QUERY_ORDER_RES >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MEProInterface::ST_MART_QUOTATION* Arena::Create< ::MEProInterface::ST_MART_QUOTATION >(Arena* arena) {
  return Arena::CreateInternal< ::MEProInterface::ST_MART_QUOTATION >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MEProInterface::ST_SIG_ORDER_INFO* Arena::Create< ::MEProInterface::ST_SIG_ORDER_INFO >(Arena* arena) {
  return Arena::CreateInternal< ::MEProInterface::ST_SIG_ORDER_INFO >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MEProInterface::ST_MARKET_ORDERBOOK* Arena::Create< ::MEProInterface::ST_MARKET_ORDERBOOK >(Arena* arena) {
  return Arena::CreateInternal< ::MEProInterface::ST_MARKET_ORDERBOOK >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MEProInterface::ST_MAINTAIN_LOG* Arena::Create< ::MEProInterface::ST_MAINTAIN_LOG >(Arena* arena) {
  return Arena::CreateInternal< ::MEProInterface::ST_MAINTAIN_LOG >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MEProInterface::IntervalMsgHeader* Arena::Create< ::MEProInterface::IntervalMsgHeader >(Arena* arena) {
  return Arena::CreateInternal< ::MEProInterface::IntervalMsgHeader >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
