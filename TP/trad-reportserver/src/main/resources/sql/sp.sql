DELIMITER // 
DROP PROCEDURE IF EXISTS `AddUser` //
CREATE PROCEDURE `AddUser`(IN LOGIN int, IN `GROUP` char(16), IN `ENABLE` int, IN ENABLE_CHANGE_PASS int, IN ENABLE_READONLY int, 
	IN ENABLE_OTP int, IN PASSWORD_PHONE char(32), IN `NAME` char(128), IN COUNTRY char(32), IN CITY char(32), 
	IN `STATE` char(32), IN ZIPCODE char(16), IN ADDRESS char(128), IN LEAD_SOURCE char(32), IN PHONE char(32),
	IN EMAIL char(48), IN `COMMENT` char(64), IN ID char(32), IN `STATUS` char(16), IN REGDATE datetime, 
	IN LASTDATE datetime, IN LEVERAGE int, IN AGENT_ACCOUNT int, IN `TIMESTAMP` int, IN BALANCE double,
	IN PREVMONTHBALANCE double, IN PREVBALANCE double, IN CREDIT double, IN INTERESTRATE double, IN TAXES double, 
	IN SEND_REPORTS int, IN MQID int, IN USER_COLOR int, IN EQUITY double, IN MARGIN double,
	IN MARGIN_LEVEL double, IN MARGIN_FREE double, IN CURRENCY char(16), IN API_DATA blob, IN MODIFY_TIME datetime )
	BEGIN
		DECLARE STATUSCODE INT DEFAULT 400 ;
		INSERT INTO MT4_USERS(
			LOGIN, `GROUP`, ENABLE, ENABLE_CHANGE_PASS, ENABLE_READONLY,
			ENABLE_OTP, PASSWORD_PHONE, NAME, COUNTRY, CITY,
			STATE, ZIPCODE, ADDRESS, LEAD_SOURCE, PHONE,
			EMAIL, `COMMENT`, ID, STATUS, REGDATE, 
			LASTDATE, LEVERAGE, AGENT_ACCOUNT, `TIMESTAMP`, BALANCE,
			PREVMONTHBALANCE, PREVBALANCE, CREDIT, INTERESTRATE, TAXES,
			SEND_REPORTS, MQID, USER_COLOR, EQUITY, MARGIN,
			MARGIN_LEVEL, MARGIN_FREE, CURRENCY, API_DATA, MODIFY_TIME
		) 
		VALUES(
			LOGIN, `GROUP`, ENABLE, ENABLE_CHANGE_PASS, ENABLE_READONLY,
			ENABLE_OTP, PASSWORD_PHONE, NAME, COUNTRY, CITY,
			STATE, ZIPCODE, ADDRESS, LEAD_SOURCE, PHONE, 
			EMAIL, `COMMENT`, ID, STATUS, REGDATE,
			LASTDATE, LEVERAGE, AGENT_ACCOUNT, `TIMESTAMP`, BALANCE,
			PREVMONTHBALANCE, PREVBALANCE, CREDIT, INTERESTRATE, TAXES,
			SEND_REPORTS, MQID, USER_COLOR, EQUITY, MARGIN,
			MARGIN_LEVEL, MARGIN_FREE, CURRENCY, API_DATA, MODIFY_TIME
		);
		SET STATUSCODE = 200;
		SELECT STATUSCODE;
	END;
	//
DELIMITER ;


DELIMITER //
DROP PROCEDURE IF EXISTS `AddPrice` //
CREATE PROCEDURE `AddPrice`(
	IN SYMBOL CHAR(16), IN `TIME` DATETIME, IN BID DOUBLE, IN ASK DOUBLE, IN LOW DOUBLE,
	IN HIGH DOUBLE, IN DIRECTION INT, IN DIGITS INT, IN SPREAD INT, IN MODIFY_TIME DATETIME
)
BEGIN
		DECLARE STATUSCODE INT DEFAULT 400 ;
		INSERT INTO MT4_PRICES(
			SYMBOL, `TIME`, BID, ASK, LOW, HIGH, DIRECTION, DIGITS, SPREAD, MODIFY_TIME
		) 
		VALUES(
			SYMBOL, `TIME`, BID, ASK, LOW, HIGH, DIRECTION, DIGITS, SPREAD, MODIFY_TIME
		);
		SET STATUSCODE = 200;
		SELECT STATUSCODE;
	END
//
DELIMITER ;

DELIMITER // 
DROP PROCEDURE IF EXISTS `AddTrade` //
CREATE PROCEDURE `AddTrade`(IN TICKET int, IN LOGIN int, IN SYMBOL char(16), IN DIGITS int, IN CMD int, 
	IN VOLUME int, IN OPEN_TIME datetime, IN OPEN_PRICE double, IN SL double, IN TP double, 
	IN CLOSE_TIME datetime, IN EXPIRATION datetime, IN REASON int, IN CONV_RATE1 double, IN CONV_RATE2 double,
  IN COMMISSION double, IN COMMISSION_AGENT double, IN SWAPS double, IN CLOSE_PRICE double, IN PROFIT double, 
	IN TAXES double, IN `COMMENT` char(32), IN INTERNAL_ID int, IN MARGIN_RATE double, IN `TIMESTAMP` int,
	IN MAGIC int, IN GW_VOLUME int, IN GW_OPEN_PRICE int, IN GW_CLOSE_PRICE int, IN MODIFY_TIME datetime)
	BEGIN
		DECLARE STATUSCODE INT DEFAULT 400 ;
		INSERT INTO MT4_TRADES(
			TICKET, LOGIN, SYMBOL, DIGITS, CMD,
			VOLUME, OPEN_TIME, OPEN_PRICE, SL, TP, 
			CLOSE_TIME, EXPIRATION, REASON, CONV_RATE1, CONV_RATE2, 
			COMMISSION, COMMISSION_AGENT, SWAPS, CLOSE_PRICE, PROFIT, 
			TAXES, `COMMENT`, INTERNAL_ID, MARGIN_RATE, `TIMESTAMP`,
			MAGIC, GW_VOLUME, GW_OPEN_PRICE, GW_CLOSE_PRICE, MODIFY_TIME
		) 
		VALUES(
			TICKET, LOGIN, SYMBOL, DIGITS, CMD,
			VOLUME, OPEN_TIME, OPEN_PRICE, SL, TP, 
			CLOSE_TIME, EXPIRATION, REASON, CONV_RATE1, CONV_RATE2, 
			COMMISSION, COMMISSION_AGENT, SWAPS, CLOSE_PRICE, PROFIT, 
			TAXES, `COMMENT`, INTERNAL_ID, MARGIN_RATE, `TIMESTAMP`,
			MAGIC, GW_VOLUME, GW_OPEN_PRICE, GW_CLOSE_PRICE, MODIFY_TIME
		);
		SET STATUSCODE = 200;
		SELECT STATUSCODE;
	END;
	//
DELIMITER ;

DELIMITER // 
DROP PROCEDURE IF EXISTS `UpdateTrade` //
CREATE PROCEDURE `UpdateTrade`(IN TICKETINPUT int, IN LOGIN int, IN SYMBOL char(16), IN DIGITS int, IN CMD int, 
	IN VOLUME int, IN OPEN_TIME datetime, IN OPEN_PRICE double, IN sl double, IN tp double, 
	IN CLOSE_TIME datetime, IN EXPIRATION datetime, IN REASON int, IN CONV_RATE1 double, IN CONV_RATE2 double,
	IN COMMISSION double, IN COMMISSION_AGENT double, IN SWAPS double, IN CLOSE_PRICE double, IN PROFIT double, 
	IN TAXES double, IN `COMMENT` char(32), IN INTERNAL_ID int, IN MARGIN_RATE double, IN `TIMESTAMP` int,
	IN MAGIC int, IN GW_VOLUME int, IN GW_OPEN_PRICE int, IN GW_CLOSE_PRICE int, IN MODIFY_TIME datetime)
	BEGIN
		DECLARE STATUSCODE INT DEFAULT 400 ;
		UPDATE MT4_TRADES 
		SET  
			LOGIN = LOGIN, SYMBOL = SYMBOL, DIGITS = DIGITS, CMD = CMD,
			VOLUME = VOLUME, OPEN_TIME = OPEN_TIME, OPEN_PRICE = OPEN_PRICE, SL = SL, TP = TP,
			CLOSE_TIME = CLOSE_TIME, EXPIRATION = EXPIRATION, REASON = REASON, CONV_RATE1 = CONV_RATE1, CONV_RATE2 = CONV_RATE2, 
			COMMISSION = COMMISSION, COMMISSION_AGENT = COMMISSION_AGENT, SWAPS = SWAPS, CLOSE_PRICE = CLOSE_PRICE, PROFIT = PROFIT,
			TAXES = TAXES, `COMMENT` = `COMMENT`, INTERNAL_ID = INTERNAL_ID, MARGIN_RATE = MARGIN_RATE, `TIMESTAMP` = `TIMESTAMP`,
			MAGIC = MAGIC, GW_VOLUME = GW_VOLUME, GW_OPEN_PRICE = GW_OPEN_PRICE, GW_CLOSE_PRICE = GW_CLOSE_PRICE, MODIFY_TIME =MODIFY_TIME 
		WHERE 
			TICKET = TICKETINPUT;
		SET STATUSCODE = 200;
		SELECT STATUSCODE;
	END;
	//
DELIMITER ;

DELIMITER // 
DROP PROCEDURE IF EXISTS `DeleteTrade` //
CREATE PROCEDURE `DeleteTrade`(IN TICKETINPUT int)
	BEGIN
		DECLARE STATUSCODE INT DEFAULT 400 ;
		DELETE FROM MT4_TRADES 
		WHERE 
			TICKET = TICKETINPUT;
		SET STATUSCODE = 200;
		SELECT STATUSCODE;
	END;
	//
DELIMITER ;

DELIMITER $$
DROP PROCEDURE IF EXISTS updateBalanceUser $$
CREATE PROCEDURE updateBalanceUser 
(IN login INT, IN balance DOUBLE, IN preBalance DOUBLE, IN margin DOUBLE, IN margin_level DOUBLE, IN margin_free DOUBLE)
BEGIN
UPDATE mt4_users SET 
BALANCE=balance, PREVBALANCE=preBalance, MARGIN=margin, MARGIN_LEVEL=margin_level, MARGIN_FREE=margin_free 
WHERE LOGIN=login;
END
$$

DELIMITER ;


DELIMITER $$
CREATE TRIGGER trig_users_insert 
AFTER INSERT ON mt4_full_users2 FOR EACH ROW
BEGIN
     INSERT INTO mt4_users2 VALUES(new.ticket,new.comments,new.openprice);
END;
$$
DELIMITER ;

DROP TRIGGER IF EXISTS trig_users_update;
DELIMITER $$
CREATE TRIGGER trig_users_update 
AFTER UPDATE ON mt4_full_users2 FOR EACH ROW
BEGIN
     UPDATE mt4_users2 SET  comments=new.comments, openprice=new.openprice WHERE ticket=new.ticket;
END;
$$
DELIMITER ;



CREATE TABLE `mt4_trades_full` (
  `TICKET` INT(11) NOT NULL AUTO_INCREMENT,
  `ORDERID` VARCHAR(36) NOT NULL UNIQUE,
  `LOGIN` INT(11) NOT NULL,
  `SYMBOL` CHAR(16) NOT NULL,
  `DIGITS` INT(11) NOT NULL,
  `CMD` INT(11) NOT NULL,
  `VOLUME` INT(11) NOT NULL,
  `OPEN_TIME` DATETIME NOT NULL,
  `OPEN_PRICE` DOUBLE NOT NULL,
  `SL` DOUBLE NOT NULL,
  `TP` DOUBLE NOT NULL,
  `CLOSE_TIME` DATETIME NOT NULL,
  `EXPIRATION` DATETIME NOT NULL,
  `REASON` INT(11) NOT NULL DEFAULT '0',
  `CONV_RATE1` DOUBLE NOT NULL,
  `CONV_RATE2` DOUBLE NOT NULL,
  `COMMISSION` DOUBLE NOT NULL,
  `COMMISSION_AGENT` DOUBLE NOT NULL,
  `SWAPS` DOUBLE NOT NULL,
  `CLOSE_PRICE` DOUBLE NOT NULL,
  `PROFIT` DOUBLE NOT NULL,
  `TAXES` DOUBLE NOT NULL,
  `COMMENT` CHAR(32) NOT NULL,
  `INTERNAL_ID` INT(11) NOT NULL,
  `MARGIN_RATE` DOUBLE NOT NULL,
  `TIMESTAMP` INT(11) NOT NULL,
  `MAGIC` INT(11) NOT NULL DEFAULT '0',
  `GW_VOLUME` INT(11) NOT NULL DEFAULT '0',
  `GW_OPEN_PRICE` INT(11) NOT NULL DEFAULT '0',
  `GW_CLOSE_PRICE` INT(11) NOT NULL DEFAULT '0',
  `MODIFY_TIME` DATETIME NOT NULL,
  PRIMARY KEY (`TICKET`),
  KEY `INDEX_LOGIN` (`LOGIN`),
  KEY `INDEX_CMD` (`CMD`),
  KEY `INDEX_OPENTIME` (`OPEN_TIME`),
  KEY `INDEX_CLOSETIME` (`CLOSE_TIME`),
  KEY `INDEX_STAMP` (`TIMESTAMP`),
  KEY `idx_log_cm` (`LOGIN`,`CMD`,`OPEN_TIME`),
  KEY `close_time_cmd` (`CLOSE_TIME`,`CMD`,`SYMBOL`),
  KEY `LOGIN` (`LOGIN`,`CLOSE_TIME`,`CMD`)
) ENGINE=INNODB DEFAULT CHARSET=utf8;

DELIMITER $$
CREATE TRIGGER trig_trades_insert 
AFTER INSERT ON mt4_trades_full FOR EACH ROW
BEGIN
     INSERT INTO mt4_trades VALUES(new.TICKET,new.LOGIN, new.SYMBOL, new.DIGITS, new.CMD,
			new.VOLUME, new.OPEN_TIME, new.OPEN_PRICE, new.SL, new.TP,
			new.CLOSE_TIME, new.EXPIRATION, new.REASON, new.CONV_RATE1, new.CONV_RATE2, 
			new.COMMISSION, new.COMMISSION_AGENT, new.SWAPS, new.CLOSE_PRICE, new.PROFIT,
			new.TAXES, new.COMMENT, new.INTERNAL_ID, new.MARGIN_RATE, new.`TIMESTAMP`, 
			new.MAGIC, new.GW_VOLUME, new.GW_OPEN_PRICE, new.GW_CLOSE_PRICE, new.MODIFY_TIME);
END;
$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER trig_trades_update 
AFTER UPDATE ON mt4_trades_full FOR EACH ROW
BEGIN
     UPDATE mt4_trades SET LOGIN=new.LOGIN, SYMBOL=new.SYMBOL, DIGITS=new.DIGITS, CMD=new.CMD,
			VOLUME=new.VOLUME, OPEN_TIME=new.OPEN_TIME, OPEN_PRICE=new.OPEN_PRICE, SL=new.SL, TP=new.TP,
			CLOSE_TIME=new.CLOSE_TIME, EXPIRATION=new.EXPIRATION, REASON=new.REASON, CONV_RATE1=new.CONV_RATE1, CONV_RATE2=new.CONV_RATE2, 
			COMMISSION=new.COMMISSION, COMMISSION_AGENT=new.COMMISSION_AGENT, SWAPS=new.SWAPS, CLOSE_PRICE=new.CLOSE_PRICE, PROFIT=new.PROFIT,
			TAXES=new.TAXES, COMMENT=new.COMMENT, INTERNAL_ID=new.INTERNAL_ID, MARGIN_RATE=new.MARGIN_RATE, `TIMESTAMP`=new.`TIMESTAMP`, 
			MAGIC=new.MAGIC, GW_VOLUME=new.GW_VOLUME, GW_OPEN_PRICE=new.GW_OPEN_PRICE, GW_CLOSE_PRICE=new.GW_CLOSE_PRICE, MODIFY_TIME=new.MODIFY_TIME WHERE TICKET=new.TICKET;
END;
$$
DELIMITER ;

DELIMITER $$
DROP TRIGGER IF EXISTS trig_trades_delete $$
CREATE TRIGGER trig_trades_delete AFTER DELETE ON mt4_trades_full
FOR EACH ROW 
BEGIN
DELETE FROM mt4_trades WHERE ticket=old.ticket;
END
$$
DELIMITER ;