// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ME.Interface.proto

#include "ME.Interface.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace MEProInterface {
class IntervalMsgHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IntervalMsgHeader>
      _instance;
  const ::MEAuth::ST_USER_LOGIN_INFO* stuserlogin_;
  const ::MEAuth::ST_USER_LOGIN_RESP* stloginresp_;
  const ::MEOrderAPI::ST_SUBMIT_ORDER* stsubmitorder_;
  const ::MEOrderAPI::ST_SUBMIT_CAMCEL_ORDER* stcancelorder_;
  const ::MEOrderAPI::ST_SUBMIT_ORDER_RESP* storderresp_;
  const ::MEOrderAPI::ST_QUERY_ORDER_INFO* stqueryorder_;
  const ::MEOrderAPI::ST_QUERY_ORDER_RES* stqueryresp_;
  const ::MESubcribeAPI::ST_TRANS_ORDER_INFO* sttransorder_;
  const ::MESubcribeAPI::ST_MART_QUOTATION* stmarketdata_;
  const ::MESubcribeAPI::ST_REP_TRANS_ORDER_REQUEST* streptransreq_;
  const ::MEAuth::ST_USER_LOGIN_INFO* stsubcriuserlogin_;
  const ::MEOrderAPI::ST_QUERY_ORDER_INFO* stqueryhistoryorder_;
} _IntervalMsgHeader_default_instance_;
}  // namespace MEProInterface
namespace protobuf_ME_2eInterface_2eproto {
void InitDefaultsIntervalMsgHeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ME_2eAuth_2eproto::InitDefaultsST_USER_LOGIN_INFO();
  protobuf_ME_2eAuth_2eproto::InitDefaultsST_USER_LOGIN_RESP();
  protobuf_ME_2eOrderAPI_2eproto::InitDefaultsST_SUBMIT_ORDER();
  protobuf_ME_2eOrderAPI_2eproto::InitDefaultsST_SUBMIT_CAMCEL_ORDER();
  protobuf_ME_2eOrderAPI_2eproto::InitDefaultsST_SUBMIT_ORDER_RESP();
  protobuf_ME_2eOrderAPI_2eproto::InitDefaultsST_QUERY_ORDER_INFO();
  protobuf_ME_2eOrderAPI_2eproto::InitDefaultsST_QUERY_ORDER_RES();
  protobuf_ME_2eMESubcribeAPI_2eproto::InitDefaultsST_TRANS_ORDER_INFO();
  protobuf_ME_2eMESubcribeAPI_2eproto::InitDefaultsST_MART_QUOTATION();
  protobuf_ME_2eMESubcribeAPI_2eproto::InitDefaultsST_REP_TRANS_ORDER_REQUEST();
  {
    void* ptr = &::MEProInterface::_IntervalMsgHeader_default_instance_;
    new (ptr) ::MEProInterface::IntervalMsgHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MEProInterface::IntervalMsgHeader::InitAsDefaultInstance();
}

void InitDefaultsIntervalMsgHeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIntervalMsgHeaderImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::IntervalMsgHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::IntervalMsgHeader, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::IntervalMsgHeader, iflownumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::IntervalMsgHeader, icmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::IntervalMsgHeader, imsgtype_),
  offsetof(::MEProInterface::IntervalMsgHeaderDefaultTypeInternal, stuserlogin_),
  offsetof(::MEProInterface::IntervalMsgHeaderDefaultTypeInternal, stloginresp_),
  offsetof(::MEProInterface::IntervalMsgHeaderDefaultTypeInternal, stsubmitorder_),
  offsetof(::MEProInterface::IntervalMsgHeaderDefaultTypeInternal, stcancelorder_),
  offsetof(::MEProInterface::IntervalMsgHeaderDefaultTypeInternal, storderresp_),
  offsetof(::MEProInterface::IntervalMsgHeaderDefaultTypeInternal, stqueryorder_),
  offsetof(::MEProInterface::IntervalMsgHeaderDefaultTypeInternal, stqueryresp_),
  offsetof(::MEProInterface::IntervalMsgHeaderDefaultTypeInternal, sttransorder_),
  offsetof(::MEProInterface::IntervalMsgHeaderDefaultTypeInternal, stmarketdata_),
  offsetof(::MEProInterface::IntervalMsgHeaderDefaultTypeInternal, streptransreq_),
  offsetof(::MEProInterface::IntervalMsgHeaderDefaultTypeInternal, stsubcriuserlogin_),
  offsetof(::MEProInterface::IntervalMsgHeaderDefaultTypeInternal, stqueryhistoryorder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEProInterface::IntervalMsgHeader, MsgBody_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MEProInterface::IntervalMsgHeader)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::MEProInterface::_IntervalMsgHeader_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ME.Interface.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022ME.Interface.proto\022\016MEProInterface\032\rME"
      ".Auth.proto\032\021ME.OrderAPI.proto\032\026ME.MESub"
      "cribeAPI.proto\"\210\006\n\021IntervalMsgHeader\022\023\n\013"
      "iFlowNumber\030\001 \001(\005\022\014\n\004iCmd\030\002 \001(\005\022\020\n\010iMsgT"
      "ype\030\003 \001(\005\0221\n\013stUserLogin\030\004 \001(\0132\032.MEAuth."
      "ST_USER_LOGIN_INFOH\000\0221\n\013stLoginResp\030\005 \001("
      "\0132\032.MEAuth.ST_USER_LOGIN_RESPH\000\0224\n\rstSub"
      "mitOrder\030\006 \001(\0132\033.MEOrderAPI.ST_SUBMIT_OR"
      "DERH\000\022;\n\rstCancelOrder\030\007 \001(\0132\".MEOrderAP"
      "I.ST_SUBMIT_CAMCEL_ORDERH\000\0227\n\013stOrderRes"
      "p\030\010 \001(\0132 .MEOrderAPI.ST_SUBMIT_ORDER_RES"
      "PH\000\0227\n\014stQueryOrder\030\t \001(\0132\037.MEOrderAPI.S"
      "T_QUERY_ORDER_INFOH\000\0225\n\013stQueryResp\030\n \001("
      "\0132\036.MEOrderAPI.ST_QUERY_ORDER_RESH\000\022:\n\014s"
      "tTransOrder\030\013 \001(\0132\".MESubcribeAPI.ST_TRA"
      "NS_ORDER_INFOH\000\0228\n\014stMarketData\030\014 \001(\0132 ."
      "MESubcribeAPI.ST_MART_QUOTATIONH\000\022B\n\rstR"
      "eptransReq\030\r \001(\0132).MESubcribeAPI.ST_REP_"
      "TRANS_ORDER_REQUESTH\000\0227\n\021stSubcriUserLog"
      "in\030\016 \001(\0132\032.MEAuth.ST_USER_LOGIN_INFOH\000\022>"
      "\n\023stQueryHistoryOrder\030\017 \001(\0132\037.MEOrderAPI"
      ".ST_QUERY_ORDER_INFOH\000B\t\n\007MsgBodyb\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 881);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ME.Interface.proto", &protobuf_RegisterTypes);
  ::protobuf_ME_2eAuth_2eproto::AddDescriptors();
  ::protobuf_ME_2eOrderAPI_2eproto::AddDescriptors();
  ::protobuf_ME_2eMESubcribeAPI_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ME_2eInterface_2eproto
namespace MEProInterface {

// ===================================================================

void IntervalMsgHeader::InitAsDefaultInstance() {
  ::MEProInterface::_IntervalMsgHeader_default_instance_.stuserlogin_ = const_cast< ::MEAuth::ST_USER_LOGIN_INFO*>(
      ::MEAuth::ST_USER_LOGIN_INFO::internal_default_instance());
  ::MEProInterface::_IntervalMsgHeader_default_instance_.stloginresp_ = const_cast< ::MEAuth::ST_USER_LOGIN_RESP*>(
      ::MEAuth::ST_USER_LOGIN_RESP::internal_default_instance());
  ::MEProInterface::_IntervalMsgHeader_default_instance_.stsubmitorder_ = const_cast< ::MEOrderAPI::ST_SUBMIT_ORDER*>(
      ::MEOrderAPI::ST_SUBMIT_ORDER::internal_default_instance());
  ::MEProInterface::_IntervalMsgHeader_default_instance_.stcancelorder_ = const_cast< ::MEOrderAPI::ST_SUBMIT_CAMCEL_ORDER*>(
      ::MEOrderAPI::ST_SUBMIT_CAMCEL_ORDER::internal_default_instance());
  ::MEProInterface::_IntervalMsgHeader_default_instance_.storderresp_ = const_cast< ::MEOrderAPI::ST_SUBMIT_ORDER_RESP*>(
      ::MEOrderAPI::ST_SUBMIT_ORDER_RESP::internal_default_instance());
  ::MEProInterface::_IntervalMsgHeader_default_instance_.stqueryorder_ = const_cast< ::MEOrderAPI::ST_QUERY_ORDER_INFO*>(
      ::MEOrderAPI::ST_QUERY_ORDER_INFO::internal_default_instance());
  ::MEProInterface::_IntervalMsgHeader_default_instance_.stqueryresp_ = const_cast< ::MEOrderAPI::ST_QUERY_ORDER_RES*>(
      ::MEOrderAPI::ST_QUERY_ORDER_RES::internal_default_instance());
  ::MEProInterface::_IntervalMsgHeader_default_instance_.sttransorder_ = const_cast< ::MESubcribeAPI::ST_TRANS_ORDER_INFO*>(
      ::MESubcribeAPI::ST_TRANS_ORDER_INFO::internal_default_instance());
  ::MEProInterface::_IntervalMsgHeader_default_instance_.stmarketdata_ = const_cast< ::MESubcribeAPI::ST_MART_QUOTATION*>(
      ::MESubcribeAPI::ST_MART_QUOTATION::internal_default_instance());
  ::MEProInterface::_IntervalMsgHeader_default_instance_.streptransreq_ = const_cast< ::MESubcribeAPI::ST_REP_TRANS_ORDER_REQUEST*>(
      ::MESubcribeAPI::ST_REP_TRANS_ORDER_REQUEST::internal_default_instance());
  ::MEProInterface::_IntervalMsgHeader_default_instance_.stsubcriuserlogin_ = const_cast< ::MEAuth::ST_USER_LOGIN_INFO*>(
      ::MEAuth::ST_USER_LOGIN_INFO::internal_default_instance());
  ::MEProInterface::_IntervalMsgHeader_default_instance_.stqueryhistoryorder_ = const_cast< ::MEOrderAPI::ST_QUERY_ORDER_INFO*>(
      ::MEOrderAPI::ST_QUERY_ORDER_INFO::internal_default_instance());
}
void IntervalMsgHeader::set_allocated_stuserlogin(::MEAuth::ST_USER_LOGIN_INFO* stuserlogin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MsgBody();
  if (stuserlogin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stuserlogin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stuserlogin, submessage_arena);
    }
    set_has_stuserlogin();
    MsgBody_.stuserlogin_ = stuserlogin;
  }
  // @@protoc_insertion_point(field_set_allocated:MEProInterface.IntervalMsgHeader.stUserLogin)
}
void IntervalMsgHeader::clear_stuserlogin() {
  if (has_stuserlogin()) {
    delete MsgBody_.stuserlogin_;
    clear_has_MsgBody();
  }
}
void IntervalMsgHeader::set_allocated_stloginresp(::MEAuth::ST_USER_LOGIN_RESP* stloginresp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MsgBody();
  if (stloginresp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stloginresp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stloginresp, submessage_arena);
    }
    set_has_stloginresp();
    MsgBody_.stloginresp_ = stloginresp;
  }
  // @@protoc_insertion_point(field_set_allocated:MEProInterface.IntervalMsgHeader.stLoginResp)
}
void IntervalMsgHeader::clear_stloginresp() {
  if (has_stloginresp()) {
    delete MsgBody_.stloginresp_;
    clear_has_MsgBody();
  }
}
void IntervalMsgHeader::set_allocated_stsubmitorder(::MEOrderAPI::ST_SUBMIT_ORDER* stsubmitorder) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MsgBody();
  if (stsubmitorder) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stsubmitorder = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stsubmitorder, submessage_arena);
    }
    set_has_stsubmitorder();
    MsgBody_.stsubmitorder_ = stsubmitorder;
  }
  // @@protoc_insertion_point(field_set_allocated:MEProInterface.IntervalMsgHeader.stSubmitOrder)
}
void IntervalMsgHeader::clear_stsubmitorder() {
  if (has_stsubmitorder()) {
    delete MsgBody_.stsubmitorder_;
    clear_has_MsgBody();
  }
}
void IntervalMsgHeader::set_allocated_stcancelorder(::MEOrderAPI::ST_SUBMIT_CAMCEL_ORDER* stcancelorder) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MsgBody();
  if (stcancelorder) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stcancelorder = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stcancelorder, submessage_arena);
    }
    set_has_stcancelorder();
    MsgBody_.stcancelorder_ = stcancelorder;
  }
  // @@protoc_insertion_point(field_set_allocated:MEProInterface.IntervalMsgHeader.stCancelOrder)
}
void IntervalMsgHeader::clear_stcancelorder() {
  if (has_stcancelorder()) {
    delete MsgBody_.stcancelorder_;
    clear_has_MsgBody();
  }
}
void IntervalMsgHeader::set_allocated_storderresp(::MEOrderAPI::ST_SUBMIT_ORDER_RESP* storderresp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MsgBody();
  if (storderresp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      storderresp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, storderresp, submessage_arena);
    }
    set_has_storderresp();
    MsgBody_.storderresp_ = storderresp;
  }
  // @@protoc_insertion_point(field_set_allocated:MEProInterface.IntervalMsgHeader.stOrderResp)
}
void IntervalMsgHeader::clear_storderresp() {
  if (has_storderresp()) {
    delete MsgBody_.storderresp_;
    clear_has_MsgBody();
  }
}
void IntervalMsgHeader::set_allocated_stqueryorder(::MEOrderAPI::ST_QUERY_ORDER_INFO* stqueryorder) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MsgBody();
  if (stqueryorder) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stqueryorder = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stqueryorder, submessage_arena);
    }
    set_has_stqueryorder();
    MsgBody_.stqueryorder_ = stqueryorder;
  }
  // @@protoc_insertion_point(field_set_allocated:MEProInterface.IntervalMsgHeader.stQueryOrder)
}
void IntervalMsgHeader::clear_stqueryorder() {
  if (has_stqueryorder()) {
    delete MsgBody_.stqueryorder_;
    clear_has_MsgBody();
  }
}
void IntervalMsgHeader::set_allocated_stqueryresp(::MEOrderAPI::ST_QUERY_ORDER_RES* stqueryresp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MsgBody();
  if (stqueryresp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stqueryresp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stqueryresp, submessage_arena);
    }
    set_has_stqueryresp();
    MsgBody_.stqueryresp_ = stqueryresp;
  }
  // @@protoc_insertion_point(field_set_allocated:MEProInterface.IntervalMsgHeader.stQueryResp)
}
void IntervalMsgHeader::clear_stqueryresp() {
  if (has_stqueryresp()) {
    delete MsgBody_.stqueryresp_;
    clear_has_MsgBody();
  }
}
void IntervalMsgHeader::set_allocated_sttransorder(::MESubcribeAPI::ST_TRANS_ORDER_INFO* sttransorder) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MsgBody();
  if (sttransorder) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sttransorder = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sttransorder, submessage_arena);
    }
    set_has_sttransorder();
    MsgBody_.sttransorder_ = sttransorder;
  }
  // @@protoc_insertion_point(field_set_allocated:MEProInterface.IntervalMsgHeader.stTransOrder)
}
void IntervalMsgHeader::clear_sttransorder() {
  if (has_sttransorder()) {
    delete MsgBody_.sttransorder_;
    clear_has_MsgBody();
  }
}
void IntervalMsgHeader::set_allocated_stmarketdata(::MESubcribeAPI::ST_MART_QUOTATION* stmarketdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MsgBody();
  if (stmarketdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stmarketdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stmarketdata, submessage_arena);
    }
    set_has_stmarketdata();
    MsgBody_.stmarketdata_ = stmarketdata;
  }
  // @@protoc_insertion_point(field_set_allocated:MEProInterface.IntervalMsgHeader.stMarketData)
}
void IntervalMsgHeader::clear_stmarketdata() {
  if (has_stmarketdata()) {
    delete MsgBody_.stmarketdata_;
    clear_has_MsgBody();
  }
}
void IntervalMsgHeader::set_allocated_streptransreq(::MESubcribeAPI::ST_REP_TRANS_ORDER_REQUEST* streptransreq) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MsgBody();
  if (streptransreq) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      streptransreq = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, streptransreq, submessage_arena);
    }
    set_has_streptransreq();
    MsgBody_.streptransreq_ = streptransreq;
  }
  // @@protoc_insertion_point(field_set_allocated:MEProInterface.IntervalMsgHeader.stReptransReq)
}
void IntervalMsgHeader::clear_streptransreq() {
  if (has_streptransreq()) {
    delete MsgBody_.streptransreq_;
    clear_has_MsgBody();
  }
}
void IntervalMsgHeader::set_allocated_stsubcriuserlogin(::MEAuth::ST_USER_LOGIN_INFO* stsubcriuserlogin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MsgBody();
  if (stsubcriuserlogin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stsubcriuserlogin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stsubcriuserlogin, submessage_arena);
    }
    set_has_stsubcriuserlogin();
    MsgBody_.stsubcriuserlogin_ = stsubcriuserlogin;
  }
  // @@protoc_insertion_point(field_set_allocated:MEProInterface.IntervalMsgHeader.stSubcriUserLogin)
}
void IntervalMsgHeader::clear_stsubcriuserlogin() {
  if (has_stsubcriuserlogin()) {
    delete MsgBody_.stsubcriuserlogin_;
    clear_has_MsgBody();
  }
}
void IntervalMsgHeader::set_allocated_stqueryhistoryorder(::MEOrderAPI::ST_QUERY_ORDER_INFO* stqueryhistoryorder) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_MsgBody();
  if (stqueryhistoryorder) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stqueryhistoryorder = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stqueryhistoryorder, submessage_arena);
    }
    set_has_stqueryhistoryorder();
    MsgBody_.stqueryhistoryorder_ = stqueryhistoryorder;
  }
  // @@protoc_insertion_point(field_set_allocated:MEProInterface.IntervalMsgHeader.stQueryHistoryOrder)
}
void IntervalMsgHeader::clear_stqueryhistoryorder() {
  if (has_stqueryhistoryorder()) {
    delete MsgBody_.stqueryhistoryorder_;
    clear_has_MsgBody();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntervalMsgHeader::kIFlowNumberFieldNumber;
const int IntervalMsgHeader::kICmdFieldNumber;
const int IntervalMsgHeader::kIMsgTypeFieldNumber;
const int IntervalMsgHeader::kStUserLoginFieldNumber;
const int IntervalMsgHeader::kStLoginRespFieldNumber;
const int IntervalMsgHeader::kStSubmitOrderFieldNumber;
const int IntervalMsgHeader::kStCancelOrderFieldNumber;
const int IntervalMsgHeader::kStOrderRespFieldNumber;
const int IntervalMsgHeader::kStQueryOrderFieldNumber;
const int IntervalMsgHeader::kStQueryRespFieldNumber;
const int IntervalMsgHeader::kStTransOrderFieldNumber;
const int IntervalMsgHeader::kStMarketDataFieldNumber;
const int IntervalMsgHeader::kStReptransReqFieldNumber;
const int IntervalMsgHeader::kStSubcriUserLoginFieldNumber;
const int IntervalMsgHeader::kStQueryHistoryOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntervalMsgHeader::IntervalMsgHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ME_2eInterface_2eproto::InitDefaultsIntervalMsgHeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MEProInterface.IntervalMsgHeader)
}
IntervalMsgHeader::IntervalMsgHeader(const IntervalMsgHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&iflownumber_, &from.iflownumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&imsgtype_) -
    reinterpret_cast<char*>(&iflownumber_)) + sizeof(imsgtype_));
  clear_has_MsgBody();
  switch (from.MsgBody_case()) {
    case kStUserLogin: {
      mutable_stuserlogin()->::MEAuth::ST_USER_LOGIN_INFO::MergeFrom(from.stuserlogin());
      break;
    }
    case kStLoginResp: {
      mutable_stloginresp()->::MEAuth::ST_USER_LOGIN_RESP::MergeFrom(from.stloginresp());
      break;
    }
    case kStSubmitOrder: {
      mutable_stsubmitorder()->::MEOrderAPI::ST_SUBMIT_ORDER::MergeFrom(from.stsubmitorder());
      break;
    }
    case kStCancelOrder: {
      mutable_stcancelorder()->::MEOrderAPI::ST_SUBMIT_CAMCEL_ORDER::MergeFrom(from.stcancelorder());
      break;
    }
    case kStOrderResp: {
      mutable_storderresp()->::MEOrderAPI::ST_SUBMIT_ORDER_RESP::MergeFrom(from.storderresp());
      break;
    }
    case kStQueryOrder: {
      mutable_stqueryorder()->::MEOrderAPI::ST_QUERY_ORDER_INFO::MergeFrom(from.stqueryorder());
      break;
    }
    case kStQueryResp: {
      mutable_stqueryresp()->::MEOrderAPI::ST_QUERY_ORDER_RES::MergeFrom(from.stqueryresp());
      break;
    }
    case kStTransOrder: {
      mutable_sttransorder()->::MESubcribeAPI::ST_TRANS_ORDER_INFO::MergeFrom(from.sttransorder());
      break;
    }
    case kStMarketData: {
      mutable_stmarketdata()->::MESubcribeAPI::ST_MART_QUOTATION::MergeFrom(from.stmarketdata());
      break;
    }
    case kStReptransReq: {
      mutable_streptransreq()->::MESubcribeAPI::ST_REP_TRANS_ORDER_REQUEST::MergeFrom(from.streptransreq());
      break;
    }
    case kStSubcriUserLogin: {
      mutable_stsubcriuserlogin()->::MEAuth::ST_USER_LOGIN_INFO::MergeFrom(from.stsubcriuserlogin());
      break;
    }
    case kStQueryHistoryOrder: {
      mutable_stqueryhistoryorder()->::MEOrderAPI::ST_QUERY_ORDER_INFO::MergeFrom(from.stqueryhistoryorder());
      break;
    }
    case MSGBODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:MEProInterface.IntervalMsgHeader)
}

void IntervalMsgHeader::SharedCtor() {
  ::memset(&iflownumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imsgtype_) -
      reinterpret_cast<char*>(&iflownumber_)) + sizeof(imsgtype_));
  clear_has_MsgBody();
  _cached_size_ = 0;
}

IntervalMsgHeader::~IntervalMsgHeader() {
  // @@protoc_insertion_point(destructor:MEProInterface.IntervalMsgHeader)
  SharedDtor();
}

void IntervalMsgHeader::SharedDtor() {
  if (has_MsgBody()) {
    clear_MsgBody();
  }
}

void IntervalMsgHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntervalMsgHeader::descriptor() {
  ::protobuf_ME_2eInterface_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ME_2eInterface_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IntervalMsgHeader& IntervalMsgHeader::default_instance() {
  ::protobuf_ME_2eInterface_2eproto::InitDefaultsIntervalMsgHeader();
  return *internal_default_instance();
}

IntervalMsgHeader* IntervalMsgHeader::New(::google::protobuf::Arena* arena) const {
  IntervalMsgHeader* n = new IntervalMsgHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IntervalMsgHeader::clear_MsgBody() {
// @@protoc_insertion_point(one_of_clear_start:MEProInterface.IntervalMsgHeader)
  switch (MsgBody_case()) {
    case kStUserLogin: {
      delete MsgBody_.stuserlogin_;
      break;
    }
    case kStLoginResp: {
      delete MsgBody_.stloginresp_;
      break;
    }
    case kStSubmitOrder: {
      delete MsgBody_.stsubmitorder_;
      break;
    }
    case kStCancelOrder: {
      delete MsgBody_.stcancelorder_;
      break;
    }
    case kStOrderResp: {
      delete MsgBody_.storderresp_;
      break;
    }
    case kStQueryOrder: {
      delete MsgBody_.stqueryorder_;
      break;
    }
    case kStQueryResp: {
      delete MsgBody_.stqueryresp_;
      break;
    }
    case kStTransOrder: {
      delete MsgBody_.sttransorder_;
      break;
    }
    case kStMarketData: {
      delete MsgBody_.stmarketdata_;
      break;
    }
    case kStReptransReq: {
      delete MsgBody_.streptransreq_;
      break;
    }
    case kStSubcriUserLogin: {
      delete MsgBody_.stsubcriuserlogin_;
      break;
    }
    case kStQueryHistoryOrder: {
      delete MsgBody_.stqueryhistoryorder_;
      break;
    }
    case MSGBODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSGBODY_NOT_SET;
}


void IntervalMsgHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:MEProInterface.IntervalMsgHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&iflownumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imsgtype_) -
      reinterpret_cast<char*>(&iflownumber_)) + sizeof(imsgtype_));
  clear_MsgBody();
  _internal_metadata_.Clear();
}

bool IntervalMsgHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MEProInterface.IntervalMsgHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 iFlowNumber = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iflownumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 iCmd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 iMsgType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imsgtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MEAuth.ST_USER_LOGIN_INFO stUserLogin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stuserlogin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MEAuth.ST_USER_LOGIN_RESP stLoginResp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stloginresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MEOrderAPI.ST_SUBMIT_ORDER stSubmitOrder = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stsubmitorder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MEOrderAPI.ST_SUBMIT_CAMCEL_ORDER stCancelOrder = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stcancelorder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MEOrderAPI.ST_SUBMIT_ORDER_RESP stOrderResp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_storderresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MEOrderAPI.ST_QUERY_ORDER_INFO stQueryOrder = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stqueryorder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MEOrderAPI.ST_QUERY_ORDER_RES stQueryResp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stqueryresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MESubcribeAPI.ST_TRANS_ORDER_INFO stTransOrder = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sttransorder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MESubcribeAPI.ST_MART_QUOTATION stMarketData = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stmarketdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MESubcribeAPI.ST_REP_TRANS_ORDER_REQUEST stReptransReq = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_streptransreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MEAuth.ST_USER_LOGIN_INFO stSubcriUserLogin = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stsubcriuserlogin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MEOrderAPI.ST_QUERY_ORDER_INFO stQueryHistoryOrder = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stqueryhistoryorder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MEProInterface.IntervalMsgHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MEProInterface.IntervalMsgHeader)
  return false;
#undef DO_
}

void IntervalMsgHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MEProInterface.IntervalMsgHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iFlowNumber = 1;
  if (this->iflownumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iflownumber(), output);
  }

  // int32 iCmd = 2;
  if (this->icmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->icmd(), output);
  }

  // int32 iMsgType = 3;
  if (this->imsgtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->imsgtype(), output);
  }

  // .MEAuth.ST_USER_LOGIN_INFO stUserLogin = 4;
  if (has_stuserlogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *MsgBody_.stuserlogin_, output);
  }

  // .MEAuth.ST_USER_LOGIN_RESP stLoginResp = 5;
  if (has_stloginresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *MsgBody_.stloginresp_, output);
  }

  // .MEOrderAPI.ST_SUBMIT_ORDER stSubmitOrder = 6;
  if (has_stsubmitorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *MsgBody_.stsubmitorder_, output);
  }

  // .MEOrderAPI.ST_SUBMIT_CAMCEL_ORDER stCancelOrder = 7;
  if (has_stcancelorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *MsgBody_.stcancelorder_, output);
  }

  // .MEOrderAPI.ST_SUBMIT_ORDER_RESP stOrderResp = 8;
  if (has_storderresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *MsgBody_.storderresp_, output);
  }

  // .MEOrderAPI.ST_QUERY_ORDER_INFO stQueryOrder = 9;
  if (has_stqueryorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *MsgBody_.stqueryorder_, output);
  }

  // .MEOrderAPI.ST_QUERY_ORDER_RES stQueryResp = 10;
  if (has_stqueryresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *MsgBody_.stqueryresp_, output);
  }

  // .MESubcribeAPI.ST_TRANS_ORDER_INFO stTransOrder = 11;
  if (has_sttransorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *MsgBody_.sttransorder_, output);
  }

  // .MESubcribeAPI.ST_MART_QUOTATION stMarketData = 12;
  if (has_stmarketdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *MsgBody_.stmarketdata_, output);
  }

  // .MESubcribeAPI.ST_REP_TRANS_ORDER_REQUEST stReptransReq = 13;
  if (has_streptransreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *MsgBody_.streptransreq_, output);
  }

  // .MEAuth.ST_USER_LOGIN_INFO stSubcriUserLogin = 14;
  if (has_stsubcriuserlogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *MsgBody_.stsubcriuserlogin_, output);
  }

  // .MEOrderAPI.ST_QUERY_ORDER_INFO stQueryHistoryOrder = 15;
  if (has_stqueryhistoryorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *MsgBody_.stqueryhistoryorder_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MEProInterface.IntervalMsgHeader)
}

::google::protobuf::uint8* IntervalMsgHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MEProInterface.IntervalMsgHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iFlowNumber = 1;
  if (this->iflownumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iflownumber(), target);
  }

  // int32 iCmd = 2;
  if (this->icmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->icmd(), target);
  }

  // int32 iMsgType = 3;
  if (this->imsgtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->imsgtype(), target);
  }

  // .MEAuth.ST_USER_LOGIN_INFO stUserLogin = 4;
  if (has_stuserlogin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *MsgBody_.stuserlogin_, deterministic, target);
  }

  // .MEAuth.ST_USER_LOGIN_RESP stLoginResp = 5;
  if (has_stloginresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *MsgBody_.stloginresp_, deterministic, target);
  }

  // .MEOrderAPI.ST_SUBMIT_ORDER stSubmitOrder = 6;
  if (has_stsubmitorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *MsgBody_.stsubmitorder_, deterministic, target);
  }

  // .MEOrderAPI.ST_SUBMIT_CAMCEL_ORDER stCancelOrder = 7;
  if (has_stcancelorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *MsgBody_.stcancelorder_, deterministic, target);
  }

  // .MEOrderAPI.ST_SUBMIT_ORDER_RESP stOrderResp = 8;
  if (has_storderresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *MsgBody_.storderresp_, deterministic, target);
  }

  // .MEOrderAPI.ST_QUERY_ORDER_INFO stQueryOrder = 9;
  if (has_stqueryorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *MsgBody_.stqueryorder_, deterministic, target);
  }

  // .MEOrderAPI.ST_QUERY_ORDER_RES stQueryResp = 10;
  if (has_stqueryresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *MsgBody_.stqueryresp_, deterministic, target);
  }

  // .MESubcribeAPI.ST_TRANS_ORDER_INFO stTransOrder = 11;
  if (has_sttransorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *MsgBody_.sttransorder_, deterministic, target);
  }

  // .MESubcribeAPI.ST_MART_QUOTATION stMarketData = 12;
  if (has_stmarketdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *MsgBody_.stmarketdata_, deterministic, target);
  }

  // .MESubcribeAPI.ST_REP_TRANS_ORDER_REQUEST stReptransReq = 13;
  if (has_streptransreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, *MsgBody_.streptransreq_, deterministic, target);
  }

  // .MEAuth.ST_USER_LOGIN_INFO stSubcriUserLogin = 14;
  if (has_stsubcriuserlogin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, *MsgBody_.stsubcriuserlogin_, deterministic, target);
  }

  // .MEOrderAPI.ST_QUERY_ORDER_INFO stQueryHistoryOrder = 15;
  if (has_stqueryhistoryorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, *MsgBody_.stqueryhistoryorder_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MEProInterface.IntervalMsgHeader)
  return target;
}

size_t IntervalMsgHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MEProInterface.IntervalMsgHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 iFlowNumber = 1;
  if (this->iflownumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->iflownumber());
  }

  // int32 iCmd = 2;
  if (this->icmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->icmd());
  }

  // int32 iMsgType = 3;
  if (this->imsgtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->imsgtype());
  }

  switch (MsgBody_case()) {
    // .MEAuth.ST_USER_LOGIN_INFO stUserLogin = 4;
    case kStUserLogin: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MsgBody_.stuserlogin_);
      break;
    }
    // .MEAuth.ST_USER_LOGIN_RESP stLoginResp = 5;
    case kStLoginResp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MsgBody_.stloginresp_);
      break;
    }
    // .MEOrderAPI.ST_SUBMIT_ORDER stSubmitOrder = 6;
    case kStSubmitOrder: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MsgBody_.stsubmitorder_);
      break;
    }
    // .MEOrderAPI.ST_SUBMIT_CAMCEL_ORDER stCancelOrder = 7;
    case kStCancelOrder: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MsgBody_.stcancelorder_);
      break;
    }
    // .MEOrderAPI.ST_SUBMIT_ORDER_RESP stOrderResp = 8;
    case kStOrderResp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MsgBody_.storderresp_);
      break;
    }
    // .MEOrderAPI.ST_QUERY_ORDER_INFO stQueryOrder = 9;
    case kStQueryOrder: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MsgBody_.stqueryorder_);
      break;
    }
    // .MEOrderAPI.ST_QUERY_ORDER_RES stQueryResp = 10;
    case kStQueryResp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MsgBody_.stqueryresp_);
      break;
    }
    // .MESubcribeAPI.ST_TRANS_ORDER_INFO stTransOrder = 11;
    case kStTransOrder: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MsgBody_.sttransorder_);
      break;
    }
    // .MESubcribeAPI.ST_MART_QUOTATION stMarketData = 12;
    case kStMarketData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MsgBody_.stmarketdata_);
      break;
    }
    // .MESubcribeAPI.ST_REP_TRANS_ORDER_REQUEST stReptransReq = 13;
    case kStReptransReq: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MsgBody_.streptransreq_);
      break;
    }
    // .MEAuth.ST_USER_LOGIN_INFO stSubcriUserLogin = 14;
    case kStSubcriUserLogin: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MsgBody_.stsubcriuserlogin_);
      break;
    }
    // .MEOrderAPI.ST_QUERY_ORDER_INFO stQueryHistoryOrder = 15;
    case kStQueryHistoryOrder: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *MsgBody_.stqueryhistoryorder_);
      break;
    }
    case MSGBODY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntervalMsgHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MEProInterface.IntervalMsgHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const IntervalMsgHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IntervalMsgHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MEProInterface.IntervalMsgHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MEProInterface.IntervalMsgHeader)
    MergeFrom(*source);
  }
}

void IntervalMsgHeader::MergeFrom(const IntervalMsgHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MEProInterface.IntervalMsgHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iflownumber() != 0) {
    set_iflownumber(from.iflownumber());
  }
  if (from.icmd() != 0) {
    set_icmd(from.icmd());
  }
  if (from.imsgtype() != 0) {
    set_imsgtype(from.imsgtype());
  }
  switch (from.MsgBody_case()) {
    case kStUserLogin: {
      mutable_stuserlogin()->::MEAuth::ST_USER_LOGIN_INFO::MergeFrom(from.stuserlogin());
      break;
    }
    case kStLoginResp: {
      mutable_stloginresp()->::MEAuth::ST_USER_LOGIN_RESP::MergeFrom(from.stloginresp());
      break;
    }
    case kStSubmitOrder: {
      mutable_stsubmitorder()->::MEOrderAPI::ST_SUBMIT_ORDER::MergeFrom(from.stsubmitorder());
      break;
    }
    case kStCancelOrder: {
      mutable_stcancelorder()->::MEOrderAPI::ST_SUBMIT_CAMCEL_ORDER::MergeFrom(from.stcancelorder());
      break;
    }
    case kStOrderResp: {
      mutable_storderresp()->::MEOrderAPI::ST_SUBMIT_ORDER_RESP::MergeFrom(from.storderresp());
      break;
    }
    case kStQueryOrder: {
      mutable_stqueryorder()->::MEOrderAPI::ST_QUERY_ORDER_INFO::MergeFrom(from.stqueryorder());
      break;
    }
    case kStQueryResp: {
      mutable_stqueryresp()->::MEOrderAPI::ST_QUERY_ORDER_RES::MergeFrom(from.stqueryresp());
      break;
    }
    case kStTransOrder: {
      mutable_sttransorder()->::MESubcribeAPI::ST_TRANS_ORDER_INFO::MergeFrom(from.sttransorder());
      break;
    }
    case kStMarketData: {
      mutable_stmarketdata()->::MESubcribeAPI::ST_MART_QUOTATION::MergeFrom(from.stmarketdata());
      break;
    }
    case kStReptransReq: {
      mutable_streptransreq()->::MESubcribeAPI::ST_REP_TRANS_ORDER_REQUEST::MergeFrom(from.streptransreq());
      break;
    }
    case kStSubcriUserLogin: {
      mutable_stsubcriuserlogin()->::MEAuth::ST_USER_LOGIN_INFO::MergeFrom(from.stsubcriuserlogin());
      break;
    }
    case kStQueryHistoryOrder: {
      mutable_stqueryhistoryorder()->::MEOrderAPI::ST_QUERY_ORDER_INFO::MergeFrom(from.stqueryhistoryorder());
      break;
    }
    case MSGBODY_NOT_SET: {
      break;
    }
  }
}

void IntervalMsgHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MEProInterface.IntervalMsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntervalMsgHeader::CopyFrom(const IntervalMsgHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MEProInterface.IntervalMsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntervalMsgHeader::IsInitialized() const {
  return true;
}

void IntervalMsgHeader::Swap(IntervalMsgHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntervalMsgHeader::InternalSwap(IntervalMsgHeader* other) {
  using std::swap;
  swap(iflownumber_, other->iflownumber_);
  swap(icmd_, other->icmd_);
  swap(imsgtype_, other->imsgtype_);
  swap(MsgBody_, other->MsgBody_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IntervalMsgHeader::GetMetadata() const {
  protobuf_ME_2eInterface_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ME_2eInterface_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MEProInterface

// @@protoc_insertion_point(global_scope)
