// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ME.MESubcribeAPI.proto

#include "ME.MESubcribeAPI.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace MESubcribeAPI {
class ST_TRANS_ORDER_INFODefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_TRANS_ORDER_INFO>
      _instance;
} _ST_TRANS_ORDER_INFO_default_instance_;
class ST_MART_QUOTATIONDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_MART_QUOTATION>
      _instance;
} _ST_MART_QUOTATION_default_instance_;
class ST_REP_TRANS_ORDER_REQUESTDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_REP_TRANS_ORDER_REQUEST>
      _instance;
} _ST_REP_TRANS_ORDER_REQUEST_default_instance_;
}  // namespace MESubcribeAPI
namespace protobuf_ME_2eMESubcribeAPI_2eproto {
void InitDefaultsST_TRANS_ORDER_INFOImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::MESubcribeAPI::_ST_TRANS_ORDER_INFO_default_instance_;
    new (ptr) ::MESubcribeAPI::ST_TRANS_ORDER_INFO();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MESubcribeAPI::ST_TRANS_ORDER_INFO::InitAsDefaultInstance();
}

void InitDefaultsST_TRANS_ORDER_INFO() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_TRANS_ORDER_INFOImpl);
}

void InitDefaultsST_MART_QUOTATIONImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::MESubcribeAPI::_ST_MART_QUOTATION_default_instance_;
    new (ptr) ::MESubcribeAPI::ST_MART_QUOTATION();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MESubcribeAPI::ST_MART_QUOTATION::InitAsDefaultInstance();
}

void InitDefaultsST_MART_QUOTATION() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_MART_QUOTATIONImpl);
}

void InitDefaultsST_REP_TRANS_ORDER_REQUESTImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::MESubcribeAPI::_ST_REP_TRANS_ORDER_REQUEST_default_instance_;
    new (ptr) ::MESubcribeAPI::ST_REP_TRANS_ORDER_REQUEST();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MESubcribeAPI::ST_REP_TRANS_ORDER_REQUEST::InitAsDefaultInstance();
}

void InitDefaultsST_REP_TRANS_ORDER_REQUEST() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_REP_TRANS_ORDER_REQUESTImpl);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MESubcribeAPI::ST_TRANS_ORDER_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MESubcribeAPI::ST_TRANS_ORDER_INFO, strbidorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MESubcribeAPI::ST_TRANS_ORDER_INFO, straskorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MESubcribeAPI::ST_TRANS_ORDER_INFO, uibiduserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MESubcribeAPI::ST_TRANS_ORDER_INFO, uiaskuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MESubcribeAPI::ST_TRANS_ORDER_INFO, fprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MESubcribeAPI::ST_TRANS_ORDER_INFO, fnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MESubcribeAPI::ST_TRANS_ORDER_INFO, ucexchtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MESubcribeAPI::ST_TRANS_ORDER_INFO, ucrecordid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MESubcribeAPI::ST_TRANS_ORDER_INFO, ucorderstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MESubcribeAPI::ST_TRANS_ORDER_INFO, uiexchobjid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MESubcribeAPI::ST_TRANS_ORDER_INFO, mebidorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MESubcribeAPI::ST_TRANS_ORDER_INFO, measkorderid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MESubcribeAPI::ST_MART_QUOTATION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MESubcribeAPI::ST_MART_QUOTATION, uiuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MESubcribeAPI::ST_MART_QUOTATION, uiexchobjid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MESubcribeAPI::ST_MART_QUOTATION, lcurdealproce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MESubcribeAPI::ST_MART_QUOTATION, ltotaldealproce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MESubcribeAPI::ST_MART_QUOTATION, lbeginproce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MESubcribeAPI::ST_MART_QUOTATION, lhighestproce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MESubcribeAPI::ST_MART_QUOTATION, lminimumproce_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MESubcribeAPI::ST_REP_TRANS_ORDER_REQUEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MESubcribeAPI::ST_REP_TRANS_ORDER_REQUEST, uiuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MESubcribeAPI::ST_REP_TRANS_ORDER_REQUEST, ucexchid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MESubcribeAPI::ST_REP_TRANS_ORDER_REQUEST, uiexchobjid_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MESubcribeAPI::ST_TRANS_ORDER_INFO)},
  { 17, -1, sizeof(::MESubcribeAPI::ST_MART_QUOTATION)},
  { 29, -1, sizeof(::MESubcribeAPI::ST_REP_TRANS_ORDER_REQUEST)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::MESubcribeAPI::_ST_TRANS_ORDER_INFO_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MESubcribeAPI::_ST_MART_QUOTATION_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MESubcribeAPI::_ST_REP_TRANS_ORDER_REQUEST_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ME.MESubcribeAPI.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026ME.MESubcribeAPI.proto\022\rMESubcribeAPI\""
      "\216\002\n\023ST_TRANS_ORDER_INFO\022\025\n\rstrBidOrderID"
      "\030\001 \001(\t\022\025\n\rstrAskOrderID\030\002 \001(\t\022\023\n\013uiBidUs"
      "erID\030\003 \001(\r\022\023\n\013uiAskUserID\030\004 \001(\r\022\016\n\006fPric"
      "e\030\005 \001(\003\022\017\n\007fNumber\030\006 \001(\003\022\022\n\nucExchType\030\007"
      " \001(\r\022\022\n\nucRecordID\030\010 \001(\004\022\025\n\rucOrderStatu"
      "s\030\t \001(\r\022\023\n\013uiExchObjID\030\n \001(\r\022\024\n\014meBidOrd"
      "erID\030\013 \001(\004\022\024\n\014meAskOrderID\030\014 \001(\004\"\255\001\n\021ST_"
      "MART_QUOTATION\022\020\n\010uiUserID\030\001 \001(\r\022\023\n\013uiEx"
      "chObjID\030\002 \001(\r\022\025\n\rlCurDealProce\030\003 \001(\003\022\027\n\017"
      "lTotalDealProce\030\004 \001(\003\022\023\n\013lBeginProce\030\005 \001"
      "(\003\022\025\n\rlHighestProce\030\006 \001(\003\022\025\n\rlMinimumPro"
      "ce\030\007 \001(\003\"U\n\032ST_REP_TRANS_ORDER_REQUEST\022\020"
      "\n\010uiUserID\030\001 \001(\r\022\020\n\010ucExchID\030\002 \001(\004\022\023\n\013ui"
      "ExchObjID\030\003 \001(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 583);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ME.MESubcribeAPI.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ME_2eMESubcribeAPI_2eproto
namespace MESubcribeAPI {

// ===================================================================

void ST_TRANS_ORDER_INFO::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_TRANS_ORDER_INFO::kStrBidOrderIDFieldNumber;
const int ST_TRANS_ORDER_INFO::kStrAskOrderIDFieldNumber;
const int ST_TRANS_ORDER_INFO::kUiBidUserIDFieldNumber;
const int ST_TRANS_ORDER_INFO::kUiAskUserIDFieldNumber;
const int ST_TRANS_ORDER_INFO::kFPriceFieldNumber;
const int ST_TRANS_ORDER_INFO::kFNumberFieldNumber;
const int ST_TRANS_ORDER_INFO::kUcExchTypeFieldNumber;
const int ST_TRANS_ORDER_INFO::kUcRecordIDFieldNumber;
const int ST_TRANS_ORDER_INFO::kUcOrderStatusFieldNumber;
const int ST_TRANS_ORDER_INFO::kUiExchObjIDFieldNumber;
const int ST_TRANS_ORDER_INFO::kMeBidOrderIDFieldNumber;
const int ST_TRANS_ORDER_INFO::kMeAskOrderIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_TRANS_ORDER_INFO::ST_TRANS_ORDER_INFO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ME_2eMESubcribeAPI_2eproto::InitDefaultsST_TRANS_ORDER_INFO();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MESubcribeAPI.ST_TRANS_ORDER_INFO)
}
ST_TRANS_ORDER_INFO::ST_TRANS_ORDER_INFO(const ST_TRANS_ORDER_INFO& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strbidorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strbidorderid().size() > 0) {
    strbidorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strbidorderid_);
  }
  straskorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.straskorderid().size() > 0) {
    straskorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.straskorderid_);
  }
  ::memcpy(&uibiduserid_, &from.uibiduserid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uiexchobjid_) -
    reinterpret_cast<char*>(&uibiduserid_)) + sizeof(uiexchobjid_));
  // @@protoc_insertion_point(copy_constructor:MESubcribeAPI.ST_TRANS_ORDER_INFO)
}

void ST_TRANS_ORDER_INFO::SharedCtor() {
  strbidorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  straskorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uibiduserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uiexchobjid_) -
      reinterpret_cast<char*>(&uibiduserid_)) + sizeof(uiexchobjid_));
  _cached_size_ = 0;
}

ST_TRANS_ORDER_INFO::~ST_TRANS_ORDER_INFO() {
  // @@protoc_insertion_point(destructor:MESubcribeAPI.ST_TRANS_ORDER_INFO)
  SharedDtor();
}

void ST_TRANS_ORDER_INFO::SharedDtor() {
  strbidorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  straskorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ST_TRANS_ORDER_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_TRANS_ORDER_INFO::descriptor() {
  ::protobuf_ME_2eMESubcribeAPI_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ME_2eMESubcribeAPI_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_TRANS_ORDER_INFO& ST_TRANS_ORDER_INFO::default_instance() {
  ::protobuf_ME_2eMESubcribeAPI_2eproto::InitDefaultsST_TRANS_ORDER_INFO();
  return *internal_default_instance();
}

ST_TRANS_ORDER_INFO* ST_TRANS_ORDER_INFO::New(::google::protobuf::Arena* arena) const {
  ST_TRANS_ORDER_INFO* n = new ST_TRANS_ORDER_INFO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ST_TRANS_ORDER_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:MESubcribeAPI.ST_TRANS_ORDER_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strbidorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  straskorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uibiduserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uiexchobjid_) -
      reinterpret_cast<char*>(&uibiduserid_)) + sizeof(uiexchobjid_));
  _internal_metadata_.Clear();
}

bool ST_TRANS_ORDER_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MESubcribeAPI.ST_TRANS_ORDER_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strBidOrderID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strbidorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strbidorderid().data(), static_cast<int>(this->strbidorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MESubcribeAPI.ST_TRANS_ORDER_INFO.strBidOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strAskOrderID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straskorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->straskorderid().data(), static_cast<int>(this->straskorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MESubcribeAPI.ST_TRANS_ORDER_INFO.strAskOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiBidUserID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibiduserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiAskUserID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiaskuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 fPrice = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 fNumber = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ucExchType = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ucexchtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ucRecordID = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ucrecordid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ucOrderStatus = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ucorderstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiExchObjID = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiexchobjid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 meBidOrderID = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mebidorderid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 meAskOrderID = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &measkorderid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MESubcribeAPI.ST_TRANS_ORDER_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MESubcribeAPI.ST_TRANS_ORDER_INFO)
  return false;
#undef DO_
}

void ST_TRANS_ORDER_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MESubcribeAPI.ST_TRANS_ORDER_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string strBidOrderID = 1;
  if (this->strbidorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strbidorderid().data(), static_cast<int>(this->strbidorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MESubcribeAPI.ST_TRANS_ORDER_INFO.strBidOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strbidorderid(), output);
  }

  // string strAskOrderID = 2;
  if (this->straskorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->straskorderid().data(), static_cast<int>(this->straskorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MESubcribeAPI.ST_TRANS_ORDER_INFO.strAskOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->straskorderid(), output);
  }

  // uint32 uiBidUserID = 3;
  if (this->uibiduserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uibiduserid(), output);
  }

  // uint32 uiAskUserID = 4;
  if (this->uiaskuserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uiaskuserid(), output);
  }

  // int64 fPrice = 5;
  if (this->fprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->fprice(), output);
  }

  // int64 fNumber = 6;
  if (this->fnumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->fnumber(), output);
  }

  // uint32 ucExchType = 7;
  if (this->ucexchtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ucexchtype(), output);
  }

  // uint64 ucRecordID = 8;
  if (this->ucrecordid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->ucrecordid(), output);
  }

  // uint32 ucOrderStatus = 9;
  if (this->ucorderstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ucorderstatus(), output);
  }

  // uint32 uiExchObjID = 10;
  if (this->uiexchobjid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->uiexchobjid(), output);
  }

  // uint64 meBidOrderID = 11;
  if (this->mebidorderid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->mebidorderid(), output);
  }

  // uint64 meAskOrderID = 12;
  if (this->measkorderid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->measkorderid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MESubcribeAPI.ST_TRANS_ORDER_INFO)
}

::google::protobuf::uint8* ST_TRANS_ORDER_INFO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MESubcribeAPI.ST_TRANS_ORDER_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string strBidOrderID = 1;
  if (this->strbidorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strbidorderid().data(), static_cast<int>(this->strbidorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MESubcribeAPI.ST_TRANS_ORDER_INFO.strBidOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strbidorderid(), target);
  }

  // string strAskOrderID = 2;
  if (this->straskorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->straskorderid().data(), static_cast<int>(this->straskorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MESubcribeAPI.ST_TRANS_ORDER_INFO.strAskOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->straskorderid(), target);
  }

  // uint32 uiBidUserID = 3;
  if (this->uibiduserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uibiduserid(), target);
  }

  // uint32 uiAskUserID = 4;
  if (this->uiaskuserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uiaskuserid(), target);
  }

  // int64 fPrice = 5;
  if (this->fprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->fprice(), target);
  }

  // int64 fNumber = 6;
  if (this->fnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->fnumber(), target);
  }

  // uint32 ucExchType = 7;
  if (this->ucexchtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ucexchtype(), target);
  }

  // uint64 ucRecordID = 8;
  if (this->ucrecordid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->ucrecordid(), target);
  }

  // uint32 ucOrderStatus = 9;
  if (this->ucorderstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ucorderstatus(), target);
  }

  // uint32 uiExchObjID = 10;
  if (this->uiexchobjid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->uiexchobjid(), target);
  }

  // uint64 meBidOrderID = 11;
  if (this->mebidorderid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->mebidorderid(), target);
  }

  // uint64 meAskOrderID = 12;
  if (this->measkorderid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->measkorderid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MESubcribeAPI.ST_TRANS_ORDER_INFO)
  return target;
}

size_t ST_TRANS_ORDER_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MESubcribeAPI.ST_TRANS_ORDER_INFO)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string strBidOrderID = 1;
  if (this->strbidorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strbidorderid());
  }

  // string strAskOrderID = 2;
  if (this->straskorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->straskorderid());
  }

  // uint32 uiBidUserID = 3;
  if (this->uibiduserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uibiduserid());
  }

  // uint32 uiAskUserID = 4;
  if (this->uiaskuserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiaskuserid());
  }

  // int64 fPrice = 5;
  if (this->fprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->fprice());
  }

  // int64 fNumber = 6;
  if (this->fnumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->fnumber());
  }

  // uint64 ucRecordID = 8;
  if (this->ucrecordid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ucrecordid());
  }

  // uint32 ucExchType = 7;
  if (this->ucexchtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ucexchtype());
  }

  // uint32 ucOrderStatus = 9;
  if (this->ucorderstatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ucorderstatus());
  }

  // uint64 meBidOrderID = 11;
  if (this->mebidorderid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mebidorderid());
  }

  // uint64 meAskOrderID = 12;
  if (this->measkorderid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->measkorderid());
  }

  // uint32 uiExchObjID = 10;
  if (this->uiexchobjid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiexchobjid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_TRANS_ORDER_INFO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MESubcribeAPI.ST_TRANS_ORDER_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_TRANS_ORDER_INFO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_TRANS_ORDER_INFO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MESubcribeAPI.ST_TRANS_ORDER_INFO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MESubcribeAPI.ST_TRANS_ORDER_INFO)
    MergeFrom(*source);
  }
}

void ST_TRANS_ORDER_INFO::MergeFrom(const ST_TRANS_ORDER_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MESubcribeAPI.ST_TRANS_ORDER_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strbidorderid().size() > 0) {

    strbidorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strbidorderid_);
  }
  if (from.straskorderid().size() > 0) {

    straskorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.straskorderid_);
  }
  if (from.uibiduserid() != 0) {
    set_uibiduserid(from.uibiduserid());
  }
  if (from.uiaskuserid() != 0) {
    set_uiaskuserid(from.uiaskuserid());
  }
  if (from.fprice() != 0) {
    set_fprice(from.fprice());
  }
  if (from.fnumber() != 0) {
    set_fnumber(from.fnumber());
  }
  if (from.ucrecordid() != 0) {
    set_ucrecordid(from.ucrecordid());
  }
  if (from.ucexchtype() != 0) {
    set_ucexchtype(from.ucexchtype());
  }
  if (from.ucorderstatus() != 0) {
    set_ucorderstatus(from.ucorderstatus());
  }
  if (from.mebidorderid() != 0) {
    set_mebidorderid(from.mebidorderid());
  }
  if (from.measkorderid() != 0) {
    set_measkorderid(from.measkorderid());
  }
  if (from.uiexchobjid() != 0) {
    set_uiexchobjid(from.uiexchobjid());
  }
}

void ST_TRANS_ORDER_INFO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MESubcribeAPI.ST_TRANS_ORDER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_TRANS_ORDER_INFO::CopyFrom(const ST_TRANS_ORDER_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MESubcribeAPI.ST_TRANS_ORDER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_TRANS_ORDER_INFO::IsInitialized() const {
  return true;
}

void ST_TRANS_ORDER_INFO::Swap(ST_TRANS_ORDER_INFO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_TRANS_ORDER_INFO::InternalSwap(ST_TRANS_ORDER_INFO* other) {
  using std::swap;
  strbidorderid_.Swap(&other->strbidorderid_);
  straskorderid_.Swap(&other->straskorderid_);
  swap(uibiduserid_, other->uibiduserid_);
  swap(uiaskuserid_, other->uiaskuserid_);
  swap(fprice_, other->fprice_);
  swap(fnumber_, other->fnumber_);
  swap(ucrecordid_, other->ucrecordid_);
  swap(ucexchtype_, other->ucexchtype_);
  swap(ucorderstatus_, other->ucorderstatus_);
  swap(mebidorderid_, other->mebidorderid_);
  swap(measkorderid_, other->measkorderid_);
  swap(uiexchobjid_, other->uiexchobjid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_TRANS_ORDER_INFO::GetMetadata() const {
  protobuf_ME_2eMESubcribeAPI_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ME_2eMESubcribeAPI_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ST_MART_QUOTATION::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_MART_QUOTATION::kUiUserIDFieldNumber;
const int ST_MART_QUOTATION::kUiExchObjIDFieldNumber;
const int ST_MART_QUOTATION::kLCurDealProceFieldNumber;
const int ST_MART_QUOTATION::kLTotalDealProceFieldNumber;
const int ST_MART_QUOTATION::kLBeginProceFieldNumber;
const int ST_MART_QUOTATION::kLHighestProceFieldNumber;
const int ST_MART_QUOTATION::kLMinimumProceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_MART_QUOTATION::ST_MART_QUOTATION()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ME_2eMESubcribeAPI_2eproto::InitDefaultsST_MART_QUOTATION();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MESubcribeAPI.ST_MART_QUOTATION)
}
ST_MART_QUOTATION::ST_MART_QUOTATION(const ST_MART_QUOTATION& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uiuserid_, &from.uiuserid_,
    static_cast<size_t>(reinterpret_cast<char*>(&lminimumproce_) -
    reinterpret_cast<char*>(&uiuserid_)) + sizeof(lminimumproce_));
  // @@protoc_insertion_point(copy_constructor:MESubcribeAPI.ST_MART_QUOTATION)
}

void ST_MART_QUOTATION::SharedCtor() {
  ::memset(&uiuserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lminimumproce_) -
      reinterpret_cast<char*>(&uiuserid_)) + sizeof(lminimumproce_));
  _cached_size_ = 0;
}

ST_MART_QUOTATION::~ST_MART_QUOTATION() {
  // @@protoc_insertion_point(destructor:MESubcribeAPI.ST_MART_QUOTATION)
  SharedDtor();
}

void ST_MART_QUOTATION::SharedDtor() {
}

void ST_MART_QUOTATION::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_MART_QUOTATION::descriptor() {
  ::protobuf_ME_2eMESubcribeAPI_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ME_2eMESubcribeAPI_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_MART_QUOTATION& ST_MART_QUOTATION::default_instance() {
  ::protobuf_ME_2eMESubcribeAPI_2eproto::InitDefaultsST_MART_QUOTATION();
  return *internal_default_instance();
}

ST_MART_QUOTATION* ST_MART_QUOTATION::New(::google::protobuf::Arena* arena) const {
  ST_MART_QUOTATION* n = new ST_MART_QUOTATION;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ST_MART_QUOTATION::Clear() {
// @@protoc_insertion_point(message_clear_start:MESubcribeAPI.ST_MART_QUOTATION)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uiuserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lminimumproce_) -
      reinterpret_cast<char*>(&uiuserid_)) + sizeof(lminimumproce_));
  _internal_metadata_.Clear();
}

bool ST_MART_QUOTATION::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MESubcribeAPI.ST_MART_QUOTATION)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uiUserID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiExchObjID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiexchobjid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lCurDealProce = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lcurdealproce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lTotalDealProce = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ltotaldealproce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lBeginProce = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lbeginproce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lHighestProce = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lhighestproce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lMinimumProce = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lminimumproce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MESubcribeAPI.ST_MART_QUOTATION)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MESubcribeAPI.ST_MART_QUOTATION)
  return false;
#undef DO_
}

void ST_MART_QUOTATION::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MESubcribeAPI.ST_MART_QUOTATION)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiuserid(), output);
  }

  // uint32 uiExchObjID = 2;
  if (this->uiexchobjid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiexchobjid(), output);
  }

  // int64 lCurDealProce = 3;
  if (this->lcurdealproce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->lcurdealproce(), output);
  }

  // int64 lTotalDealProce = 4;
  if (this->ltotaldealproce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ltotaldealproce(), output);
  }

  // int64 lBeginProce = 5;
  if (this->lbeginproce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->lbeginproce(), output);
  }

  // int64 lHighestProce = 6;
  if (this->lhighestproce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->lhighestproce(), output);
  }

  // int64 lMinimumProce = 7;
  if (this->lminimumproce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->lminimumproce(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MESubcribeAPI.ST_MART_QUOTATION)
}

::google::protobuf::uint8* ST_MART_QUOTATION::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MESubcribeAPI.ST_MART_QUOTATION)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiuserid(), target);
  }

  // uint32 uiExchObjID = 2;
  if (this->uiexchobjid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiexchobjid(), target);
  }

  // int64 lCurDealProce = 3;
  if (this->lcurdealproce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->lcurdealproce(), target);
  }

  // int64 lTotalDealProce = 4;
  if (this->ltotaldealproce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ltotaldealproce(), target);
  }

  // int64 lBeginProce = 5;
  if (this->lbeginproce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->lbeginproce(), target);
  }

  // int64 lHighestProce = 6;
  if (this->lhighestproce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->lhighestproce(), target);
  }

  // int64 lMinimumProce = 7;
  if (this->lminimumproce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->lminimumproce(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MESubcribeAPI.ST_MART_QUOTATION)
  return target;
}

size_t ST_MART_QUOTATION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MESubcribeAPI.ST_MART_QUOTATION)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiuserid());
  }

  // uint32 uiExchObjID = 2;
  if (this->uiexchobjid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiexchobjid());
  }

  // int64 lCurDealProce = 3;
  if (this->lcurdealproce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lcurdealproce());
  }

  // int64 lTotalDealProce = 4;
  if (this->ltotaldealproce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ltotaldealproce());
  }

  // int64 lBeginProce = 5;
  if (this->lbeginproce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lbeginproce());
  }

  // int64 lHighestProce = 6;
  if (this->lhighestproce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lhighestproce());
  }

  // int64 lMinimumProce = 7;
  if (this->lminimumproce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lminimumproce());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_MART_QUOTATION::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MESubcribeAPI.ST_MART_QUOTATION)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_MART_QUOTATION* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_MART_QUOTATION>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MESubcribeAPI.ST_MART_QUOTATION)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MESubcribeAPI.ST_MART_QUOTATION)
    MergeFrom(*source);
  }
}

void ST_MART_QUOTATION::MergeFrom(const ST_MART_QUOTATION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MESubcribeAPI.ST_MART_QUOTATION)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uiuserid() != 0) {
    set_uiuserid(from.uiuserid());
  }
  if (from.uiexchobjid() != 0) {
    set_uiexchobjid(from.uiexchobjid());
  }
  if (from.lcurdealproce() != 0) {
    set_lcurdealproce(from.lcurdealproce());
  }
  if (from.ltotaldealproce() != 0) {
    set_ltotaldealproce(from.ltotaldealproce());
  }
  if (from.lbeginproce() != 0) {
    set_lbeginproce(from.lbeginproce());
  }
  if (from.lhighestproce() != 0) {
    set_lhighestproce(from.lhighestproce());
  }
  if (from.lminimumproce() != 0) {
    set_lminimumproce(from.lminimumproce());
  }
}

void ST_MART_QUOTATION::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MESubcribeAPI.ST_MART_QUOTATION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_MART_QUOTATION::CopyFrom(const ST_MART_QUOTATION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MESubcribeAPI.ST_MART_QUOTATION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_MART_QUOTATION::IsInitialized() const {
  return true;
}

void ST_MART_QUOTATION::Swap(ST_MART_QUOTATION* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_MART_QUOTATION::InternalSwap(ST_MART_QUOTATION* other) {
  using std::swap;
  swap(uiuserid_, other->uiuserid_);
  swap(uiexchobjid_, other->uiexchobjid_);
  swap(lcurdealproce_, other->lcurdealproce_);
  swap(ltotaldealproce_, other->ltotaldealproce_);
  swap(lbeginproce_, other->lbeginproce_);
  swap(lhighestproce_, other->lhighestproce_);
  swap(lminimumproce_, other->lminimumproce_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_MART_QUOTATION::GetMetadata() const {
  protobuf_ME_2eMESubcribeAPI_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ME_2eMESubcribeAPI_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ST_REP_TRANS_ORDER_REQUEST::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_REP_TRANS_ORDER_REQUEST::kUiUserIDFieldNumber;
const int ST_REP_TRANS_ORDER_REQUEST::kUcExchIDFieldNumber;
const int ST_REP_TRANS_ORDER_REQUEST::kUiExchObjIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_REP_TRANS_ORDER_REQUEST::ST_REP_TRANS_ORDER_REQUEST()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ME_2eMESubcribeAPI_2eproto::InitDefaultsST_REP_TRANS_ORDER_REQUEST();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MESubcribeAPI.ST_REP_TRANS_ORDER_REQUEST)
}
ST_REP_TRANS_ORDER_REQUEST::ST_REP_TRANS_ORDER_REQUEST(const ST_REP_TRANS_ORDER_REQUEST& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ucexchid_, &from.ucexchid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uiexchobjid_) -
    reinterpret_cast<char*>(&ucexchid_)) + sizeof(uiexchobjid_));
  // @@protoc_insertion_point(copy_constructor:MESubcribeAPI.ST_REP_TRANS_ORDER_REQUEST)
}

void ST_REP_TRANS_ORDER_REQUEST::SharedCtor() {
  ::memset(&ucexchid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uiexchobjid_) -
      reinterpret_cast<char*>(&ucexchid_)) + sizeof(uiexchobjid_));
  _cached_size_ = 0;
}

ST_REP_TRANS_ORDER_REQUEST::~ST_REP_TRANS_ORDER_REQUEST() {
  // @@protoc_insertion_point(destructor:MESubcribeAPI.ST_REP_TRANS_ORDER_REQUEST)
  SharedDtor();
}

void ST_REP_TRANS_ORDER_REQUEST::SharedDtor() {
}

void ST_REP_TRANS_ORDER_REQUEST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_REP_TRANS_ORDER_REQUEST::descriptor() {
  ::protobuf_ME_2eMESubcribeAPI_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ME_2eMESubcribeAPI_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_REP_TRANS_ORDER_REQUEST& ST_REP_TRANS_ORDER_REQUEST::default_instance() {
  ::protobuf_ME_2eMESubcribeAPI_2eproto::InitDefaultsST_REP_TRANS_ORDER_REQUEST();
  return *internal_default_instance();
}

ST_REP_TRANS_ORDER_REQUEST* ST_REP_TRANS_ORDER_REQUEST::New(::google::protobuf::Arena* arena) const {
  ST_REP_TRANS_ORDER_REQUEST* n = new ST_REP_TRANS_ORDER_REQUEST;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ST_REP_TRANS_ORDER_REQUEST::Clear() {
// @@protoc_insertion_point(message_clear_start:MESubcribeAPI.ST_REP_TRANS_ORDER_REQUEST)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ucexchid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uiexchobjid_) -
      reinterpret_cast<char*>(&ucexchid_)) + sizeof(uiexchobjid_));
  _internal_metadata_.Clear();
}

bool ST_REP_TRANS_ORDER_REQUEST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MESubcribeAPI.ST_REP_TRANS_ORDER_REQUEST)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uiUserID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ucExchID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ucexchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiExchObjID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiexchobjid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MESubcribeAPI.ST_REP_TRANS_ORDER_REQUEST)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MESubcribeAPI.ST_REP_TRANS_ORDER_REQUEST)
  return false;
#undef DO_
}

void ST_REP_TRANS_ORDER_REQUEST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MESubcribeAPI.ST_REP_TRANS_ORDER_REQUEST)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiuserid(), output);
  }

  // uint64 ucExchID = 2;
  if (this->ucexchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ucexchid(), output);
  }

  // uint32 uiExchObjID = 3;
  if (this->uiexchobjid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uiexchobjid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MESubcribeAPI.ST_REP_TRANS_ORDER_REQUEST)
}

::google::protobuf::uint8* ST_REP_TRANS_ORDER_REQUEST::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MESubcribeAPI.ST_REP_TRANS_ORDER_REQUEST)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiuserid(), target);
  }

  // uint64 ucExchID = 2;
  if (this->ucexchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ucexchid(), target);
  }

  // uint32 uiExchObjID = 3;
  if (this->uiexchobjid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uiexchobjid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MESubcribeAPI.ST_REP_TRANS_ORDER_REQUEST)
  return target;
}

size_t ST_REP_TRANS_ORDER_REQUEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MESubcribeAPI.ST_REP_TRANS_ORDER_REQUEST)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 ucExchID = 2;
  if (this->ucexchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ucexchid());
  }

  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiuserid());
  }

  // uint32 uiExchObjID = 3;
  if (this->uiexchobjid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiexchobjid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_REP_TRANS_ORDER_REQUEST::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MESubcribeAPI.ST_REP_TRANS_ORDER_REQUEST)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_REP_TRANS_ORDER_REQUEST* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_REP_TRANS_ORDER_REQUEST>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MESubcribeAPI.ST_REP_TRANS_ORDER_REQUEST)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MESubcribeAPI.ST_REP_TRANS_ORDER_REQUEST)
    MergeFrom(*source);
  }
}

void ST_REP_TRANS_ORDER_REQUEST::MergeFrom(const ST_REP_TRANS_ORDER_REQUEST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MESubcribeAPI.ST_REP_TRANS_ORDER_REQUEST)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ucexchid() != 0) {
    set_ucexchid(from.ucexchid());
  }
  if (from.uiuserid() != 0) {
    set_uiuserid(from.uiuserid());
  }
  if (from.uiexchobjid() != 0) {
    set_uiexchobjid(from.uiexchobjid());
  }
}

void ST_REP_TRANS_ORDER_REQUEST::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MESubcribeAPI.ST_REP_TRANS_ORDER_REQUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_REP_TRANS_ORDER_REQUEST::CopyFrom(const ST_REP_TRANS_ORDER_REQUEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MESubcribeAPI.ST_REP_TRANS_ORDER_REQUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_REP_TRANS_ORDER_REQUEST::IsInitialized() const {
  return true;
}

void ST_REP_TRANS_ORDER_REQUEST::Swap(ST_REP_TRANS_ORDER_REQUEST* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_REP_TRANS_ORDER_REQUEST::InternalSwap(ST_REP_TRANS_ORDER_REQUEST* other) {
  using std::swap;
  swap(ucexchid_, other->ucexchid_);
  swap(uiuserid_, other->uiuserid_);
  swap(uiexchobjid_, other->uiexchobjid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_REP_TRANS_ORDER_REQUEST::GetMetadata() const {
  protobuf_ME_2eMESubcribeAPI_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ME_2eMESubcribeAPI_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MESubcribeAPI

// @@protoc_insertion_point(global_scope)
