// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ME.Auth.proto

#include "ME.Auth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace MEAuth {
class ST_USER_LOGIN_INFODefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_USER_LOGIN_INFO>
      _instance;
} _ST_USER_LOGIN_INFO_default_instance_;
class ST_USER_LOGIN_RESPDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_USER_LOGIN_RESP>
      _instance;
} _ST_USER_LOGIN_RESP_default_instance_;
class ST_SIG_IP_INFODefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_SIG_IP_INFO>
      _instance;
} _ST_SIG_IP_INFO_default_instance_;
class ST_SYMBOL_INFODefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_SYMBOL_INFO>
      _instance;
} _ST_SYMBOL_INFO_default_instance_;
}  // namespace MEAuth
namespace protobuf_ME_2eAuth_2eproto {
void InitDefaultsST_USER_LOGIN_INFOImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::MEAuth::_ST_USER_LOGIN_INFO_default_instance_;
    new (ptr) ::MEAuth::ST_USER_LOGIN_INFO();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MEAuth::ST_USER_LOGIN_INFO::InitAsDefaultInstance();
}

void InitDefaultsST_USER_LOGIN_INFO() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_USER_LOGIN_INFOImpl);
}

void InitDefaultsST_USER_LOGIN_RESPImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ME_2eAuth_2eproto::InitDefaultsST_SIG_IP_INFO();
  protobuf_ME_2eAuth_2eproto::InitDefaultsST_SYMBOL_INFO();
  {
    void* ptr = &::MEAuth::_ST_USER_LOGIN_RESP_default_instance_;
    new (ptr) ::MEAuth::ST_USER_LOGIN_RESP();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MEAuth::ST_USER_LOGIN_RESP::InitAsDefaultInstance();
}

void InitDefaultsST_USER_LOGIN_RESP() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_USER_LOGIN_RESPImpl);
}

void InitDefaultsST_SIG_IP_INFOImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::MEAuth::_ST_SIG_IP_INFO_default_instance_;
    new (ptr) ::MEAuth::ST_SIG_IP_INFO();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MEAuth::ST_SIG_IP_INFO::InitAsDefaultInstance();
}

void InitDefaultsST_SIG_IP_INFO() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_SIG_IP_INFOImpl);
}

void InitDefaultsST_SYMBOL_INFOImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::MEAuth::_ST_SYMBOL_INFO_default_instance_;
    new (ptr) ::MEAuth::ST_SYMBOL_INFO();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MEAuth::ST_SYMBOL_INFO::InitAsDefaultInstance();
}

void InitDefaultsST_SYMBOL_INFO() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_SYMBOL_INFOImpl);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEAuth::ST_USER_LOGIN_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEAuth::ST_USER_LOGIN_INFO, chusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEAuth::ST_USER_LOGIN_INFO, chpasswordtxt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEAuth::ST_USER_LOGIN_INFO, chaddressip_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEAuth::ST_USER_LOGIN_RESP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEAuth::ST_USER_LOGIN_RESP, ucloginrsp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEAuth::ST_USER_LOGIN_RESP, uiuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEAuth::ST_USER_LOGIN_RESP, uiiplisynum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEAuth::ST_USER_LOGIN_RESP, stipinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEAuth::ST_USER_LOGIN_RESP, uisymbolnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEAuth::ST_USER_LOGIN_RESP, stsymbolinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEAuth::ST_USER_LOGIN_RESP, chusername_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEAuth::ST_SIG_IP_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEAuth::ST_SIG_IP_INFO, wiptype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEAuth::ST_SIG_IP_INFO, ucipaddress_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEAuth::ST_SYMBOL_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEAuth::ST_SYMBOL_INFO, uisymbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEAuth::ST_SYMBOL_INFO, uisymbolname_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MEAuth::ST_USER_LOGIN_INFO)},
  { 8, -1, sizeof(::MEAuth::ST_USER_LOGIN_RESP)},
  { 20, -1, sizeof(::MEAuth::ST_SIG_IP_INFO)},
  { 27, -1, sizeof(::MEAuth::ST_SYMBOL_INFO)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::MEAuth::_ST_USER_LOGIN_INFO_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MEAuth::_ST_USER_LOGIN_RESP_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MEAuth::_ST_SIG_IP_INFO_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MEAuth::_ST_SYMBOL_INFO_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ME.Auth.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rME.Auth.proto\022\006MEAuth\"T\n\022ST_USER_LOGIN"
      "_INFO\022\022\n\nchUserName\030\001 \001(\014\022\025\n\rchPasswordT"
      "xt\030\002 \001(\014\022\023\n\013chAddressIp\030\003 \001(\t\"\320\001\n\022ST_USE"
      "R_LOGIN_RESP\022\022\n\nucLoginRsp\030\001 \001(\r\022\020\n\010uiUs"
      "erID\030\002 \001(\r\022\023\n\013uiIPLisyNum\030\003 \001(\r\022(\n\010stIPI"
      "nfo\030\004 \003(\0132\026.MEAuth.ST_SIG_IP_INFO\022\023\n\013uiS"
      "ymbolNum\030\005 \001(\r\022,\n\014stSymbolInfo\030\006 \003(\0132\026.M"
      "EAuth.ST_SYMBOL_INFO\022\022\n\nchUserName\030\007 \001(\014"
      "\"6\n\016ST_SIG_IP_INFO\022\017\n\007wIpType\030\001 \001(\r\022\023\n\013u"
      "cIpAddress\030\002 \001(\014\":\n\016ST_SYMBOL_INFO\022\022\n\nui"
      "SymbolID\030\001 \001(\r\022\024\n\014uiSymbolName\030\002 \001(\014b\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 444);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ME.Auth.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ME_2eAuth_2eproto
namespace MEAuth {

// ===================================================================

void ST_USER_LOGIN_INFO::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_USER_LOGIN_INFO::kChUserNameFieldNumber;
const int ST_USER_LOGIN_INFO::kChPasswordTxtFieldNumber;
const int ST_USER_LOGIN_INFO::kChAddressIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_USER_LOGIN_INFO::ST_USER_LOGIN_INFO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ME_2eAuth_2eproto::InitDefaultsST_USER_LOGIN_INFO();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MEAuth.ST_USER_LOGIN_INFO)
}
ST_USER_LOGIN_INFO::ST_USER_LOGIN_INFO(const ST_USER_LOGIN_INFO& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chusername().size() > 0) {
    chusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chusername_);
  }
  chpasswordtxt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chpasswordtxt().size() > 0) {
    chpasswordtxt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chpasswordtxt_);
  }
  chaddressip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chaddressip().size() > 0) {
    chaddressip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chaddressip_);
  }
  // @@protoc_insertion_point(copy_constructor:MEAuth.ST_USER_LOGIN_INFO)
}

void ST_USER_LOGIN_INFO::SharedCtor() {
  chusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chpasswordtxt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chaddressip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ST_USER_LOGIN_INFO::~ST_USER_LOGIN_INFO() {
  // @@protoc_insertion_point(destructor:MEAuth.ST_USER_LOGIN_INFO)
  SharedDtor();
}

void ST_USER_LOGIN_INFO::SharedDtor() {
  chusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chpasswordtxt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chaddressip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ST_USER_LOGIN_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_USER_LOGIN_INFO::descriptor() {
  ::protobuf_ME_2eAuth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ME_2eAuth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_USER_LOGIN_INFO& ST_USER_LOGIN_INFO::default_instance() {
  ::protobuf_ME_2eAuth_2eproto::InitDefaultsST_USER_LOGIN_INFO();
  return *internal_default_instance();
}

ST_USER_LOGIN_INFO* ST_USER_LOGIN_INFO::New(::google::protobuf::Arena* arena) const {
  ST_USER_LOGIN_INFO* n = new ST_USER_LOGIN_INFO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ST_USER_LOGIN_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:MEAuth.ST_USER_LOGIN_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chpasswordtxt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chaddressip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ST_USER_LOGIN_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MEAuth.ST_USER_LOGIN_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes chUserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chusername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes chPasswordTxt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chpasswordtxt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chAddressIp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chaddressip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chaddressip().data(), static_cast<int>(this->chaddressip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MEAuth.ST_USER_LOGIN_INFO.chAddressIp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MEAuth.ST_USER_LOGIN_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MEAuth.ST_USER_LOGIN_INFO)
  return false;
#undef DO_
}

void ST_USER_LOGIN_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MEAuth.ST_USER_LOGIN_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chUserName = 1;
  if (this->chusername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->chusername(), output);
  }

  // bytes chPasswordTxt = 2;
  if (this->chpasswordtxt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->chpasswordtxt(), output);
  }

  // string chAddressIp = 3;
  if (this->chaddressip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chaddressip().data(), static_cast<int>(this->chaddressip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEAuth.ST_USER_LOGIN_INFO.chAddressIp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->chaddressip(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MEAuth.ST_USER_LOGIN_INFO)
}

::google::protobuf::uint8* ST_USER_LOGIN_INFO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MEAuth.ST_USER_LOGIN_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chUserName = 1;
  if (this->chusername().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->chusername(), target);
  }

  // bytes chPasswordTxt = 2;
  if (this->chpasswordtxt().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->chpasswordtxt(), target);
  }

  // string chAddressIp = 3;
  if (this->chaddressip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chaddressip().data(), static_cast<int>(this->chaddressip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEAuth.ST_USER_LOGIN_INFO.chAddressIp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->chaddressip(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MEAuth.ST_USER_LOGIN_INFO)
  return target;
}

size_t ST_USER_LOGIN_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MEAuth.ST_USER_LOGIN_INFO)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes chUserName = 1;
  if (this->chusername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chusername());
  }

  // bytes chPasswordTxt = 2;
  if (this->chpasswordtxt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chpasswordtxt());
  }

  // string chAddressIp = 3;
  if (this->chaddressip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chaddressip());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_USER_LOGIN_INFO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MEAuth.ST_USER_LOGIN_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_USER_LOGIN_INFO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_USER_LOGIN_INFO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MEAuth.ST_USER_LOGIN_INFO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MEAuth.ST_USER_LOGIN_INFO)
    MergeFrom(*source);
  }
}

void ST_USER_LOGIN_INFO::MergeFrom(const ST_USER_LOGIN_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MEAuth.ST_USER_LOGIN_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chusername().size() > 0) {

    chusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chusername_);
  }
  if (from.chpasswordtxt().size() > 0) {

    chpasswordtxt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chpasswordtxt_);
  }
  if (from.chaddressip().size() > 0) {

    chaddressip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chaddressip_);
  }
}

void ST_USER_LOGIN_INFO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MEAuth.ST_USER_LOGIN_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_USER_LOGIN_INFO::CopyFrom(const ST_USER_LOGIN_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MEAuth.ST_USER_LOGIN_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_USER_LOGIN_INFO::IsInitialized() const {
  return true;
}

void ST_USER_LOGIN_INFO::Swap(ST_USER_LOGIN_INFO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_USER_LOGIN_INFO::InternalSwap(ST_USER_LOGIN_INFO* other) {
  using std::swap;
  chusername_.Swap(&other->chusername_);
  chpasswordtxt_.Swap(&other->chpasswordtxt_);
  chaddressip_.Swap(&other->chaddressip_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_USER_LOGIN_INFO::GetMetadata() const {
  protobuf_ME_2eAuth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ME_2eAuth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ST_USER_LOGIN_RESP::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_USER_LOGIN_RESP::kUcLoginRspFieldNumber;
const int ST_USER_LOGIN_RESP::kUiUserIDFieldNumber;
const int ST_USER_LOGIN_RESP::kUiIPLisyNumFieldNumber;
const int ST_USER_LOGIN_RESP::kStIPInfoFieldNumber;
const int ST_USER_LOGIN_RESP::kUiSymbolNumFieldNumber;
const int ST_USER_LOGIN_RESP::kStSymbolInfoFieldNumber;
const int ST_USER_LOGIN_RESP::kChUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_USER_LOGIN_RESP::ST_USER_LOGIN_RESP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ME_2eAuth_2eproto::InitDefaultsST_USER_LOGIN_RESP();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MEAuth.ST_USER_LOGIN_RESP)
}
ST_USER_LOGIN_RESP::ST_USER_LOGIN_RESP(const ST_USER_LOGIN_RESP& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stipinfo_(from.stipinfo_),
      stsymbolinfo_(from.stsymbolinfo_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chusername().size() > 0) {
    chusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chusername_);
  }
  ::memcpy(&ucloginrsp_, &from.ucloginrsp_,
    static_cast<size_t>(reinterpret_cast<char*>(&uisymbolnum_) -
    reinterpret_cast<char*>(&ucloginrsp_)) + sizeof(uisymbolnum_));
  // @@protoc_insertion_point(copy_constructor:MEAuth.ST_USER_LOGIN_RESP)
}

void ST_USER_LOGIN_RESP::SharedCtor() {
  chusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ucloginrsp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uisymbolnum_) -
      reinterpret_cast<char*>(&ucloginrsp_)) + sizeof(uisymbolnum_));
  _cached_size_ = 0;
}

ST_USER_LOGIN_RESP::~ST_USER_LOGIN_RESP() {
  // @@protoc_insertion_point(destructor:MEAuth.ST_USER_LOGIN_RESP)
  SharedDtor();
}

void ST_USER_LOGIN_RESP::SharedDtor() {
  chusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ST_USER_LOGIN_RESP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_USER_LOGIN_RESP::descriptor() {
  ::protobuf_ME_2eAuth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ME_2eAuth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_USER_LOGIN_RESP& ST_USER_LOGIN_RESP::default_instance() {
  ::protobuf_ME_2eAuth_2eproto::InitDefaultsST_USER_LOGIN_RESP();
  return *internal_default_instance();
}

ST_USER_LOGIN_RESP* ST_USER_LOGIN_RESP::New(::google::protobuf::Arena* arena) const {
  ST_USER_LOGIN_RESP* n = new ST_USER_LOGIN_RESP;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ST_USER_LOGIN_RESP::Clear() {
// @@protoc_insertion_point(message_clear_start:MEAuth.ST_USER_LOGIN_RESP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stipinfo_.Clear();
  stsymbolinfo_.Clear();
  chusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ucloginrsp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uisymbolnum_) -
      reinterpret_cast<char*>(&ucloginrsp_)) + sizeof(uisymbolnum_));
  _internal_metadata_.Clear();
}

bool ST_USER_LOGIN_RESP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MEAuth.ST_USER_LOGIN_RESP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 ucLoginRsp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ucloginrsp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiUserID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiIPLisyNum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiiplisynum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MEAuth.ST_SIG_IP_INFO stIPInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_stipinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiSymbolNum = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uisymbolnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MEAuth.ST_SYMBOL_INFO stSymbolInfo = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_stsymbolinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes chUserName = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chusername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MEAuth.ST_USER_LOGIN_RESP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MEAuth.ST_USER_LOGIN_RESP)
  return false;
#undef DO_
}

void ST_USER_LOGIN_RESP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MEAuth.ST_USER_LOGIN_RESP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ucLoginRsp = 1;
  if (this->ucloginrsp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ucloginrsp(), output);
  }

  // uint32 uiUserID = 2;
  if (this->uiuserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiuserid(), output);
  }

  // uint32 uiIPLisyNum = 3;
  if (this->uiiplisynum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uiiplisynum(), output);
  }

  // repeated .MEAuth.ST_SIG_IP_INFO stIPInfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stipinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stipinfo(static_cast<int>(i)), output);
  }

  // uint32 uiSymbolNum = 5;
  if (this->uisymbolnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uisymbolnum(), output);
  }

  // repeated .MEAuth.ST_SYMBOL_INFO stSymbolInfo = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stsymbolinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->stsymbolinfo(static_cast<int>(i)), output);
  }

  // bytes chUserName = 7;
  if (this->chusername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->chusername(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MEAuth.ST_USER_LOGIN_RESP)
}

::google::protobuf::uint8* ST_USER_LOGIN_RESP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MEAuth.ST_USER_LOGIN_RESP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ucLoginRsp = 1;
  if (this->ucloginrsp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ucloginrsp(), target);
  }

  // uint32 uiUserID = 2;
  if (this->uiuserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiuserid(), target);
  }

  // uint32 uiIPLisyNum = 3;
  if (this->uiiplisynum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uiiplisynum(), target);
  }

  // repeated .MEAuth.ST_SIG_IP_INFO stIPInfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stipinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->stipinfo(static_cast<int>(i)), deterministic, target);
  }

  // uint32 uiSymbolNum = 5;
  if (this->uisymbolnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uisymbolnum(), target);
  }

  // repeated .MEAuth.ST_SYMBOL_INFO stSymbolInfo = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stsymbolinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->stsymbolinfo(static_cast<int>(i)), deterministic, target);
  }

  // bytes chUserName = 7;
  if (this->chusername().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->chusername(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MEAuth.ST_USER_LOGIN_RESP)
  return target;
}

size_t ST_USER_LOGIN_RESP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MEAuth.ST_USER_LOGIN_RESP)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .MEAuth.ST_SIG_IP_INFO stIPInfo = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->stipinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stipinfo(static_cast<int>(i)));
    }
  }

  // repeated .MEAuth.ST_SYMBOL_INFO stSymbolInfo = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->stsymbolinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stsymbolinfo(static_cast<int>(i)));
    }
  }

  // bytes chUserName = 7;
  if (this->chusername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chusername());
  }

  // uint32 ucLoginRsp = 1;
  if (this->ucloginrsp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ucloginrsp());
  }

  // uint32 uiUserID = 2;
  if (this->uiuserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiuserid());
  }

  // uint32 uiIPLisyNum = 3;
  if (this->uiiplisynum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiiplisynum());
  }

  // uint32 uiSymbolNum = 5;
  if (this->uisymbolnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uisymbolnum());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_USER_LOGIN_RESP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MEAuth.ST_USER_LOGIN_RESP)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_USER_LOGIN_RESP* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_USER_LOGIN_RESP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MEAuth.ST_USER_LOGIN_RESP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MEAuth.ST_USER_LOGIN_RESP)
    MergeFrom(*source);
  }
}

void ST_USER_LOGIN_RESP::MergeFrom(const ST_USER_LOGIN_RESP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MEAuth.ST_USER_LOGIN_RESP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stipinfo_.MergeFrom(from.stipinfo_);
  stsymbolinfo_.MergeFrom(from.stsymbolinfo_);
  if (from.chusername().size() > 0) {

    chusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chusername_);
  }
  if (from.ucloginrsp() != 0) {
    set_ucloginrsp(from.ucloginrsp());
  }
  if (from.uiuserid() != 0) {
    set_uiuserid(from.uiuserid());
  }
  if (from.uiiplisynum() != 0) {
    set_uiiplisynum(from.uiiplisynum());
  }
  if (from.uisymbolnum() != 0) {
    set_uisymbolnum(from.uisymbolnum());
  }
}

void ST_USER_LOGIN_RESP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MEAuth.ST_USER_LOGIN_RESP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_USER_LOGIN_RESP::CopyFrom(const ST_USER_LOGIN_RESP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MEAuth.ST_USER_LOGIN_RESP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_USER_LOGIN_RESP::IsInitialized() const {
  return true;
}

void ST_USER_LOGIN_RESP::Swap(ST_USER_LOGIN_RESP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_USER_LOGIN_RESP::InternalSwap(ST_USER_LOGIN_RESP* other) {
  using std::swap;
  stipinfo_.InternalSwap(&other->stipinfo_);
  stsymbolinfo_.InternalSwap(&other->stsymbolinfo_);
  chusername_.Swap(&other->chusername_);
  swap(ucloginrsp_, other->ucloginrsp_);
  swap(uiuserid_, other->uiuserid_);
  swap(uiiplisynum_, other->uiiplisynum_);
  swap(uisymbolnum_, other->uisymbolnum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_USER_LOGIN_RESP::GetMetadata() const {
  protobuf_ME_2eAuth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ME_2eAuth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ST_SIG_IP_INFO::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_SIG_IP_INFO::kWIpTypeFieldNumber;
const int ST_SIG_IP_INFO::kUcIpAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_SIG_IP_INFO::ST_SIG_IP_INFO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ME_2eAuth_2eproto::InitDefaultsST_SIG_IP_INFO();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MEAuth.ST_SIG_IP_INFO)
}
ST_SIG_IP_INFO::ST_SIG_IP_INFO(const ST_SIG_IP_INFO& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ucipaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ucipaddress().size() > 0) {
    ucipaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ucipaddress_);
  }
  wiptype_ = from.wiptype_;
  // @@protoc_insertion_point(copy_constructor:MEAuth.ST_SIG_IP_INFO)
}

void ST_SIG_IP_INFO::SharedCtor() {
  ucipaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wiptype_ = 0u;
  _cached_size_ = 0;
}

ST_SIG_IP_INFO::~ST_SIG_IP_INFO() {
  // @@protoc_insertion_point(destructor:MEAuth.ST_SIG_IP_INFO)
  SharedDtor();
}

void ST_SIG_IP_INFO::SharedDtor() {
  ucipaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ST_SIG_IP_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_SIG_IP_INFO::descriptor() {
  ::protobuf_ME_2eAuth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ME_2eAuth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_SIG_IP_INFO& ST_SIG_IP_INFO::default_instance() {
  ::protobuf_ME_2eAuth_2eproto::InitDefaultsST_SIG_IP_INFO();
  return *internal_default_instance();
}

ST_SIG_IP_INFO* ST_SIG_IP_INFO::New(::google::protobuf::Arena* arena) const {
  ST_SIG_IP_INFO* n = new ST_SIG_IP_INFO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ST_SIG_IP_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:MEAuth.ST_SIG_IP_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ucipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wiptype_ = 0u;
  _internal_metadata_.Clear();
}

bool ST_SIG_IP_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MEAuth.ST_SIG_IP_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 wIpType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wiptype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes ucIpAddress = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ucipaddress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MEAuth.ST_SIG_IP_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MEAuth.ST_SIG_IP_INFO)
  return false;
#undef DO_
}

void ST_SIG_IP_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MEAuth.ST_SIG_IP_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 wIpType = 1;
  if (this->wiptype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wiptype(), output);
  }

  // bytes ucIpAddress = 2;
  if (this->ucipaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->ucipaddress(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MEAuth.ST_SIG_IP_INFO)
}

::google::protobuf::uint8* ST_SIG_IP_INFO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MEAuth.ST_SIG_IP_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 wIpType = 1;
  if (this->wiptype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wiptype(), target);
  }

  // bytes ucIpAddress = 2;
  if (this->ucipaddress().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ucipaddress(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MEAuth.ST_SIG_IP_INFO)
  return target;
}

size_t ST_SIG_IP_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MEAuth.ST_SIG_IP_INFO)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes ucIpAddress = 2;
  if (this->ucipaddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ucipaddress());
  }

  // uint32 wIpType = 1;
  if (this->wiptype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wiptype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_SIG_IP_INFO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MEAuth.ST_SIG_IP_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_SIG_IP_INFO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_SIG_IP_INFO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MEAuth.ST_SIG_IP_INFO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MEAuth.ST_SIG_IP_INFO)
    MergeFrom(*source);
  }
}

void ST_SIG_IP_INFO::MergeFrom(const ST_SIG_IP_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MEAuth.ST_SIG_IP_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ucipaddress().size() > 0) {

    ucipaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ucipaddress_);
  }
  if (from.wiptype() != 0) {
    set_wiptype(from.wiptype());
  }
}

void ST_SIG_IP_INFO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MEAuth.ST_SIG_IP_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_SIG_IP_INFO::CopyFrom(const ST_SIG_IP_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MEAuth.ST_SIG_IP_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_SIG_IP_INFO::IsInitialized() const {
  return true;
}

void ST_SIG_IP_INFO::Swap(ST_SIG_IP_INFO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_SIG_IP_INFO::InternalSwap(ST_SIG_IP_INFO* other) {
  using std::swap;
  ucipaddress_.Swap(&other->ucipaddress_);
  swap(wiptype_, other->wiptype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_SIG_IP_INFO::GetMetadata() const {
  protobuf_ME_2eAuth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ME_2eAuth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ST_SYMBOL_INFO::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_SYMBOL_INFO::kUiSymbolIDFieldNumber;
const int ST_SYMBOL_INFO::kUiSymbolNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_SYMBOL_INFO::ST_SYMBOL_INFO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ME_2eAuth_2eproto::InitDefaultsST_SYMBOL_INFO();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MEAuth.ST_SYMBOL_INFO)
}
ST_SYMBOL_INFO::ST_SYMBOL_INFO(const ST_SYMBOL_INFO& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uisymbolname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uisymbolname().size() > 0) {
    uisymbolname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uisymbolname_);
  }
  uisymbolid_ = from.uisymbolid_;
  // @@protoc_insertion_point(copy_constructor:MEAuth.ST_SYMBOL_INFO)
}

void ST_SYMBOL_INFO::SharedCtor() {
  uisymbolname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uisymbolid_ = 0u;
  _cached_size_ = 0;
}

ST_SYMBOL_INFO::~ST_SYMBOL_INFO() {
  // @@protoc_insertion_point(destructor:MEAuth.ST_SYMBOL_INFO)
  SharedDtor();
}

void ST_SYMBOL_INFO::SharedDtor() {
  uisymbolname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ST_SYMBOL_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_SYMBOL_INFO::descriptor() {
  ::protobuf_ME_2eAuth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ME_2eAuth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_SYMBOL_INFO& ST_SYMBOL_INFO::default_instance() {
  ::protobuf_ME_2eAuth_2eproto::InitDefaultsST_SYMBOL_INFO();
  return *internal_default_instance();
}

ST_SYMBOL_INFO* ST_SYMBOL_INFO::New(::google::protobuf::Arena* arena) const {
  ST_SYMBOL_INFO* n = new ST_SYMBOL_INFO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ST_SYMBOL_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:MEAuth.ST_SYMBOL_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uisymbolname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uisymbolid_ = 0u;
  _internal_metadata_.Clear();
}

bool ST_SYMBOL_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MEAuth.ST_SYMBOL_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uiSymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uisymbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes uiSymbolName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uisymbolname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MEAuth.ST_SYMBOL_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MEAuth.ST_SYMBOL_INFO)
  return false;
#undef DO_
}

void ST_SYMBOL_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MEAuth.ST_SYMBOL_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiSymbolID = 1;
  if (this->uisymbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uisymbolid(), output);
  }

  // bytes uiSymbolName = 2;
  if (this->uisymbolname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->uisymbolname(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MEAuth.ST_SYMBOL_INFO)
}

::google::protobuf::uint8* ST_SYMBOL_INFO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MEAuth.ST_SYMBOL_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiSymbolID = 1;
  if (this->uisymbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uisymbolid(), target);
  }

  // bytes uiSymbolName = 2;
  if (this->uisymbolname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uisymbolname(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MEAuth.ST_SYMBOL_INFO)
  return target;
}

size_t ST_SYMBOL_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MEAuth.ST_SYMBOL_INFO)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes uiSymbolName = 2;
  if (this->uisymbolname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uisymbolname());
  }

  // uint32 uiSymbolID = 1;
  if (this->uisymbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uisymbolid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_SYMBOL_INFO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MEAuth.ST_SYMBOL_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_SYMBOL_INFO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_SYMBOL_INFO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MEAuth.ST_SYMBOL_INFO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MEAuth.ST_SYMBOL_INFO)
    MergeFrom(*source);
  }
}

void ST_SYMBOL_INFO::MergeFrom(const ST_SYMBOL_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MEAuth.ST_SYMBOL_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uisymbolname().size() > 0) {

    uisymbolname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uisymbolname_);
  }
  if (from.uisymbolid() != 0) {
    set_uisymbolid(from.uisymbolid());
  }
}

void ST_SYMBOL_INFO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MEAuth.ST_SYMBOL_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_SYMBOL_INFO::CopyFrom(const ST_SYMBOL_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MEAuth.ST_SYMBOL_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_SYMBOL_INFO::IsInitialized() const {
  return true;
}

void ST_SYMBOL_INFO::Swap(ST_SYMBOL_INFO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_SYMBOL_INFO::InternalSwap(ST_SYMBOL_INFO* other) {
  using std::swap;
  uisymbolname_.Swap(&other->uisymbolname_);
  swap(uisymbolid_, other->uisymbolid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_SYMBOL_INFO::GetMetadata() const {
  protobuf_ME_2eAuth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ME_2eAuth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MEAuth

// @@protoc_insertion_point(global_scope)
