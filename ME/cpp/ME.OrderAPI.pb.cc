// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ME.OrderAPI.proto

#include "ME.OrderAPI.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace MEOrderAPI {
class ST_SUBMIT_ORDERDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_SUBMIT_ORDER>
      _instance;
} _ST_SUBMIT_ORDER_default_instance_;
class ST_SUBMIT_CAMCEL_ORDERDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_SUBMIT_CAMCEL_ORDER>
      _instance;
} _ST_SUBMIT_CAMCEL_ORDER_default_instance_;
class ST_SUBMIT_ORDER_RESPDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_SUBMIT_ORDER_RESP>
      _instance;
} _ST_SUBMIT_ORDER_RESP_default_instance_;
class ST_QUERY_ORDER_INFODefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_QUERY_ORDER_INFO>
      _instance;
} _ST_QUERY_ORDER_INFO_default_instance_;
class ST_QUERY_ORDER_RESDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ST_QUERY_ORDER_RES>
      _instance;
} _ST_QUERY_ORDER_RES_default_instance_;
}  // namespace MEOrderAPI
namespace protobuf_ME_2eOrderAPI_2eproto {
void InitDefaultsST_SUBMIT_ORDERImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::MEOrderAPI::_ST_SUBMIT_ORDER_default_instance_;
    new (ptr) ::MEOrderAPI::ST_SUBMIT_ORDER();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MEOrderAPI::ST_SUBMIT_ORDER::InitAsDefaultInstance();
}

void InitDefaultsST_SUBMIT_ORDER() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_SUBMIT_ORDERImpl);
}

void InitDefaultsST_SUBMIT_CAMCEL_ORDERImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::MEOrderAPI::_ST_SUBMIT_CAMCEL_ORDER_default_instance_;
    new (ptr) ::MEOrderAPI::ST_SUBMIT_CAMCEL_ORDER();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MEOrderAPI::ST_SUBMIT_CAMCEL_ORDER::InitAsDefaultInstance();
}

void InitDefaultsST_SUBMIT_CAMCEL_ORDER() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_SUBMIT_CAMCEL_ORDERImpl);
}

void InitDefaultsST_SUBMIT_ORDER_RESPImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::MEOrderAPI::_ST_SUBMIT_ORDER_RESP_default_instance_;
    new (ptr) ::MEOrderAPI::ST_SUBMIT_ORDER_RESP();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MEOrderAPI::ST_SUBMIT_ORDER_RESP::InitAsDefaultInstance();
}

void InitDefaultsST_SUBMIT_ORDER_RESP() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_SUBMIT_ORDER_RESPImpl);
}

void InitDefaultsST_QUERY_ORDER_INFOImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::MEOrderAPI::_ST_QUERY_ORDER_INFO_default_instance_;
    new (ptr) ::MEOrderAPI::ST_QUERY_ORDER_INFO();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MEOrderAPI::ST_QUERY_ORDER_INFO::InitAsDefaultInstance();
}

void InitDefaultsST_QUERY_ORDER_INFO() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_QUERY_ORDER_INFOImpl);
}

void InitDefaultsST_QUERY_ORDER_RESImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::MEOrderAPI::_ST_QUERY_ORDER_RES_default_instance_;
    new (ptr) ::MEOrderAPI::ST_QUERY_ORDER_RES();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MEOrderAPI::ST_QUERY_ORDER_RES::InitAsDefaultInstance();
}

void InitDefaultsST_QUERY_ORDER_RES() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsST_QUERY_ORDER_RESImpl);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_ORDER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_ORDER, strorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_ORDER, lsubmittime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_ORDER, uctranstype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_ORDER, ucordertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_ORDER, uiuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_ORDER, uiexchobjid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_ORDER, lprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_ORDER, lnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_ORDER, uiorderindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_ORDER, ucrecordid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_CAMCEL_ORDER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_CAMCEL_ORDER, strorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_CAMCEL_ORDER, lorderidfrme_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_CAMCEL_ORDER, uiorderindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_CAMCEL_ORDER, uiuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_CAMCEL_ORDER, uiexchobjid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_CAMCEL_ORDER, uctranstype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_CAMCEL_ORDER, lprice_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_ORDER_RESP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_ORDER_RESP, strorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_ORDER_RESP, uisubmitorderiype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_ORDER_RESP, lorderidfrme_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_ORDER_RESP, uiorderindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_ORDER_RESP, uiorderstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_ORDER_RESP, strtext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_SUBMIT_ORDER_RESP, uiuserid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_QUERY_ORDER_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_QUERY_ORDER_INFO, uiuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_QUERY_ORDER_INFO, strorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_QUERY_ORDER_INFO, lorderidfrme_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_QUERY_ORDER_INFO, uiexchobjid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_QUERY_ORDER_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_QUERY_ORDER_RES, uiuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_QUERY_ORDER_RES, strorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_QUERY_ORDER_RES, uiexchobjid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_QUERY_ORDER_RES, wtransstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_QUERY_ORDER_RES, uctranstype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_QUERY_ORDER_RES, lorgprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_QUERY_ORDER_RES, lorgnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_QUERY_ORDER_RES, lavgtransferprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_QUERY_ORDER_RES, lavgtransfernum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MEOrderAPI::ST_QUERY_ORDER_RES, lorderidfrme_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MEOrderAPI::ST_SUBMIT_ORDER)},
  { 15, -1, sizeof(::MEOrderAPI::ST_SUBMIT_CAMCEL_ORDER)},
  { 27, -1, sizeof(::MEOrderAPI::ST_SUBMIT_ORDER_RESP)},
  { 39, -1, sizeof(::MEOrderAPI::ST_QUERY_ORDER_INFO)},
  { 48, -1, sizeof(::MEOrderAPI::ST_QUERY_ORDER_RES)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::MEOrderAPI::_ST_SUBMIT_ORDER_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MEOrderAPI::_ST_SUBMIT_CAMCEL_ORDER_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MEOrderAPI::_ST_SUBMIT_ORDER_RESP_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MEOrderAPI::_ST_QUERY_ORDER_INFO_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MEOrderAPI::_ST_QUERY_ORDER_RES_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ME.OrderAPI.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021ME.OrderAPI.proto\022\nMEOrderAPI\"\326\001\n\017ST_S"
      "UBMIT_ORDER\022\022\n\nstrOrderID\030\001 \001(\t\022\023\n\013lSubm"
      "itTime\030\002 \001(\004\022\023\n\013ucTransType\030\003 \001(\r\022\023\n\013ucO"
      "rderType\030\004 \001(\r\022\020\n\010uiUserID\030\005 \001(\r\022\023\n\013uiEx"
      "chObjID\030\006 \001(\r\022\016\n\006lPrice\030\007 \001(\003\022\017\n\007lNumber"
      "\030\010 \001(\003\022\024\n\014uiOrderIndex\030\t \001(\r\022\022\n\nucRecord"
      "ID\030\n \001(\004\"\244\001\n\026ST_SUBMIT_CAMCEL_ORDER\022\022\n\ns"
      "trOrderID\030\001 \001(\t\022\024\n\014lOrderIDFrME\030\002 \001(\004\022\024\n"
      "\014uiOrderIndex\030\003 \001(\r\022\020\n\010uiUserID\030\004 \001(\r\022\023\n"
      "\013uiExchObjID\030\005 \001(\r\022\023\n\013ucTransType\030\006 \001(\r\022"
      "\016\n\006lPrice\030\007 \001(\003\"\253\001\n\024ST_SUBMIT_ORDER_RESP"
      "\022\022\n\nstrOrderID\030\001 \001(\t\022\031\n\021uiSubmitOrderIyp"
      "e\030\002 \001(\r\022\024\n\014lOrderIDFrME\030\003 \001(\004\022\024\n\014uiOrder"
      "Index\030\004 \001(\r\022\025\n\ruiOrderStatus\030\005 \001(\r\022\017\n\007st"
      "rText\030\006 \001(\t\022\020\n\010uiUserID\030\007 \001(\r\"f\n\023ST_QUER"
      "Y_ORDER_INFO\022\020\n\010uiUserID\030\001 \001(\r\022\022\n\nstrOrd"
      "erID\030\002 \001(\t\022\024\n\014lOrderIDFrME\030\003 \001(\004\022\023\n\013uiEx"
      "chObjID\030\004 \001(\r\"\353\001\n\022ST_QUERY_ORDER_RES\022\020\n\010"
      "uiUserID\030\001 \001(\r\022\022\n\nstrOrderID\030\002 \001(\t\022\023\n\013ui"
      "ExchObjID\030\003 \001(\r\022\024\n\014wTransStatus\030\004 \001(\r\022\023\n"
      "\013ucTransType\030\005 \001(\r\022\021\n\tlOrgPrice\030\006 \001(\003\022\022\n"
      "\nlOrgNumber\030\007 \001(\003\022\031\n\021lAvgTransferPrice\030\010"
      " \001(\003\022\027\n\017lAvgTransferNum\030\t \001(\003\022\024\n\014lOrderI"
      "DFrME\030\n \001(\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 939);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ME.OrderAPI.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ME_2eOrderAPI_2eproto
namespace MEOrderAPI {

// ===================================================================

void ST_SUBMIT_ORDER::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_SUBMIT_ORDER::kStrOrderIDFieldNumber;
const int ST_SUBMIT_ORDER::kLSubmitTimeFieldNumber;
const int ST_SUBMIT_ORDER::kUcTransTypeFieldNumber;
const int ST_SUBMIT_ORDER::kUcOrderTypeFieldNumber;
const int ST_SUBMIT_ORDER::kUiUserIDFieldNumber;
const int ST_SUBMIT_ORDER::kUiExchObjIDFieldNumber;
const int ST_SUBMIT_ORDER::kLPriceFieldNumber;
const int ST_SUBMIT_ORDER::kLNumberFieldNumber;
const int ST_SUBMIT_ORDER::kUiOrderIndexFieldNumber;
const int ST_SUBMIT_ORDER::kUcRecordIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_SUBMIT_ORDER::ST_SUBMIT_ORDER()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ME_2eOrderAPI_2eproto::InitDefaultsST_SUBMIT_ORDER();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MEOrderAPI.ST_SUBMIT_ORDER)
}
ST_SUBMIT_ORDER::ST_SUBMIT_ORDER(const ST_SUBMIT_ORDER& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strorderid().size() > 0) {
    strorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strorderid_);
  }
  ::memcpy(&lsubmittime_, &from.lsubmittime_,
    static_cast<size_t>(reinterpret_cast<char*>(&uiorderindex_) -
    reinterpret_cast<char*>(&lsubmittime_)) + sizeof(uiorderindex_));
  // @@protoc_insertion_point(copy_constructor:MEOrderAPI.ST_SUBMIT_ORDER)
}

void ST_SUBMIT_ORDER::SharedCtor() {
  strorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lsubmittime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uiorderindex_) -
      reinterpret_cast<char*>(&lsubmittime_)) + sizeof(uiorderindex_));
  _cached_size_ = 0;
}

ST_SUBMIT_ORDER::~ST_SUBMIT_ORDER() {
  // @@protoc_insertion_point(destructor:MEOrderAPI.ST_SUBMIT_ORDER)
  SharedDtor();
}

void ST_SUBMIT_ORDER::SharedDtor() {
  strorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ST_SUBMIT_ORDER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_SUBMIT_ORDER::descriptor() {
  ::protobuf_ME_2eOrderAPI_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ME_2eOrderAPI_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_SUBMIT_ORDER& ST_SUBMIT_ORDER::default_instance() {
  ::protobuf_ME_2eOrderAPI_2eproto::InitDefaultsST_SUBMIT_ORDER();
  return *internal_default_instance();
}

ST_SUBMIT_ORDER* ST_SUBMIT_ORDER::New(::google::protobuf::Arena* arena) const {
  ST_SUBMIT_ORDER* n = new ST_SUBMIT_ORDER;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ST_SUBMIT_ORDER::Clear() {
// @@protoc_insertion_point(message_clear_start:MEOrderAPI.ST_SUBMIT_ORDER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lsubmittime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uiorderindex_) -
      reinterpret_cast<char*>(&lsubmittime_)) + sizeof(uiorderindex_));
  _internal_metadata_.Clear();
}

bool ST_SUBMIT_ORDER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MEOrderAPI.ST_SUBMIT_ORDER)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strOrderID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strorderid().data(), static_cast<int>(this->strorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MEOrderAPI.ST_SUBMIT_ORDER.strOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lSubmitTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lsubmittime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ucTransType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uctranstype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ucOrderType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ucordertype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiUserID = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiExchObjID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiexchobjid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lPrice = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lNumber = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiOrderIndex = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiorderindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ucRecordID = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ucrecordid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MEOrderAPI.ST_SUBMIT_ORDER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MEOrderAPI.ST_SUBMIT_ORDER)
  return false;
#undef DO_
}

void ST_SUBMIT_ORDER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MEOrderAPI.ST_SUBMIT_ORDER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string strOrderID = 1;
  if (this->strorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strorderid().data(), static_cast<int>(this->strorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEOrderAPI.ST_SUBMIT_ORDER.strOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strorderid(), output);
  }

  // uint64 lSubmitTime = 2;
  if (this->lsubmittime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lsubmittime(), output);
  }

  // uint32 ucTransType = 3;
  if (this->uctranstype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uctranstype(), output);
  }

  // uint32 ucOrderType = 4;
  if (this->ucordertype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ucordertype(), output);
  }

  // uint32 uiUserID = 5;
  if (this->uiuserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uiuserid(), output);
  }

  // uint32 uiExchObjID = 6;
  if (this->uiexchobjid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uiexchobjid(), output);
  }

  // int64 lPrice = 7;
  if (this->lprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->lprice(), output);
  }

  // int64 lNumber = 8;
  if (this->lnumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->lnumber(), output);
  }

  // uint32 uiOrderIndex = 9;
  if (this->uiorderindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->uiorderindex(), output);
  }

  // uint64 ucRecordID = 10;
  if (this->ucrecordid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->ucrecordid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MEOrderAPI.ST_SUBMIT_ORDER)
}

::google::protobuf::uint8* ST_SUBMIT_ORDER::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MEOrderAPI.ST_SUBMIT_ORDER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string strOrderID = 1;
  if (this->strorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strorderid().data(), static_cast<int>(this->strorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEOrderAPI.ST_SUBMIT_ORDER.strOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strorderid(), target);
  }

  // uint64 lSubmitTime = 2;
  if (this->lsubmittime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lsubmittime(), target);
  }

  // uint32 ucTransType = 3;
  if (this->uctranstype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uctranstype(), target);
  }

  // uint32 ucOrderType = 4;
  if (this->ucordertype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ucordertype(), target);
  }

  // uint32 uiUserID = 5;
  if (this->uiuserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uiuserid(), target);
  }

  // uint32 uiExchObjID = 6;
  if (this->uiexchobjid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uiexchobjid(), target);
  }

  // int64 lPrice = 7;
  if (this->lprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->lprice(), target);
  }

  // int64 lNumber = 8;
  if (this->lnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->lnumber(), target);
  }

  // uint32 uiOrderIndex = 9;
  if (this->uiorderindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->uiorderindex(), target);
  }

  // uint64 ucRecordID = 10;
  if (this->ucrecordid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->ucrecordid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MEOrderAPI.ST_SUBMIT_ORDER)
  return target;
}

size_t ST_SUBMIT_ORDER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MEOrderAPI.ST_SUBMIT_ORDER)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string strOrderID = 1;
  if (this->strorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strorderid());
  }

  // uint64 lSubmitTime = 2;
  if (this->lsubmittime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lsubmittime());
  }

  // uint32 ucTransType = 3;
  if (this->uctranstype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uctranstype());
  }

  // uint32 ucOrderType = 4;
  if (this->ucordertype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ucordertype());
  }

  // uint32 uiUserID = 5;
  if (this->uiuserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiuserid());
  }

  // uint32 uiExchObjID = 6;
  if (this->uiexchobjid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiexchobjid());
  }

  // int64 lPrice = 7;
  if (this->lprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lprice());
  }

  // int64 lNumber = 8;
  if (this->lnumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lnumber());
  }

  // uint64 ucRecordID = 10;
  if (this->ucrecordid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ucrecordid());
  }

  // uint32 uiOrderIndex = 9;
  if (this->uiorderindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiorderindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_SUBMIT_ORDER::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MEOrderAPI.ST_SUBMIT_ORDER)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_SUBMIT_ORDER* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_SUBMIT_ORDER>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MEOrderAPI.ST_SUBMIT_ORDER)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MEOrderAPI.ST_SUBMIT_ORDER)
    MergeFrom(*source);
  }
}

void ST_SUBMIT_ORDER::MergeFrom(const ST_SUBMIT_ORDER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MEOrderAPI.ST_SUBMIT_ORDER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strorderid().size() > 0) {

    strorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strorderid_);
  }
  if (from.lsubmittime() != 0) {
    set_lsubmittime(from.lsubmittime());
  }
  if (from.uctranstype() != 0) {
    set_uctranstype(from.uctranstype());
  }
  if (from.ucordertype() != 0) {
    set_ucordertype(from.ucordertype());
  }
  if (from.uiuserid() != 0) {
    set_uiuserid(from.uiuserid());
  }
  if (from.uiexchobjid() != 0) {
    set_uiexchobjid(from.uiexchobjid());
  }
  if (from.lprice() != 0) {
    set_lprice(from.lprice());
  }
  if (from.lnumber() != 0) {
    set_lnumber(from.lnumber());
  }
  if (from.ucrecordid() != 0) {
    set_ucrecordid(from.ucrecordid());
  }
  if (from.uiorderindex() != 0) {
    set_uiorderindex(from.uiorderindex());
  }
}

void ST_SUBMIT_ORDER::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MEOrderAPI.ST_SUBMIT_ORDER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_SUBMIT_ORDER::CopyFrom(const ST_SUBMIT_ORDER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MEOrderAPI.ST_SUBMIT_ORDER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_SUBMIT_ORDER::IsInitialized() const {
  return true;
}

void ST_SUBMIT_ORDER::Swap(ST_SUBMIT_ORDER* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_SUBMIT_ORDER::InternalSwap(ST_SUBMIT_ORDER* other) {
  using std::swap;
  strorderid_.Swap(&other->strorderid_);
  swap(lsubmittime_, other->lsubmittime_);
  swap(uctranstype_, other->uctranstype_);
  swap(ucordertype_, other->ucordertype_);
  swap(uiuserid_, other->uiuserid_);
  swap(uiexchobjid_, other->uiexchobjid_);
  swap(lprice_, other->lprice_);
  swap(lnumber_, other->lnumber_);
  swap(ucrecordid_, other->ucrecordid_);
  swap(uiorderindex_, other->uiorderindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_SUBMIT_ORDER::GetMetadata() const {
  protobuf_ME_2eOrderAPI_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ME_2eOrderAPI_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ST_SUBMIT_CAMCEL_ORDER::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_SUBMIT_CAMCEL_ORDER::kStrOrderIDFieldNumber;
const int ST_SUBMIT_CAMCEL_ORDER::kLOrderIDFrMEFieldNumber;
const int ST_SUBMIT_CAMCEL_ORDER::kUiOrderIndexFieldNumber;
const int ST_SUBMIT_CAMCEL_ORDER::kUiUserIDFieldNumber;
const int ST_SUBMIT_CAMCEL_ORDER::kUiExchObjIDFieldNumber;
const int ST_SUBMIT_CAMCEL_ORDER::kUcTransTypeFieldNumber;
const int ST_SUBMIT_CAMCEL_ORDER::kLPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_SUBMIT_CAMCEL_ORDER::ST_SUBMIT_CAMCEL_ORDER()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ME_2eOrderAPI_2eproto::InitDefaultsST_SUBMIT_CAMCEL_ORDER();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MEOrderAPI.ST_SUBMIT_CAMCEL_ORDER)
}
ST_SUBMIT_CAMCEL_ORDER::ST_SUBMIT_CAMCEL_ORDER(const ST_SUBMIT_CAMCEL_ORDER& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strorderid().size() > 0) {
    strorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strorderid_);
  }
  ::memcpy(&lorderidfrme_, &from.lorderidfrme_,
    static_cast<size_t>(reinterpret_cast<char*>(&lprice_) -
    reinterpret_cast<char*>(&lorderidfrme_)) + sizeof(lprice_));
  // @@protoc_insertion_point(copy_constructor:MEOrderAPI.ST_SUBMIT_CAMCEL_ORDER)
}

void ST_SUBMIT_CAMCEL_ORDER::SharedCtor() {
  strorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lorderidfrme_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lprice_) -
      reinterpret_cast<char*>(&lorderidfrme_)) + sizeof(lprice_));
  _cached_size_ = 0;
}

ST_SUBMIT_CAMCEL_ORDER::~ST_SUBMIT_CAMCEL_ORDER() {
  // @@protoc_insertion_point(destructor:MEOrderAPI.ST_SUBMIT_CAMCEL_ORDER)
  SharedDtor();
}

void ST_SUBMIT_CAMCEL_ORDER::SharedDtor() {
  strorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ST_SUBMIT_CAMCEL_ORDER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_SUBMIT_CAMCEL_ORDER::descriptor() {
  ::protobuf_ME_2eOrderAPI_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ME_2eOrderAPI_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_SUBMIT_CAMCEL_ORDER& ST_SUBMIT_CAMCEL_ORDER::default_instance() {
  ::protobuf_ME_2eOrderAPI_2eproto::InitDefaultsST_SUBMIT_CAMCEL_ORDER();
  return *internal_default_instance();
}

ST_SUBMIT_CAMCEL_ORDER* ST_SUBMIT_CAMCEL_ORDER::New(::google::protobuf::Arena* arena) const {
  ST_SUBMIT_CAMCEL_ORDER* n = new ST_SUBMIT_CAMCEL_ORDER;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ST_SUBMIT_CAMCEL_ORDER::Clear() {
// @@protoc_insertion_point(message_clear_start:MEOrderAPI.ST_SUBMIT_CAMCEL_ORDER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lorderidfrme_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lprice_) -
      reinterpret_cast<char*>(&lorderidfrme_)) + sizeof(lprice_));
  _internal_metadata_.Clear();
}

bool ST_SUBMIT_CAMCEL_ORDER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MEOrderAPI.ST_SUBMIT_CAMCEL_ORDER)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strOrderID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strorderid().data(), static_cast<int>(this->strorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MEOrderAPI.ST_SUBMIT_CAMCEL_ORDER.strOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lOrderIDFrME = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lorderidfrme_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiOrderIndex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiorderindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiUserID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiExchObjID = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiexchobjid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ucTransType = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uctranstype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lPrice = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MEOrderAPI.ST_SUBMIT_CAMCEL_ORDER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MEOrderAPI.ST_SUBMIT_CAMCEL_ORDER)
  return false;
#undef DO_
}

void ST_SUBMIT_CAMCEL_ORDER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MEOrderAPI.ST_SUBMIT_CAMCEL_ORDER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string strOrderID = 1;
  if (this->strorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strorderid().data(), static_cast<int>(this->strorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEOrderAPI.ST_SUBMIT_CAMCEL_ORDER.strOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strorderid(), output);
  }

  // uint64 lOrderIDFrME = 2;
  if (this->lorderidfrme() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lorderidfrme(), output);
  }

  // uint32 uiOrderIndex = 3;
  if (this->uiorderindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uiorderindex(), output);
  }

  // uint32 uiUserID = 4;
  if (this->uiuserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uiuserid(), output);
  }

  // uint32 uiExchObjID = 5;
  if (this->uiexchobjid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uiexchobjid(), output);
  }

  // uint32 ucTransType = 6;
  if (this->uctranstype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uctranstype(), output);
  }

  // int64 lPrice = 7;
  if (this->lprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->lprice(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MEOrderAPI.ST_SUBMIT_CAMCEL_ORDER)
}

::google::protobuf::uint8* ST_SUBMIT_CAMCEL_ORDER::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MEOrderAPI.ST_SUBMIT_CAMCEL_ORDER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string strOrderID = 1;
  if (this->strorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strorderid().data(), static_cast<int>(this->strorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEOrderAPI.ST_SUBMIT_CAMCEL_ORDER.strOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strorderid(), target);
  }

  // uint64 lOrderIDFrME = 2;
  if (this->lorderidfrme() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lorderidfrme(), target);
  }

  // uint32 uiOrderIndex = 3;
  if (this->uiorderindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uiorderindex(), target);
  }

  // uint32 uiUserID = 4;
  if (this->uiuserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uiuserid(), target);
  }

  // uint32 uiExchObjID = 5;
  if (this->uiexchobjid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uiexchobjid(), target);
  }

  // uint32 ucTransType = 6;
  if (this->uctranstype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uctranstype(), target);
  }

  // int64 lPrice = 7;
  if (this->lprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->lprice(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MEOrderAPI.ST_SUBMIT_CAMCEL_ORDER)
  return target;
}

size_t ST_SUBMIT_CAMCEL_ORDER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MEOrderAPI.ST_SUBMIT_CAMCEL_ORDER)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string strOrderID = 1;
  if (this->strorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strorderid());
  }

  // uint64 lOrderIDFrME = 2;
  if (this->lorderidfrme() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lorderidfrme());
  }

  // uint32 uiOrderIndex = 3;
  if (this->uiorderindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiorderindex());
  }

  // uint32 uiUserID = 4;
  if (this->uiuserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiuserid());
  }

  // uint32 uiExchObjID = 5;
  if (this->uiexchobjid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiexchobjid());
  }

  // uint32 ucTransType = 6;
  if (this->uctranstype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uctranstype());
  }

  // int64 lPrice = 7;
  if (this->lprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lprice());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_SUBMIT_CAMCEL_ORDER::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MEOrderAPI.ST_SUBMIT_CAMCEL_ORDER)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_SUBMIT_CAMCEL_ORDER* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_SUBMIT_CAMCEL_ORDER>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MEOrderAPI.ST_SUBMIT_CAMCEL_ORDER)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MEOrderAPI.ST_SUBMIT_CAMCEL_ORDER)
    MergeFrom(*source);
  }
}

void ST_SUBMIT_CAMCEL_ORDER::MergeFrom(const ST_SUBMIT_CAMCEL_ORDER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MEOrderAPI.ST_SUBMIT_CAMCEL_ORDER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strorderid().size() > 0) {

    strorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strorderid_);
  }
  if (from.lorderidfrme() != 0) {
    set_lorderidfrme(from.lorderidfrme());
  }
  if (from.uiorderindex() != 0) {
    set_uiorderindex(from.uiorderindex());
  }
  if (from.uiuserid() != 0) {
    set_uiuserid(from.uiuserid());
  }
  if (from.uiexchobjid() != 0) {
    set_uiexchobjid(from.uiexchobjid());
  }
  if (from.uctranstype() != 0) {
    set_uctranstype(from.uctranstype());
  }
  if (from.lprice() != 0) {
    set_lprice(from.lprice());
  }
}

void ST_SUBMIT_CAMCEL_ORDER::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MEOrderAPI.ST_SUBMIT_CAMCEL_ORDER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_SUBMIT_CAMCEL_ORDER::CopyFrom(const ST_SUBMIT_CAMCEL_ORDER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MEOrderAPI.ST_SUBMIT_CAMCEL_ORDER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_SUBMIT_CAMCEL_ORDER::IsInitialized() const {
  return true;
}

void ST_SUBMIT_CAMCEL_ORDER::Swap(ST_SUBMIT_CAMCEL_ORDER* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_SUBMIT_CAMCEL_ORDER::InternalSwap(ST_SUBMIT_CAMCEL_ORDER* other) {
  using std::swap;
  strorderid_.Swap(&other->strorderid_);
  swap(lorderidfrme_, other->lorderidfrme_);
  swap(uiorderindex_, other->uiorderindex_);
  swap(uiuserid_, other->uiuserid_);
  swap(uiexchobjid_, other->uiexchobjid_);
  swap(uctranstype_, other->uctranstype_);
  swap(lprice_, other->lprice_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_SUBMIT_CAMCEL_ORDER::GetMetadata() const {
  protobuf_ME_2eOrderAPI_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ME_2eOrderAPI_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ST_SUBMIT_ORDER_RESP::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_SUBMIT_ORDER_RESP::kStrOrderIDFieldNumber;
const int ST_SUBMIT_ORDER_RESP::kUiSubmitOrderIypeFieldNumber;
const int ST_SUBMIT_ORDER_RESP::kLOrderIDFrMEFieldNumber;
const int ST_SUBMIT_ORDER_RESP::kUiOrderIndexFieldNumber;
const int ST_SUBMIT_ORDER_RESP::kUiOrderStatusFieldNumber;
const int ST_SUBMIT_ORDER_RESP::kStrTextFieldNumber;
const int ST_SUBMIT_ORDER_RESP::kUiUserIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_SUBMIT_ORDER_RESP::ST_SUBMIT_ORDER_RESP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ME_2eOrderAPI_2eproto::InitDefaultsST_SUBMIT_ORDER_RESP();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MEOrderAPI.ST_SUBMIT_ORDER_RESP)
}
ST_SUBMIT_ORDER_RESP::ST_SUBMIT_ORDER_RESP(const ST_SUBMIT_ORDER_RESP& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strorderid().size() > 0) {
    strorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strorderid_);
  }
  strtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strtext().size() > 0) {
    strtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strtext_);
  }
  ::memcpy(&lorderidfrme_, &from.lorderidfrme_,
    static_cast<size_t>(reinterpret_cast<char*>(&uiuserid_) -
    reinterpret_cast<char*>(&lorderidfrme_)) + sizeof(uiuserid_));
  // @@protoc_insertion_point(copy_constructor:MEOrderAPI.ST_SUBMIT_ORDER_RESP)
}

void ST_SUBMIT_ORDER_RESP::SharedCtor() {
  strorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lorderidfrme_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uiuserid_) -
      reinterpret_cast<char*>(&lorderidfrme_)) + sizeof(uiuserid_));
  _cached_size_ = 0;
}

ST_SUBMIT_ORDER_RESP::~ST_SUBMIT_ORDER_RESP() {
  // @@protoc_insertion_point(destructor:MEOrderAPI.ST_SUBMIT_ORDER_RESP)
  SharedDtor();
}

void ST_SUBMIT_ORDER_RESP::SharedDtor() {
  strorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strtext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ST_SUBMIT_ORDER_RESP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_SUBMIT_ORDER_RESP::descriptor() {
  ::protobuf_ME_2eOrderAPI_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ME_2eOrderAPI_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_SUBMIT_ORDER_RESP& ST_SUBMIT_ORDER_RESP::default_instance() {
  ::protobuf_ME_2eOrderAPI_2eproto::InitDefaultsST_SUBMIT_ORDER_RESP();
  return *internal_default_instance();
}

ST_SUBMIT_ORDER_RESP* ST_SUBMIT_ORDER_RESP::New(::google::protobuf::Arena* arena) const {
  ST_SUBMIT_ORDER_RESP* n = new ST_SUBMIT_ORDER_RESP;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ST_SUBMIT_ORDER_RESP::Clear() {
// @@protoc_insertion_point(message_clear_start:MEOrderAPI.ST_SUBMIT_ORDER_RESP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strtext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lorderidfrme_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uiuserid_) -
      reinterpret_cast<char*>(&lorderidfrme_)) + sizeof(uiuserid_));
  _internal_metadata_.Clear();
}

bool ST_SUBMIT_ORDER_RESP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MEOrderAPI.ST_SUBMIT_ORDER_RESP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strOrderID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strorderid().data(), static_cast<int>(this->strorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MEOrderAPI.ST_SUBMIT_ORDER_RESP.strOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiSubmitOrderIype = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uisubmitorderiype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lOrderIDFrME = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lorderidfrme_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiOrderIndex = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiorderindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiOrderStatus = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiorderstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strText = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strtext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strtext().data(), static_cast<int>(this->strtext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MEOrderAPI.ST_SUBMIT_ORDER_RESP.strText"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiUserID = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MEOrderAPI.ST_SUBMIT_ORDER_RESP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MEOrderAPI.ST_SUBMIT_ORDER_RESP)
  return false;
#undef DO_
}

void ST_SUBMIT_ORDER_RESP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MEOrderAPI.ST_SUBMIT_ORDER_RESP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string strOrderID = 1;
  if (this->strorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strorderid().data(), static_cast<int>(this->strorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEOrderAPI.ST_SUBMIT_ORDER_RESP.strOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strorderid(), output);
  }

  // uint32 uiSubmitOrderIype = 2;
  if (this->uisubmitorderiype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uisubmitorderiype(), output);
  }

  // uint64 lOrderIDFrME = 3;
  if (this->lorderidfrme() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lorderidfrme(), output);
  }

  // uint32 uiOrderIndex = 4;
  if (this->uiorderindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uiorderindex(), output);
  }

  // uint32 uiOrderStatus = 5;
  if (this->uiorderstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uiorderstatus(), output);
  }

  // string strText = 6;
  if (this->strtext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strtext().data(), static_cast<int>(this->strtext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEOrderAPI.ST_SUBMIT_ORDER_RESP.strText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->strtext(), output);
  }

  // uint32 uiUserID = 7;
  if (this->uiuserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->uiuserid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MEOrderAPI.ST_SUBMIT_ORDER_RESP)
}

::google::protobuf::uint8* ST_SUBMIT_ORDER_RESP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MEOrderAPI.ST_SUBMIT_ORDER_RESP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string strOrderID = 1;
  if (this->strorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strorderid().data(), static_cast<int>(this->strorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEOrderAPI.ST_SUBMIT_ORDER_RESP.strOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strorderid(), target);
  }

  // uint32 uiSubmitOrderIype = 2;
  if (this->uisubmitorderiype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uisubmitorderiype(), target);
  }

  // uint64 lOrderIDFrME = 3;
  if (this->lorderidfrme() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lorderidfrme(), target);
  }

  // uint32 uiOrderIndex = 4;
  if (this->uiorderindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uiorderindex(), target);
  }

  // uint32 uiOrderStatus = 5;
  if (this->uiorderstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uiorderstatus(), target);
  }

  // string strText = 6;
  if (this->strtext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strtext().data(), static_cast<int>(this->strtext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEOrderAPI.ST_SUBMIT_ORDER_RESP.strText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->strtext(), target);
  }

  // uint32 uiUserID = 7;
  if (this->uiuserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->uiuserid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MEOrderAPI.ST_SUBMIT_ORDER_RESP)
  return target;
}

size_t ST_SUBMIT_ORDER_RESP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MEOrderAPI.ST_SUBMIT_ORDER_RESP)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string strOrderID = 1;
  if (this->strorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strorderid());
  }

  // string strText = 6;
  if (this->strtext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strtext());
  }

  // uint64 lOrderIDFrME = 3;
  if (this->lorderidfrme() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lorderidfrme());
  }

  // uint32 uiSubmitOrderIype = 2;
  if (this->uisubmitorderiype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uisubmitorderiype());
  }

  // uint32 uiOrderIndex = 4;
  if (this->uiorderindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiorderindex());
  }

  // uint32 uiOrderStatus = 5;
  if (this->uiorderstatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiorderstatus());
  }

  // uint32 uiUserID = 7;
  if (this->uiuserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiuserid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_SUBMIT_ORDER_RESP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MEOrderAPI.ST_SUBMIT_ORDER_RESP)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_SUBMIT_ORDER_RESP* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_SUBMIT_ORDER_RESP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MEOrderAPI.ST_SUBMIT_ORDER_RESP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MEOrderAPI.ST_SUBMIT_ORDER_RESP)
    MergeFrom(*source);
  }
}

void ST_SUBMIT_ORDER_RESP::MergeFrom(const ST_SUBMIT_ORDER_RESP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MEOrderAPI.ST_SUBMIT_ORDER_RESP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strorderid().size() > 0) {

    strorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strorderid_);
  }
  if (from.strtext().size() > 0) {

    strtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strtext_);
  }
  if (from.lorderidfrme() != 0) {
    set_lorderidfrme(from.lorderidfrme());
  }
  if (from.uisubmitorderiype() != 0) {
    set_uisubmitorderiype(from.uisubmitorderiype());
  }
  if (from.uiorderindex() != 0) {
    set_uiorderindex(from.uiorderindex());
  }
  if (from.uiorderstatus() != 0) {
    set_uiorderstatus(from.uiorderstatus());
  }
  if (from.uiuserid() != 0) {
    set_uiuserid(from.uiuserid());
  }
}

void ST_SUBMIT_ORDER_RESP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MEOrderAPI.ST_SUBMIT_ORDER_RESP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_SUBMIT_ORDER_RESP::CopyFrom(const ST_SUBMIT_ORDER_RESP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MEOrderAPI.ST_SUBMIT_ORDER_RESP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_SUBMIT_ORDER_RESP::IsInitialized() const {
  return true;
}

void ST_SUBMIT_ORDER_RESP::Swap(ST_SUBMIT_ORDER_RESP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_SUBMIT_ORDER_RESP::InternalSwap(ST_SUBMIT_ORDER_RESP* other) {
  using std::swap;
  strorderid_.Swap(&other->strorderid_);
  strtext_.Swap(&other->strtext_);
  swap(lorderidfrme_, other->lorderidfrme_);
  swap(uisubmitorderiype_, other->uisubmitorderiype_);
  swap(uiorderindex_, other->uiorderindex_);
  swap(uiorderstatus_, other->uiorderstatus_);
  swap(uiuserid_, other->uiuserid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_SUBMIT_ORDER_RESP::GetMetadata() const {
  protobuf_ME_2eOrderAPI_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ME_2eOrderAPI_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ST_QUERY_ORDER_INFO::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_QUERY_ORDER_INFO::kUiUserIDFieldNumber;
const int ST_QUERY_ORDER_INFO::kStrOrderIDFieldNumber;
const int ST_QUERY_ORDER_INFO::kLOrderIDFrMEFieldNumber;
const int ST_QUERY_ORDER_INFO::kUiExchObjIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_QUERY_ORDER_INFO::ST_QUERY_ORDER_INFO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ME_2eOrderAPI_2eproto::InitDefaultsST_QUERY_ORDER_INFO();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MEOrderAPI.ST_QUERY_ORDER_INFO)
}
ST_QUERY_ORDER_INFO::ST_QUERY_ORDER_INFO(const ST_QUERY_ORDER_INFO& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strorderid().size() > 0) {
    strorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strorderid_);
  }
  ::memcpy(&uiuserid_, &from.uiuserid_,
    static_cast<size_t>(reinterpret_cast<char*>(&lorderidfrme_) -
    reinterpret_cast<char*>(&uiuserid_)) + sizeof(lorderidfrme_));
  // @@protoc_insertion_point(copy_constructor:MEOrderAPI.ST_QUERY_ORDER_INFO)
}

void ST_QUERY_ORDER_INFO::SharedCtor() {
  strorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uiuserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lorderidfrme_) -
      reinterpret_cast<char*>(&uiuserid_)) + sizeof(lorderidfrme_));
  _cached_size_ = 0;
}

ST_QUERY_ORDER_INFO::~ST_QUERY_ORDER_INFO() {
  // @@protoc_insertion_point(destructor:MEOrderAPI.ST_QUERY_ORDER_INFO)
  SharedDtor();
}

void ST_QUERY_ORDER_INFO::SharedDtor() {
  strorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ST_QUERY_ORDER_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_QUERY_ORDER_INFO::descriptor() {
  ::protobuf_ME_2eOrderAPI_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ME_2eOrderAPI_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_QUERY_ORDER_INFO& ST_QUERY_ORDER_INFO::default_instance() {
  ::protobuf_ME_2eOrderAPI_2eproto::InitDefaultsST_QUERY_ORDER_INFO();
  return *internal_default_instance();
}

ST_QUERY_ORDER_INFO* ST_QUERY_ORDER_INFO::New(::google::protobuf::Arena* arena) const {
  ST_QUERY_ORDER_INFO* n = new ST_QUERY_ORDER_INFO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ST_QUERY_ORDER_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:MEOrderAPI.ST_QUERY_ORDER_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uiuserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lorderidfrme_) -
      reinterpret_cast<char*>(&uiuserid_)) + sizeof(lorderidfrme_));
  _internal_metadata_.Clear();
}

bool ST_QUERY_ORDER_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MEOrderAPI.ST_QUERY_ORDER_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uiUserID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strOrderID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strorderid().data(), static_cast<int>(this->strorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MEOrderAPI.ST_QUERY_ORDER_INFO.strOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lOrderIDFrME = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lorderidfrme_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiExchObjID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiexchobjid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MEOrderAPI.ST_QUERY_ORDER_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MEOrderAPI.ST_QUERY_ORDER_INFO)
  return false;
#undef DO_
}

void ST_QUERY_ORDER_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MEOrderAPI.ST_QUERY_ORDER_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiuserid(), output);
  }

  // string strOrderID = 2;
  if (this->strorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strorderid().data(), static_cast<int>(this->strorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEOrderAPI.ST_QUERY_ORDER_INFO.strOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->strorderid(), output);
  }

  // uint64 lOrderIDFrME = 3;
  if (this->lorderidfrme() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lorderidfrme(), output);
  }

  // uint32 uiExchObjID = 4;
  if (this->uiexchobjid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uiexchobjid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MEOrderAPI.ST_QUERY_ORDER_INFO)
}

::google::protobuf::uint8* ST_QUERY_ORDER_INFO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MEOrderAPI.ST_QUERY_ORDER_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiuserid(), target);
  }

  // string strOrderID = 2;
  if (this->strorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strorderid().data(), static_cast<int>(this->strorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEOrderAPI.ST_QUERY_ORDER_INFO.strOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strorderid(), target);
  }

  // uint64 lOrderIDFrME = 3;
  if (this->lorderidfrme() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lorderidfrme(), target);
  }

  // uint32 uiExchObjID = 4;
  if (this->uiexchobjid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uiexchobjid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MEOrderAPI.ST_QUERY_ORDER_INFO)
  return target;
}

size_t ST_QUERY_ORDER_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MEOrderAPI.ST_QUERY_ORDER_INFO)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string strOrderID = 2;
  if (this->strorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strorderid());
  }

  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiuserid());
  }

  // uint32 uiExchObjID = 4;
  if (this->uiexchobjid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiexchobjid());
  }

  // uint64 lOrderIDFrME = 3;
  if (this->lorderidfrme() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lorderidfrme());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_QUERY_ORDER_INFO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MEOrderAPI.ST_QUERY_ORDER_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_QUERY_ORDER_INFO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_QUERY_ORDER_INFO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MEOrderAPI.ST_QUERY_ORDER_INFO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MEOrderAPI.ST_QUERY_ORDER_INFO)
    MergeFrom(*source);
  }
}

void ST_QUERY_ORDER_INFO::MergeFrom(const ST_QUERY_ORDER_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MEOrderAPI.ST_QUERY_ORDER_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strorderid().size() > 0) {

    strorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strorderid_);
  }
  if (from.uiuserid() != 0) {
    set_uiuserid(from.uiuserid());
  }
  if (from.uiexchobjid() != 0) {
    set_uiexchobjid(from.uiexchobjid());
  }
  if (from.lorderidfrme() != 0) {
    set_lorderidfrme(from.lorderidfrme());
  }
}

void ST_QUERY_ORDER_INFO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MEOrderAPI.ST_QUERY_ORDER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_QUERY_ORDER_INFO::CopyFrom(const ST_QUERY_ORDER_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MEOrderAPI.ST_QUERY_ORDER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_QUERY_ORDER_INFO::IsInitialized() const {
  return true;
}

void ST_QUERY_ORDER_INFO::Swap(ST_QUERY_ORDER_INFO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_QUERY_ORDER_INFO::InternalSwap(ST_QUERY_ORDER_INFO* other) {
  using std::swap;
  strorderid_.Swap(&other->strorderid_);
  swap(uiuserid_, other->uiuserid_);
  swap(uiexchobjid_, other->uiexchobjid_);
  swap(lorderidfrme_, other->lorderidfrme_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_QUERY_ORDER_INFO::GetMetadata() const {
  protobuf_ME_2eOrderAPI_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ME_2eOrderAPI_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ST_QUERY_ORDER_RES::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ST_QUERY_ORDER_RES::kUiUserIDFieldNumber;
const int ST_QUERY_ORDER_RES::kStrOrderIDFieldNumber;
const int ST_QUERY_ORDER_RES::kUiExchObjIDFieldNumber;
const int ST_QUERY_ORDER_RES::kWTransStatusFieldNumber;
const int ST_QUERY_ORDER_RES::kUcTransTypeFieldNumber;
const int ST_QUERY_ORDER_RES::kLOrgPriceFieldNumber;
const int ST_QUERY_ORDER_RES::kLOrgNumberFieldNumber;
const int ST_QUERY_ORDER_RES::kLAvgTransferPriceFieldNumber;
const int ST_QUERY_ORDER_RES::kLAvgTransferNumFieldNumber;
const int ST_QUERY_ORDER_RES::kLOrderIDFrMEFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ST_QUERY_ORDER_RES::ST_QUERY_ORDER_RES()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ME_2eOrderAPI_2eproto::InitDefaultsST_QUERY_ORDER_RES();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MEOrderAPI.ST_QUERY_ORDER_RES)
}
ST_QUERY_ORDER_RES::ST_QUERY_ORDER_RES(const ST_QUERY_ORDER_RES& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strorderid().size() > 0) {
    strorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strorderid_);
  }
  ::memcpy(&uiuserid_, &from.uiuserid_,
    static_cast<size_t>(reinterpret_cast<char*>(&lorderidfrme_) -
    reinterpret_cast<char*>(&uiuserid_)) + sizeof(lorderidfrme_));
  // @@protoc_insertion_point(copy_constructor:MEOrderAPI.ST_QUERY_ORDER_RES)
}

void ST_QUERY_ORDER_RES::SharedCtor() {
  strorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uiuserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lorderidfrme_) -
      reinterpret_cast<char*>(&uiuserid_)) + sizeof(lorderidfrme_));
  _cached_size_ = 0;
}

ST_QUERY_ORDER_RES::~ST_QUERY_ORDER_RES() {
  // @@protoc_insertion_point(destructor:MEOrderAPI.ST_QUERY_ORDER_RES)
  SharedDtor();
}

void ST_QUERY_ORDER_RES::SharedDtor() {
  strorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ST_QUERY_ORDER_RES::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ST_QUERY_ORDER_RES::descriptor() {
  ::protobuf_ME_2eOrderAPI_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ME_2eOrderAPI_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ST_QUERY_ORDER_RES& ST_QUERY_ORDER_RES::default_instance() {
  ::protobuf_ME_2eOrderAPI_2eproto::InitDefaultsST_QUERY_ORDER_RES();
  return *internal_default_instance();
}

ST_QUERY_ORDER_RES* ST_QUERY_ORDER_RES::New(::google::protobuf::Arena* arena) const {
  ST_QUERY_ORDER_RES* n = new ST_QUERY_ORDER_RES;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ST_QUERY_ORDER_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:MEOrderAPI.ST_QUERY_ORDER_RES)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uiuserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lorderidfrme_) -
      reinterpret_cast<char*>(&uiuserid_)) + sizeof(lorderidfrme_));
  _internal_metadata_.Clear();
}

bool ST_QUERY_ORDER_RES::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MEOrderAPI.ST_QUERY_ORDER_RES)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uiUserID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strOrderID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strorderid().data(), static_cast<int>(this->strorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MEOrderAPI.ST_QUERY_ORDER_RES.strOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uiExchObjID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiexchobjid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 wTransStatus = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wtransstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ucTransType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uctranstype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lOrgPrice = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lorgprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lOrgNumber = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lorgnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lAvgTransferPrice = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lavgtransferprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lAvgTransferNum = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lavgtransfernum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lOrderIDFrME = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lorderidfrme_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MEOrderAPI.ST_QUERY_ORDER_RES)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MEOrderAPI.ST_QUERY_ORDER_RES)
  return false;
#undef DO_
}

void ST_QUERY_ORDER_RES::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MEOrderAPI.ST_QUERY_ORDER_RES)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiuserid(), output);
  }

  // string strOrderID = 2;
  if (this->strorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strorderid().data(), static_cast<int>(this->strorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEOrderAPI.ST_QUERY_ORDER_RES.strOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->strorderid(), output);
  }

  // uint32 uiExchObjID = 3;
  if (this->uiexchobjid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uiexchobjid(), output);
  }

  // uint32 wTransStatus = 4;
  if (this->wtransstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wtransstatus(), output);
  }

  // uint32 ucTransType = 5;
  if (this->uctranstype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uctranstype(), output);
  }

  // int64 lOrgPrice = 6;
  if (this->lorgprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->lorgprice(), output);
  }

  // int64 lOrgNumber = 7;
  if (this->lorgnumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->lorgnumber(), output);
  }

  // int64 lAvgTransferPrice = 8;
  if (this->lavgtransferprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->lavgtransferprice(), output);
  }

  // int64 lAvgTransferNum = 9;
  if (this->lavgtransfernum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->lavgtransfernum(), output);
  }

  // uint64 lOrderIDFrME = 10;
  if (this->lorderidfrme() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->lorderidfrme(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MEOrderAPI.ST_QUERY_ORDER_RES)
}

::google::protobuf::uint8* ST_QUERY_ORDER_RES::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MEOrderAPI.ST_QUERY_ORDER_RES)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiuserid(), target);
  }

  // string strOrderID = 2;
  if (this->strorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strorderid().data(), static_cast<int>(this->strorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MEOrderAPI.ST_QUERY_ORDER_RES.strOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strorderid(), target);
  }

  // uint32 uiExchObjID = 3;
  if (this->uiexchobjid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uiexchobjid(), target);
  }

  // uint32 wTransStatus = 4;
  if (this->wtransstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wtransstatus(), target);
  }

  // uint32 ucTransType = 5;
  if (this->uctranstype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uctranstype(), target);
  }

  // int64 lOrgPrice = 6;
  if (this->lorgprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->lorgprice(), target);
  }

  // int64 lOrgNumber = 7;
  if (this->lorgnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->lorgnumber(), target);
  }

  // int64 lAvgTransferPrice = 8;
  if (this->lavgtransferprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->lavgtransferprice(), target);
  }

  // int64 lAvgTransferNum = 9;
  if (this->lavgtransfernum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->lavgtransfernum(), target);
  }

  // uint64 lOrderIDFrME = 10;
  if (this->lorderidfrme() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->lorderidfrme(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MEOrderAPI.ST_QUERY_ORDER_RES)
  return target;
}

size_t ST_QUERY_ORDER_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MEOrderAPI.ST_QUERY_ORDER_RES)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string strOrderID = 2;
  if (this->strorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strorderid());
  }

  // uint32 uiUserID = 1;
  if (this->uiuserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiuserid());
  }

  // uint32 uiExchObjID = 3;
  if (this->uiexchobjid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uiexchobjid());
  }

  // uint32 wTransStatus = 4;
  if (this->wtransstatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wtransstatus());
  }

  // uint32 ucTransType = 5;
  if (this->uctranstype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uctranstype());
  }

  // int64 lOrgPrice = 6;
  if (this->lorgprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lorgprice());
  }

  // int64 lOrgNumber = 7;
  if (this->lorgnumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lorgnumber());
  }

  // int64 lAvgTransferPrice = 8;
  if (this->lavgtransferprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lavgtransferprice());
  }

  // int64 lAvgTransferNum = 9;
  if (this->lavgtransfernum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lavgtransfernum());
  }

  // uint64 lOrderIDFrME = 10;
  if (this->lorderidfrme() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lorderidfrme());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ST_QUERY_ORDER_RES::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MEOrderAPI.ST_QUERY_ORDER_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const ST_QUERY_ORDER_RES* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ST_QUERY_ORDER_RES>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MEOrderAPI.ST_QUERY_ORDER_RES)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MEOrderAPI.ST_QUERY_ORDER_RES)
    MergeFrom(*source);
  }
}

void ST_QUERY_ORDER_RES::MergeFrom(const ST_QUERY_ORDER_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MEOrderAPI.ST_QUERY_ORDER_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strorderid().size() > 0) {

    strorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strorderid_);
  }
  if (from.uiuserid() != 0) {
    set_uiuserid(from.uiuserid());
  }
  if (from.uiexchobjid() != 0) {
    set_uiexchobjid(from.uiexchobjid());
  }
  if (from.wtransstatus() != 0) {
    set_wtransstatus(from.wtransstatus());
  }
  if (from.uctranstype() != 0) {
    set_uctranstype(from.uctranstype());
  }
  if (from.lorgprice() != 0) {
    set_lorgprice(from.lorgprice());
  }
  if (from.lorgnumber() != 0) {
    set_lorgnumber(from.lorgnumber());
  }
  if (from.lavgtransferprice() != 0) {
    set_lavgtransferprice(from.lavgtransferprice());
  }
  if (from.lavgtransfernum() != 0) {
    set_lavgtransfernum(from.lavgtransfernum());
  }
  if (from.lorderidfrme() != 0) {
    set_lorderidfrme(from.lorderidfrme());
  }
}

void ST_QUERY_ORDER_RES::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MEOrderAPI.ST_QUERY_ORDER_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ST_QUERY_ORDER_RES::CopyFrom(const ST_QUERY_ORDER_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MEOrderAPI.ST_QUERY_ORDER_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_QUERY_ORDER_RES::IsInitialized() const {
  return true;
}

void ST_QUERY_ORDER_RES::Swap(ST_QUERY_ORDER_RES* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ST_QUERY_ORDER_RES::InternalSwap(ST_QUERY_ORDER_RES* other) {
  using std::swap;
  strorderid_.Swap(&other->strorderid_);
  swap(uiuserid_, other->uiuserid_);
  swap(uiexchobjid_, other->uiexchobjid_);
  swap(wtransstatus_, other->wtransstatus_);
  swap(uctranstype_, other->uctranstype_);
  swap(lorgprice_, other->lorgprice_);
  swap(lorgnumber_, other->lorgnumber_);
  swap(lavgtransferprice_, other->lavgtransferprice_);
  swap(lavgtransfernum_, other->lavgtransfernum_);
  swap(lorderidfrme_, other->lorderidfrme_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ST_QUERY_ORDER_RES::GetMetadata() const {
  protobuf_ME_2eOrderAPI_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ME_2eOrderAPI_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MEOrderAPI

// @@protoc_insertion_point(global_scope)
