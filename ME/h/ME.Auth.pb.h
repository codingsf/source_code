// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ME.Auth.proto

#ifndef PROTOBUF_ME_2eAuth_2eproto__INCLUDED
#define PROTOBUF_ME_2eAuth_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_ME_2eAuth_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsST_USER_LOGIN_INFOImpl();
void InitDefaultsST_USER_LOGIN_INFO();
void InitDefaultsST_USER_LOGIN_RESPImpl();
void InitDefaultsST_USER_LOGIN_RESP();
void InitDefaultsST_SIG_IP_INFOImpl();
void InitDefaultsST_SIG_IP_INFO();
void InitDefaultsST_SYMBOL_INFOImpl();
void InitDefaultsST_SYMBOL_INFO();
inline void InitDefaults() {
  InitDefaultsST_USER_LOGIN_INFO();
  InitDefaultsST_USER_LOGIN_RESP();
  InitDefaultsST_SIG_IP_INFO();
  InitDefaultsST_SYMBOL_INFO();
}
}  // namespace protobuf_ME_2eAuth_2eproto
namespace MEAuth {
class ST_SIG_IP_INFO;
class ST_SIG_IP_INFODefaultTypeInternal;
extern ST_SIG_IP_INFODefaultTypeInternal _ST_SIG_IP_INFO_default_instance_;
class ST_SYMBOL_INFO;
class ST_SYMBOL_INFODefaultTypeInternal;
extern ST_SYMBOL_INFODefaultTypeInternal _ST_SYMBOL_INFO_default_instance_;
class ST_USER_LOGIN_INFO;
class ST_USER_LOGIN_INFODefaultTypeInternal;
extern ST_USER_LOGIN_INFODefaultTypeInternal _ST_USER_LOGIN_INFO_default_instance_;
class ST_USER_LOGIN_RESP;
class ST_USER_LOGIN_RESPDefaultTypeInternal;
extern ST_USER_LOGIN_RESPDefaultTypeInternal _ST_USER_LOGIN_RESP_default_instance_;
}  // namespace MEAuth
namespace MEAuth {

// ===================================================================

class ST_USER_LOGIN_INFO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MEAuth.ST_USER_LOGIN_INFO) */ {
 public:
  ST_USER_LOGIN_INFO();
  virtual ~ST_USER_LOGIN_INFO();

  ST_USER_LOGIN_INFO(const ST_USER_LOGIN_INFO& from);

  inline ST_USER_LOGIN_INFO& operator=(const ST_USER_LOGIN_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ST_USER_LOGIN_INFO(ST_USER_LOGIN_INFO&& from) noexcept
    : ST_USER_LOGIN_INFO() {
    *this = ::std::move(from);
  }

  inline ST_USER_LOGIN_INFO& operator=(ST_USER_LOGIN_INFO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ST_USER_LOGIN_INFO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ST_USER_LOGIN_INFO* internal_default_instance() {
    return reinterpret_cast<const ST_USER_LOGIN_INFO*>(
               &_ST_USER_LOGIN_INFO_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ST_USER_LOGIN_INFO* other);
  friend void swap(ST_USER_LOGIN_INFO& a, ST_USER_LOGIN_INFO& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ST_USER_LOGIN_INFO* New() const PROTOBUF_FINAL { return New(NULL); }

  ST_USER_LOGIN_INFO* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ST_USER_LOGIN_INFO& from);
  void MergeFrom(const ST_USER_LOGIN_INFO& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ST_USER_LOGIN_INFO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes chUserName = 1;
  void clear_chusername();
  static const int kChUserNameFieldNumber = 1;
  const ::std::string& chusername() const;
  void set_chusername(const ::std::string& value);
  #if LANG_CXX11
  void set_chusername(::std::string&& value);
  #endif
  void set_chusername(const char* value);
  void set_chusername(const void* value, size_t size);
  ::std::string* mutable_chusername();
  ::std::string* release_chusername();
  void set_allocated_chusername(::std::string* chusername);

  // bytes chPasswordTxt = 2;
  void clear_chpasswordtxt();
  static const int kChPasswordTxtFieldNumber = 2;
  const ::std::string& chpasswordtxt() const;
  void set_chpasswordtxt(const ::std::string& value);
  #if LANG_CXX11
  void set_chpasswordtxt(::std::string&& value);
  #endif
  void set_chpasswordtxt(const char* value);
  void set_chpasswordtxt(const void* value, size_t size);
  ::std::string* mutable_chpasswordtxt();
  ::std::string* release_chpasswordtxt();
  void set_allocated_chpasswordtxt(::std::string* chpasswordtxt);

  // string chAddressIp = 3;
  void clear_chaddressip();
  static const int kChAddressIpFieldNumber = 3;
  const ::std::string& chaddressip() const;
  void set_chaddressip(const ::std::string& value);
  #if LANG_CXX11
  void set_chaddressip(::std::string&& value);
  #endif
  void set_chaddressip(const char* value);
  void set_chaddressip(const char* value, size_t size);
  ::std::string* mutable_chaddressip();
  ::std::string* release_chaddressip();
  void set_allocated_chaddressip(::std::string* chaddressip);

  // @@protoc_insertion_point(class_scope:MEAuth.ST_USER_LOGIN_INFO)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr chusername_;
  ::google::protobuf::internal::ArenaStringPtr chpasswordtxt_;
  ::google::protobuf::internal::ArenaStringPtr chaddressip_;
  mutable int _cached_size_;
  friend struct ::protobuf_ME_2eAuth_2eproto::TableStruct;
  friend void ::protobuf_ME_2eAuth_2eproto::InitDefaultsST_USER_LOGIN_INFOImpl();
};
// -------------------------------------------------------------------

class ST_USER_LOGIN_RESP : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MEAuth.ST_USER_LOGIN_RESP) */ {
 public:
  ST_USER_LOGIN_RESP();
  virtual ~ST_USER_LOGIN_RESP();

  ST_USER_LOGIN_RESP(const ST_USER_LOGIN_RESP& from);

  inline ST_USER_LOGIN_RESP& operator=(const ST_USER_LOGIN_RESP& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ST_USER_LOGIN_RESP(ST_USER_LOGIN_RESP&& from) noexcept
    : ST_USER_LOGIN_RESP() {
    *this = ::std::move(from);
  }

  inline ST_USER_LOGIN_RESP& operator=(ST_USER_LOGIN_RESP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ST_USER_LOGIN_RESP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ST_USER_LOGIN_RESP* internal_default_instance() {
    return reinterpret_cast<const ST_USER_LOGIN_RESP*>(
               &_ST_USER_LOGIN_RESP_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ST_USER_LOGIN_RESP* other);
  friend void swap(ST_USER_LOGIN_RESP& a, ST_USER_LOGIN_RESP& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ST_USER_LOGIN_RESP* New() const PROTOBUF_FINAL { return New(NULL); }

  ST_USER_LOGIN_RESP* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ST_USER_LOGIN_RESP& from);
  void MergeFrom(const ST_USER_LOGIN_RESP& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ST_USER_LOGIN_RESP* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MEAuth.ST_SIG_IP_INFO stIPInfo = 4;
  int stipinfo_size() const;
  void clear_stipinfo();
  static const int kStIPInfoFieldNumber = 4;
  const ::MEAuth::ST_SIG_IP_INFO& stipinfo(int index) const;
  ::MEAuth::ST_SIG_IP_INFO* mutable_stipinfo(int index);
  ::MEAuth::ST_SIG_IP_INFO* add_stipinfo();
  ::google::protobuf::RepeatedPtrField< ::MEAuth::ST_SIG_IP_INFO >*
      mutable_stipinfo();
  const ::google::protobuf::RepeatedPtrField< ::MEAuth::ST_SIG_IP_INFO >&
      stipinfo() const;

  // repeated .MEAuth.ST_SYMBOL_INFO stSymbolInfo = 6;
  int stsymbolinfo_size() const;
  void clear_stsymbolinfo();
  static const int kStSymbolInfoFieldNumber = 6;
  const ::MEAuth::ST_SYMBOL_INFO& stsymbolinfo(int index) const;
  ::MEAuth::ST_SYMBOL_INFO* mutable_stsymbolinfo(int index);
  ::MEAuth::ST_SYMBOL_INFO* add_stsymbolinfo();
  ::google::protobuf::RepeatedPtrField< ::MEAuth::ST_SYMBOL_INFO >*
      mutable_stsymbolinfo();
  const ::google::protobuf::RepeatedPtrField< ::MEAuth::ST_SYMBOL_INFO >&
      stsymbolinfo() const;

  // bytes chUserName = 7;
  void clear_chusername();
  static const int kChUserNameFieldNumber = 7;
  const ::std::string& chusername() const;
  void set_chusername(const ::std::string& value);
  #if LANG_CXX11
  void set_chusername(::std::string&& value);
  #endif
  void set_chusername(const char* value);
  void set_chusername(const void* value, size_t size);
  ::std::string* mutable_chusername();
  ::std::string* release_chusername();
  void set_allocated_chusername(::std::string* chusername);

  // uint32 ucLoginRsp = 1;
  void clear_ucloginrsp();
  static const int kUcLoginRspFieldNumber = 1;
  ::google::protobuf::uint32 ucloginrsp() const;
  void set_ucloginrsp(::google::protobuf::uint32 value);

  // uint32 uiUserID = 2;
  void clear_uiuserid();
  static const int kUiUserIDFieldNumber = 2;
  ::google::protobuf::uint32 uiuserid() const;
  void set_uiuserid(::google::protobuf::uint32 value);

  // uint32 uiIPLisyNum = 3;
  void clear_uiiplisynum();
  static const int kUiIPLisyNumFieldNumber = 3;
  ::google::protobuf::uint32 uiiplisynum() const;
  void set_uiiplisynum(::google::protobuf::uint32 value);

  // uint32 uiSymbolNum = 5;
  void clear_uisymbolnum();
  static const int kUiSymbolNumFieldNumber = 5;
  ::google::protobuf::uint32 uisymbolnum() const;
  void set_uisymbolnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MEAuth.ST_USER_LOGIN_RESP)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::MEAuth::ST_SIG_IP_INFO > stipinfo_;
  ::google::protobuf::RepeatedPtrField< ::MEAuth::ST_SYMBOL_INFO > stsymbolinfo_;
  ::google::protobuf::internal::ArenaStringPtr chusername_;
  ::google::protobuf::uint32 ucloginrsp_;
  ::google::protobuf::uint32 uiuserid_;
  ::google::protobuf::uint32 uiiplisynum_;
  ::google::protobuf::uint32 uisymbolnum_;
  mutable int _cached_size_;
  friend struct ::protobuf_ME_2eAuth_2eproto::TableStruct;
  friend void ::protobuf_ME_2eAuth_2eproto::InitDefaultsST_USER_LOGIN_RESPImpl();
};
// -------------------------------------------------------------------

class ST_SIG_IP_INFO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MEAuth.ST_SIG_IP_INFO) */ {
 public:
  ST_SIG_IP_INFO();
  virtual ~ST_SIG_IP_INFO();

  ST_SIG_IP_INFO(const ST_SIG_IP_INFO& from);

  inline ST_SIG_IP_INFO& operator=(const ST_SIG_IP_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ST_SIG_IP_INFO(ST_SIG_IP_INFO&& from) noexcept
    : ST_SIG_IP_INFO() {
    *this = ::std::move(from);
  }

  inline ST_SIG_IP_INFO& operator=(ST_SIG_IP_INFO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ST_SIG_IP_INFO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ST_SIG_IP_INFO* internal_default_instance() {
    return reinterpret_cast<const ST_SIG_IP_INFO*>(
               &_ST_SIG_IP_INFO_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ST_SIG_IP_INFO* other);
  friend void swap(ST_SIG_IP_INFO& a, ST_SIG_IP_INFO& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ST_SIG_IP_INFO* New() const PROTOBUF_FINAL { return New(NULL); }

  ST_SIG_IP_INFO* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ST_SIG_IP_INFO& from);
  void MergeFrom(const ST_SIG_IP_INFO& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ST_SIG_IP_INFO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes ucIpAddress = 2;
  void clear_ucipaddress();
  static const int kUcIpAddressFieldNumber = 2;
  const ::std::string& ucipaddress() const;
  void set_ucipaddress(const ::std::string& value);
  #if LANG_CXX11
  void set_ucipaddress(::std::string&& value);
  #endif
  void set_ucipaddress(const char* value);
  void set_ucipaddress(const void* value, size_t size);
  ::std::string* mutable_ucipaddress();
  ::std::string* release_ucipaddress();
  void set_allocated_ucipaddress(::std::string* ucipaddress);

  // uint32 wIpType = 1;
  void clear_wiptype();
  static const int kWIpTypeFieldNumber = 1;
  ::google::protobuf::uint32 wiptype() const;
  void set_wiptype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MEAuth.ST_SIG_IP_INFO)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ucipaddress_;
  ::google::protobuf::uint32 wiptype_;
  mutable int _cached_size_;
  friend struct ::protobuf_ME_2eAuth_2eproto::TableStruct;
  friend void ::protobuf_ME_2eAuth_2eproto::InitDefaultsST_SIG_IP_INFOImpl();
};
// -------------------------------------------------------------------

class ST_SYMBOL_INFO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MEAuth.ST_SYMBOL_INFO) */ {
 public:
  ST_SYMBOL_INFO();
  virtual ~ST_SYMBOL_INFO();

  ST_SYMBOL_INFO(const ST_SYMBOL_INFO& from);

  inline ST_SYMBOL_INFO& operator=(const ST_SYMBOL_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ST_SYMBOL_INFO(ST_SYMBOL_INFO&& from) noexcept
    : ST_SYMBOL_INFO() {
    *this = ::std::move(from);
  }

  inline ST_SYMBOL_INFO& operator=(ST_SYMBOL_INFO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ST_SYMBOL_INFO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ST_SYMBOL_INFO* internal_default_instance() {
    return reinterpret_cast<const ST_SYMBOL_INFO*>(
               &_ST_SYMBOL_INFO_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ST_SYMBOL_INFO* other);
  friend void swap(ST_SYMBOL_INFO& a, ST_SYMBOL_INFO& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ST_SYMBOL_INFO* New() const PROTOBUF_FINAL { return New(NULL); }

  ST_SYMBOL_INFO* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ST_SYMBOL_INFO& from);
  void MergeFrom(const ST_SYMBOL_INFO& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ST_SYMBOL_INFO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes uiSymbolName = 2;
  void clear_uisymbolname();
  static const int kUiSymbolNameFieldNumber = 2;
  const ::std::string& uisymbolname() const;
  void set_uisymbolname(const ::std::string& value);
  #if LANG_CXX11
  void set_uisymbolname(::std::string&& value);
  #endif
  void set_uisymbolname(const char* value);
  void set_uisymbolname(const void* value, size_t size);
  ::std::string* mutable_uisymbolname();
  ::std::string* release_uisymbolname();
  void set_allocated_uisymbolname(::std::string* uisymbolname);

  // uint32 uiSymbolID = 1;
  void clear_uisymbolid();
  static const int kUiSymbolIDFieldNumber = 1;
  ::google::protobuf::uint32 uisymbolid() const;
  void set_uisymbolid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MEAuth.ST_SYMBOL_INFO)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uisymbolname_;
  ::google::protobuf::uint32 uisymbolid_;
  mutable int _cached_size_;
  friend struct ::protobuf_ME_2eAuth_2eproto::TableStruct;
  friend void ::protobuf_ME_2eAuth_2eproto::InitDefaultsST_SYMBOL_INFOImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ST_USER_LOGIN_INFO

// bytes chUserName = 1;
inline void ST_USER_LOGIN_INFO::clear_chusername() {
  chusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ST_USER_LOGIN_INFO::chusername() const {
  // @@protoc_insertion_point(field_get:MEAuth.ST_USER_LOGIN_INFO.chUserName)
  return chusername_.GetNoArena();
}
inline void ST_USER_LOGIN_INFO::set_chusername(const ::std::string& value) {
  
  chusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MEAuth.ST_USER_LOGIN_INFO.chUserName)
}
#if LANG_CXX11
inline void ST_USER_LOGIN_INFO::set_chusername(::std::string&& value) {
  
  chusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MEAuth.ST_USER_LOGIN_INFO.chUserName)
}
#endif
inline void ST_USER_LOGIN_INFO::set_chusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MEAuth.ST_USER_LOGIN_INFO.chUserName)
}
inline void ST_USER_LOGIN_INFO::set_chusername(const void* value, size_t size) {
  
  chusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MEAuth.ST_USER_LOGIN_INFO.chUserName)
}
inline ::std::string* ST_USER_LOGIN_INFO::mutable_chusername() {
  
  // @@protoc_insertion_point(field_mutable:MEAuth.ST_USER_LOGIN_INFO.chUserName)
  return chusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ST_USER_LOGIN_INFO::release_chusername() {
  // @@protoc_insertion_point(field_release:MEAuth.ST_USER_LOGIN_INFO.chUserName)
  
  return chusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ST_USER_LOGIN_INFO::set_allocated_chusername(::std::string* chusername) {
  if (chusername != NULL) {
    
  } else {
    
  }
  chusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chusername);
  // @@protoc_insertion_point(field_set_allocated:MEAuth.ST_USER_LOGIN_INFO.chUserName)
}

// bytes chPasswordTxt = 2;
inline void ST_USER_LOGIN_INFO::clear_chpasswordtxt() {
  chpasswordtxt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ST_USER_LOGIN_INFO::chpasswordtxt() const {
  // @@protoc_insertion_point(field_get:MEAuth.ST_USER_LOGIN_INFO.chPasswordTxt)
  return chpasswordtxt_.GetNoArena();
}
inline void ST_USER_LOGIN_INFO::set_chpasswordtxt(const ::std::string& value) {
  
  chpasswordtxt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MEAuth.ST_USER_LOGIN_INFO.chPasswordTxt)
}
#if LANG_CXX11
inline void ST_USER_LOGIN_INFO::set_chpasswordtxt(::std::string&& value) {
  
  chpasswordtxt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MEAuth.ST_USER_LOGIN_INFO.chPasswordTxt)
}
#endif
inline void ST_USER_LOGIN_INFO::set_chpasswordtxt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chpasswordtxt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MEAuth.ST_USER_LOGIN_INFO.chPasswordTxt)
}
inline void ST_USER_LOGIN_INFO::set_chpasswordtxt(const void* value, size_t size) {
  
  chpasswordtxt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MEAuth.ST_USER_LOGIN_INFO.chPasswordTxt)
}
inline ::std::string* ST_USER_LOGIN_INFO::mutable_chpasswordtxt() {
  
  // @@protoc_insertion_point(field_mutable:MEAuth.ST_USER_LOGIN_INFO.chPasswordTxt)
  return chpasswordtxt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ST_USER_LOGIN_INFO::release_chpasswordtxt() {
  // @@protoc_insertion_point(field_release:MEAuth.ST_USER_LOGIN_INFO.chPasswordTxt)
  
  return chpasswordtxt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ST_USER_LOGIN_INFO::set_allocated_chpasswordtxt(::std::string* chpasswordtxt) {
  if (chpasswordtxt != NULL) {
    
  } else {
    
  }
  chpasswordtxt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chpasswordtxt);
  // @@protoc_insertion_point(field_set_allocated:MEAuth.ST_USER_LOGIN_INFO.chPasswordTxt)
}

// string chAddressIp = 3;
inline void ST_USER_LOGIN_INFO::clear_chaddressip() {
  chaddressip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ST_USER_LOGIN_INFO::chaddressip() const {
  // @@protoc_insertion_point(field_get:MEAuth.ST_USER_LOGIN_INFO.chAddressIp)
  return chaddressip_.GetNoArena();
}
inline void ST_USER_LOGIN_INFO::set_chaddressip(const ::std::string& value) {
  
  chaddressip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MEAuth.ST_USER_LOGIN_INFO.chAddressIp)
}
#if LANG_CXX11
inline void ST_USER_LOGIN_INFO::set_chaddressip(::std::string&& value) {
  
  chaddressip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MEAuth.ST_USER_LOGIN_INFO.chAddressIp)
}
#endif
inline void ST_USER_LOGIN_INFO::set_chaddressip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chaddressip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MEAuth.ST_USER_LOGIN_INFO.chAddressIp)
}
inline void ST_USER_LOGIN_INFO::set_chaddressip(const char* value, size_t size) {
  
  chaddressip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MEAuth.ST_USER_LOGIN_INFO.chAddressIp)
}
inline ::std::string* ST_USER_LOGIN_INFO::mutable_chaddressip() {
  
  // @@protoc_insertion_point(field_mutable:MEAuth.ST_USER_LOGIN_INFO.chAddressIp)
  return chaddressip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ST_USER_LOGIN_INFO::release_chaddressip() {
  // @@protoc_insertion_point(field_release:MEAuth.ST_USER_LOGIN_INFO.chAddressIp)
  
  return chaddressip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ST_USER_LOGIN_INFO::set_allocated_chaddressip(::std::string* chaddressip) {
  if (chaddressip != NULL) {
    
  } else {
    
  }
  chaddressip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chaddressip);
  // @@protoc_insertion_point(field_set_allocated:MEAuth.ST_USER_LOGIN_INFO.chAddressIp)
}

// -------------------------------------------------------------------

// ST_USER_LOGIN_RESP

// uint32 ucLoginRsp = 1;
inline void ST_USER_LOGIN_RESP::clear_ucloginrsp() {
  ucloginrsp_ = 0u;
}
inline ::google::protobuf::uint32 ST_USER_LOGIN_RESP::ucloginrsp() const {
  // @@protoc_insertion_point(field_get:MEAuth.ST_USER_LOGIN_RESP.ucLoginRsp)
  return ucloginrsp_;
}
inline void ST_USER_LOGIN_RESP::set_ucloginrsp(::google::protobuf::uint32 value) {
  
  ucloginrsp_ = value;
  // @@protoc_insertion_point(field_set:MEAuth.ST_USER_LOGIN_RESP.ucLoginRsp)
}

// uint32 uiUserID = 2;
inline void ST_USER_LOGIN_RESP::clear_uiuserid() {
  uiuserid_ = 0u;
}
inline ::google::protobuf::uint32 ST_USER_LOGIN_RESP::uiuserid() const {
  // @@protoc_insertion_point(field_get:MEAuth.ST_USER_LOGIN_RESP.uiUserID)
  return uiuserid_;
}
inline void ST_USER_LOGIN_RESP::set_uiuserid(::google::protobuf::uint32 value) {
  
  uiuserid_ = value;
  // @@protoc_insertion_point(field_set:MEAuth.ST_USER_LOGIN_RESP.uiUserID)
}

// uint32 uiIPLisyNum = 3;
inline void ST_USER_LOGIN_RESP::clear_uiiplisynum() {
  uiiplisynum_ = 0u;
}
inline ::google::protobuf::uint32 ST_USER_LOGIN_RESP::uiiplisynum() const {
  // @@protoc_insertion_point(field_get:MEAuth.ST_USER_LOGIN_RESP.uiIPLisyNum)
  return uiiplisynum_;
}
inline void ST_USER_LOGIN_RESP::set_uiiplisynum(::google::protobuf::uint32 value) {
  
  uiiplisynum_ = value;
  // @@protoc_insertion_point(field_set:MEAuth.ST_USER_LOGIN_RESP.uiIPLisyNum)
}

// repeated .MEAuth.ST_SIG_IP_INFO stIPInfo = 4;
inline int ST_USER_LOGIN_RESP::stipinfo_size() const {
  return stipinfo_.size();
}
inline void ST_USER_LOGIN_RESP::clear_stipinfo() {
  stipinfo_.Clear();
}
inline const ::MEAuth::ST_SIG_IP_INFO& ST_USER_LOGIN_RESP::stipinfo(int index) const {
  // @@protoc_insertion_point(field_get:MEAuth.ST_USER_LOGIN_RESP.stIPInfo)
  return stipinfo_.Get(index);
}
inline ::MEAuth::ST_SIG_IP_INFO* ST_USER_LOGIN_RESP::mutable_stipinfo(int index) {
  // @@protoc_insertion_point(field_mutable:MEAuth.ST_USER_LOGIN_RESP.stIPInfo)
  return stipinfo_.Mutable(index);
}
inline ::MEAuth::ST_SIG_IP_INFO* ST_USER_LOGIN_RESP::add_stipinfo() {
  // @@protoc_insertion_point(field_add:MEAuth.ST_USER_LOGIN_RESP.stIPInfo)
  return stipinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::MEAuth::ST_SIG_IP_INFO >*
ST_USER_LOGIN_RESP::mutable_stipinfo() {
  // @@protoc_insertion_point(field_mutable_list:MEAuth.ST_USER_LOGIN_RESP.stIPInfo)
  return &stipinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::MEAuth::ST_SIG_IP_INFO >&
ST_USER_LOGIN_RESP::stipinfo() const {
  // @@protoc_insertion_point(field_list:MEAuth.ST_USER_LOGIN_RESP.stIPInfo)
  return stipinfo_;
}

// uint32 uiSymbolNum = 5;
inline void ST_USER_LOGIN_RESP::clear_uisymbolnum() {
  uisymbolnum_ = 0u;
}
inline ::google::protobuf::uint32 ST_USER_LOGIN_RESP::uisymbolnum() const {
  // @@protoc_insertion_point(field_get:MEAuth.ST_USER_LOGIN_RESP.uiSymbolNum)
  return uisymbolnum_;
}
inline void ST_USER_LOGIN_RESP::set_uisymbolnum(::google::protobuf::uint32 value) {
  
  uisymbolnum_ = value;
  // @@protoc_insertion_point(field_set:MEAuth.ST_USER_LOGIN_RESP.uiSymbolNum)
}

// repeated .MEAuth.ST_SYMBOL_INFO stSymbolInfo = 6;
inline int ST_USER_LOGIN_RESP::stsymbolinfo_size() const {
  return stsymbolinfo_.size();
}
inline void ST_USER_LOGIN_RESP::clear_stsymbolinfo() {
  stsymbolinfo_.Clear();
}
inline const ::MEAuth::ST_SYMBOL_INFO& ST_USER_LOGIN_RESP::stsymbolinfo(int index) const {
  // @@protoc_insertion_point(field_get:MEAuth.ST_USER_LOGIN_RESP.stSymbolInfo)
  return stsymbolinfo_.Get(index);
}
inline ::MEAuth::ST_SYMBOL_INFO* ST_USER_LOGIN_RESP::mutable_stsymbolinfo(int index) {
  // @@protoc_insertion_point(field_mutable:MEAuth.ST_USER_LOGIN_RESP.stSymbolInfo)
  return stsymbolinfo_.Mutable(index);
}
inline ::MEAuth::ST_SYMBOL_INFO* ST_USER_LOGIN_RESP::add_stsymbolinfo() {
  // @@protoc_insertion_point(field_add:MEAuth.ST_USER_LOGIN_RESP.stSymbolInfo)
  return stsymbolinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::MEAuth::ST_SYMBOL_INFO >*
ST_USER_LOGIN_RESP::mutable_stsymbolinfo() {
  // @@protoc_insertion_point(field_mutable_list:MEAuth.ST_USER_LOGIN_RESP.stSymbolInfo)
  return &stsymbolinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::MEAuth::ST_SYMBOL_INFO >&
ST_USER_LOGIN_RESP::stsymbolinfo() const {
  // @@protoc_insertion_point(field_list:MEAuth.ST_USER_LOGIN_RESP.stSymbolInfo)
  return stsymbolinfo_;
}

// bytes chUserName = 7;
inline void ST_USER_LOGIN_RESP::clear_chusername() {
  chusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ST_USER_LOGIN_RESP::chusername() const {
  // @@protoc_insertion_point(field_get:MEAuth.ST_USER_LOGIN_RESP.chUserName)
  return chusername_.GetNoArena();
}
inline void ST_USER_LOGIN_RESP::set_chusername(const ::std::string& value) {
  
  chusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MEAuth.ST_USER_LOGIN_RESP.chUserName)
}
#if LANG_CXX11
inline void ST_USER_LOGIN_RESP::set_chusername(::std::string&& value) {
  
  chusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MEAuth.ST_USER_LOGIN_RESP.chUserName)
}
#endif
inline void ST_USER_LOGIN_RESP::set_chusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MEAuth.ST_USER_LOGIN_RESP.chUserName)
}
inline void ST_USER_LOGIN_RESP::set_chusername(const void* value, size_t size) {
  
  chusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MEAuth.ST_USER_LOGIN_RESP.chUserName)
}
inline ::std::string* ST_USER_LOGIN_RESP::mutable_chusername() {
  
  // @@protoc_insertion_point(field_mutable:MEAuth.ST_USER_LOGIN_RESP.chUserName)
  return chusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ST_USER_LOGIN_RESP::release_chusername() {
  // @@protoc_insertion_point(field_release:MEAuth.ST_USER_LOGIN_RESP.chUserName)
  
  return chusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ST_USER_LOGIN_RESP::set_allocated_chusername(::std::string* chusername) {
  if (chusername != NULL) {
    
  } else {
    
  }
  chusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chusername);
  // @@protoc_insertion_point(field_set_allocated:MEAuth.ST_USER_LOGIN_RESP.chUserName)
}

// -------------------------------------------------------------------

// ST_SIG_IP_INFO

// uint32 wIpType = 1;
inline void ST_SIG_IP_INFO::clear_wiptype() {
  wiptype_ = 0u;
}
inline ::google::protobuf::uint32 ST_SIG_IP_INFO::wiptype() const {
  // @@protoc_insertion_point(field_get:MEAuth.ST_SIG_IP_INFO.wIpType)
  return wiptype_;
}
inline void ST_SIG_IP_INFO::set_wiptype(::google::protobuf::uint32 value) {
  
  wiptype_ = value;
  // @@protoc_insertion_point(field_set:MEAuth.ST_SIG_IP_INFO.wIpType)
}

// bytes ucIpAddress = 2;
inline void ST_SIG_IP_INFO::clear_ucipaddress() {
  ucipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ST_SIG_IP_INFO::ucipaddress() const {
  // @@protoc_insertion_point(field_get:MEAuth.ST_SIG_IP_INFO.ucIpAddress)
  return ucipaddress_.GetNoArena();
}
inline void ST_SIG_IP_INFO::set_ucipaddress(const ::std::string& value) {
  
  ucipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MEAuth.ST_SIG_IP_INFO.ucIpAddress)
}
#if LANG_CXX11
inline void ST_SIG_IP_INFO::set_ucipaddress(::std::string&& value) {
  
  ucipaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MEAuth.ST_SIG_IP_INFO.ucIpAddress)
}
#endif
inline void ST_SIG_IP_INFO::set_ucipaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ucipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MEAuth.ST_SIG_IP_INFO.ucIpAddress)
}
inline void ST_SIG_IP_INFO::set_ucipaddress(const void* value, size_t size) {
  
  ucipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MEAuth.ST_SIG_IP_INFO.ucIpAddress)
}
inline ::std::string* ST_SIG_IP_INFO::mutable_ucipaddress() {
  
  // @@protoc_insertion_point(field_mutable:MEAuth.ST_SIG_IP_INFO.ucIpAddress)
  return ucipaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ST_SIG_IP_INFO::release_ucipaddress() {
  // @@protoc_insertion_point(field_release:MEAuth.ST_SIG_IP_INFO.ucIpAddress)
  
  return ucipaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ST_SIG_IP_INFO::set_allocated_ucipaddress(::std::string* ucipaddress) {
  if (ucipaddress != NULL) {
    
  } else {
    
  }
  ucipaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ucipaddress);
  // @@protoc_insertion_point(field_set_allocated:MEAuth.ST_SIG_IP_INFO.ucIpAddress)
}

// -------------------------------------------------------------------

// ST_SYMBOL_INFO

// uint32 uiSymbolID = 1;
inline void ST_SYMBOL_INFO::clear_uisymbolid() {
  uisymbolid_ = 0u;
}
inline ::google::protobuf::uint32 ST_SYMBOL_INFO::uisymbolid() const {
  // @@protoc_insertion_point(field_get:MEAuth.ST_SYMBOL_INFO.uiSymbolID)
  return uisymbolid_;
}
inline void ST_SYMBOL_INFO::set_uisymbolid(::google::protobuf::uint32 value) {
  
  uisymbolid_ = value;
  // @@protoc_insertion_point(field_set:MEAuth.ST_SYMBOL_INFO.uiSymbolID)
}

// bytes uiSymbolName = 2;
inline void ST_SYMBOL_INFO::clear_uisymbolname() {
  uisymbolname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ST_SYMBOL_INFO::uisymbolname() const {
  // @@protoc_insertion_point(field_get:MEAuth.ST_SYMBOL_INFO.uiSymbolName)
  return uisymbolname_.GetNoArena();
}
inline void ST_SYMBOL_INFO::set_uisymbolname(const ::std::string& value) {
  
  uisymbolname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MEAuth.ST_SYMBOL_INFO.uiSymbolName)
}
#if LANG_CXX11
inline void ST_SYMBOL_INFO::set_uisymbolname(::std::string&& value) {
  
  uisymbolname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MEAuth.ST_SYMBOL_INFO.uiSymbolName)
}
#endif
inline void ST_SYMBOL_INFO::set_uisymbolname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uisymbolname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MEAuth.ST_SYMBOL_INFO.uiSymbolName)
}
inline void ST_SYMBOL_INFO::set_uisymbolname(const void* value, size_t size) {
  
  uisymbolname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MEAuth.ST_SYMBOL_INFO.uiSymbolName)
}
inline ::std::string* ST_SYMBOL_INFO::mutable_uisymbolname() {
  
  // @@protoc_insertion_point(field_mutable:MEAuth.ST_SYMBOL_INFO.uiSymbolName)
  return uisymbolname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ST_SYMBOL_INFO::release_uisymbolname() {
  // @@protoc_insertion_point(field_release:MEAuth.ST_SYMBOL_INFO.uiSymbolName)
  
  return uisymbolname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ST_SYMBOL_INFO::set_allocated_uisymbolname(::std::string* uisymbolname) {
  if (uisymbolname != NULL) {
    
  } else {
    
  }
  uisymbolname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uisymbolname);
  // @@protoc_insertion_point(field_set_allocated:MEAuth.ST_SYMBOL_INFO.uiSymbolName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MEAuth

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ME_2eAuth_2eproto__INCLUDED
